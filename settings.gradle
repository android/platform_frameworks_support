/////////////////////////////
//
// Buildscript utils
//
/////////////////////////////


ext.unconventionalProjects = new HashMap<>()

// Calling includeProject(name, filePath) is shorthand for:
//
//   include(name)
//   project(name).projectDir = new File(filePath)
//
// Note that <name> directly controls the Gradle project name, and also indirectly sets:
//   the project name in the IDE
//   the Maven artifactId
//
def unconventionalProject(name, filePath) {
    def file
    if (filePath instanceof String) {
        file = new File(rootDir, filePath)
    } else {
        file = filePath
    }
    unconventionalProjects.put(file.absolutePath, name)
}


/////////////////////////////
//
// Libraries
//
/////////////////////////////

unconventionalProject(":annotation", "annotations")
unconventionalProject(":animation:testing", "animation/testing")
unconventionalProject(":arch:core-common", "arch/core-common")
unconventionalProject(":arch:core-testing", "arch/core-testing")
unconventionalProject(":arch:core-runtime", "arch/core-runtime")
unconventionalProject(":car", "car/core")
unconventionalProject(":car-cluster", "car/cluster")
unconventionalProject(":car-moderator", "car/moderator")
unconventionalProject(":contentpager", "content")
unconventionalProject(":dynamicanimation", "dynamic-animation")
unconventionalProject(":emoji", "emoji/core")
unconventionalProject(":emoji-bundled", "emoji/bundled")
unconventionalProject(":emoji-appcompat", "emoji/appcompat")
unconventionalProject(":jetifier-core", "jetifier/jetifier/core")
unconventionalProject(":jetifier-processor", "jetifier/jetifier/processor")
unconventionalProject(":jetifier-gradle-plugin", "jetifier/jetifier/gradle-plugin")
unconventionalProject(":jetifier-standalone", "jetifier/jetifier/standalone")
unconventionalProject(":jetifier-preprocessor", "jetifier/jetifier/preprocessor")
unconventionalProject(":media2-exoplayer", "media2/media2-exoplayer")
unconventionalProject(":recyclerview", "recyclerview/recyclerview")
unconventionalProject(":recyclerview-selection", "recyclerview/selection")
unconventionalProject(":navigation:navigation-integration-tests:testapp", "navigation/integration-tests/testapp")
unconventionalProject(":remotecallback-processor", "remotecallback/processor")
unconventionalProject(":versionedparcelable-annotation", "versionedparcelable/annotation")
unconventionalProject(":percentlayout", "percent")
unconventionalProject(":slice-core", "slices/core")
unconventionalProject(":slice-view", "slices/view")
unconventionalProject(":slice-builders", "slices/builders")
unconventionalProject(":slice-builders-ktx", "slices/builders/ktx")
unconventionalProject(":slice-test", "slices/test")
unconventionalProject(":slice-benchmark", "slices/benchmark")
unconventionalProject(":sqlite:sqlite", "persistence/db")
unconventionalProject(":sqlite:sqlite-framework", "persistence/db-framework")
unconventionalProject(":sqlite:sqlite-ktx", "persistence/db/ktx")
unconventionalProject(":tvprovider", "tv-provider")
unconventionalProject(":vectordrawable", "graphics/drawable/static")
unconventionalProject(":vectordrawable-animated", "graphics/drawable/animated")
unconventionalProject(":work:work-runtime", "work/workmanager")
unconventionalProject(":work:work-runtime-ktx", "work/workmanager-ktx")
unconventionalProject(":work:work-firebase", "work/workmanager-firebase")
unconventionalProject(":work:work-testing", "work/workmanager-test")

/////////////////////////////
//
// Legacy
//
/////////////////////////////

unconventionalProject(":legacy-support-core-ui", "legacy/core-ui")
unconventionalProject(":legacy-support-core-utils", "legacy/core-utils")
unconventionalProject(":legacy-support-v4", "legacy/v4")
unconventionalProject(":legacy-support-v13", "legacy/v13")
unconventionalProject(":legacy-preference-v14", "legacy/preference-v14")

/////////////////////////////
//
// Samples
//
/////////////////////////////

File samplesRoot = new File(rootDir, "samples")

unconventionalProject(":support-animation-demos", new File(samplesRoot, "SupportAnimationDemos"))
unconventionalProject(":support-app-navigation", new File(samplesRoot, "SupportAppNavigation"))
unconventionalProject(":support-biometric-demos", new File(samplesRoot, "BiometricDemos"))
unconventionalProject(":support-car-demos", new File(samplesRoot, "SupportCarDemos"))
unconventionalProject(":support-content-demos", new File(samplesRoot, "SupportContentDemos"))
unconventionalProject(":support-design-demos", new File(samplesRoot, "SupportDesignDemos"))
unconventionalProject(":support-emoji-demos", new File(samplesRoot, "SupportEmojiDemos"))
unconventionalProject(":support-leanback-demos", new File(samplesRoot, "SupportLeanbackDemos"))
unconventionalProject(":support-media-demos", new File(samplesRoot, "SupportMediaDemos"))
unconventionalProject(":support-percent-demos", new File(samplesRoot, "SupportPercentDemos"))
unconventionalProject(":support-preference-demos", new File(samplesRoot, "SupportPreferenceDemos"))
unconventionalProject(":support-remotecallback-demos", new File(samplesRoot, "SupportRemoteCallbackDemos"))
unconventionalProject(":support-slices-demos", new File(samplesRoot, "SupportSliceDemos"))
unconventionalProject(":support-transition-demos", new File(samplesRoot, "SupportTransitionDemos"))
unconventionalProject(":support-vector-drawable-demos", new File(samplesRoot, "SupportVectorDrawableDemos"))
unconventionalProject(":support-v4-demos", new File(samplesRoot, "Support4Demos"))
unconventionalProject(":support-v7-demos", new File(samplesRoot, "Support7Demos"))
unconventionalProject(":support-v13-demos", new File(samplesRoot, "Support13Demos"))
unconventionalProject(":support-wear-demos", new File(samplesRoot, "SupportWearDemos"))
unconventionalProject(":viewpager2-demos", new File(samplesRoot, "ViewPager2Demos"))

/////////////////////////////
//
// Testing libraries
//
/////////////////////////////

unconventionalProject(":internal-testutils", "testutils")
unconventionalProject(":internal-testutils-ktx", "testutils-ktx")

/////////////////////////////
//
// Applications and libraries for tests
//
/////////////////////////////

unconventionalProject(":support-media-compat-test-client", "media/version-compat-tests/current/client")
unconventionalProject(":support-media-compat-test-client-previous", "media/version-compat-tests/previous/client")
unconventionalProject(":support-media-compat-test-service", "media/version-compat-tests/current/service")
unconventionalProject(":support-media-compat-test-service-previous", "media/version-compat-tests/previous/service")
unconventionalProject(":support-media-compat-test-lib", "media/version-compat-tests/lib")

/////////////////////////////
//
// External
//
/////////////////////////////

apply(from: "include-composite-deps.gradle")
File externalRoot = new File(rootDir, "../../external")

unconventionalProject(":noto-emoji-compat", new File(externalRoot, "noto-fonts/emoji-compat"))
unconventionalProject(":webview-support-interfaces", new File(externalRoot, "webview_support_interfaces"))

// fake project which is used for docs generation from prebuilts
// we need real android project to generate R.java, aidl etc files that mentioned in sources
if (!startParameter.projectProperties.containsKey('android.injected.invoked.from.ide')) {
    // we don't need it in ide, so we don't configure it there
    unconventionalProject(":docs-fake", "docs-fake")
}

def commonExclusionList = ["src", "res", "res-public", "api", "build", "api_legacy", "frameworks",
                           "buildSrc"]

def projectExclusion = ["checkstyle", "safeargs-testapp", "docs-fake"]

ext.exclusion = new HashSet(commonExclusionList + projectExclusion)

def findAllGradle(File file) {
    if (file.name == "build.gradle" && file.parentFile != rootDir) {
        return [file.parentFile]
    }
    if (!file.isDirectory() || exclusion.contains(file.name) || file.name.startsWith(".")) {
        return []
    }
    def result = []
    for (File f in file.listFiles()) {
        result += findAllGradle(f)
    }
    return result
}

def createConventionalProjects(List<File> files, Map<String, String> unconventionalProjects) {
    def result = new HashMap()
    def rootPath = rootDir.toPath()
    for (File f in files) {
        if (unconventionalProjects.containsKey(f.absolutePath)) {
            continue
        }
        def relative = rootPath.relativize(f.toPath())
        def groupName = relative.getName(0).toString()
        if (groupName == "samples") {
            continue;
        }
        if (relative.getNameCount() == 1) {
            result.put(f.absolutePath, ":${groupName}")
            continue
        }
        StringBuilder builder = new StringBuilder()
        for (int i = 0; i < relative.getNameCount(); ++i) {
            def part = relative.getName(i).toString()
            boolean isKtx = relative.getName(i).toString() == "ktx"
            boolean repeat = i == 1 && groupName != part && "integration-tests" != part && !isKtx
            builder.append(!repeat ? (isKtx ? "-ktx" : ":$part") : ":$groupName-${part}")
        }
        result.put(f.absolutePath, builder.toString())
    }
    return result
}


def allProjects = createConventionalProjects(findAllGradle(rootDir), unconventionalProjects) + unconventionalProjects

for (String path in allProjects.keySet()) {
    def name = allProjects[path]
    settings.include(name)
    project(name).projectDir = new File(path)
}
