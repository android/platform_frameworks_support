{
  "comments": [
    {
      "key": {
        "uuid": "b85ee0ea_83b153fc",
        "filename": "paging/runtime/src/main/java/androidx/paging/AsyncPagedListDiffer.kt",
        "patchSetId": 4
      },
      "lineNbr": 489,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-06-14T20:12:58Z",
      "side": 1,
      "message": "revert name change",
      "range": {
        "startLine": 489,
        "startChar": 13,
        "endLine": 489,
        "endChar": 40
      },
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "952b7249_393e11e3",
        "filename": "paging/runtime/src/main/java/androidx/paging/AsyncPagedListDiffer.kt",
        "patchSetId": 4
      },
      "lineNbr": 507,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-06-14T20:12:58Z",
      "side": 1,
      "message": "removeLoadStateListener",
      "range": {
        "startLine": 507,
        "startChar": 13,
        "endLine": 507,
        "endChar": 40
      },
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b2a714_a937eac0",
        "filename": "paging/runtime/src/main/java/androidx/paging/PagedListAdapter.kt",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2019-06-14T19:17:04Z",
      "side": 1,
      "message": "Hmmmm is `get() \u003d ` what you want here? I think that will allocate an instance of the generated class on every call. Whereas just doing `\u003d` would allocate once and store in the field.",
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b401c1da_c383c253",
        "filename": "paging/runtime/src/main/java/androidx/paging/PagedListAdapter.kt",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-06-14T19:52:20Z",
      "side": 1,
      "message": "Admittedly, I don\u0027t have a good understanding of this warning - but I did this because Studio was warning me about leaking `this` in a constructor of non-final class.\n\nShould we actually be doing something like by lazy here instead?\n\nI think we just want to be sure that if onLoadStateChanged is overridden we call the overridden version in the constructor\u0027s call to differ.addLoadStateChangedListener, etc.",
      "parentUuid": "55b2a714_a937eac0",
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d798f1e_7a7da335",
        "filename": "paging/runtime/src/main/java/androidx/paging/PagedListAdapter.kt",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-06-14T20:12:58Z",
      "side": 1,
      "message": "revert these name changes",
      "range": {
        "startLine": 253,
        "startChar": 13,
        "endLine": 253,
        "endChar": 40
      },
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123f6ad7_8c15817b",
        "filename": "paging/runtime/src/main/java/androidx/paging/PagedListAdapter.kt",
        "patchSetId": 4
      },
      "lineNbr": 263,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-06-14T20:12:58Z",
      "side": 1,
      "message": "revert name change",
      "range": {
        "startLine": 263,
        "startChar": 13,
        "endLine": 263,
        "endChar": 43
      },
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f672c2f_96fe1aa5",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxPagedListBuilder.kt",
        "patchSetId": 4
      },
      "lineNbr": 215,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2019-06-14T19:17:04Z",
      "side": 1,
      "message": "What motivated this change out of curiosity?",
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a760a4f6_819db616",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxPagedListBuilder.kt",
        "patchSetId": 4
      },
      "lineNbr": 215,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-06-14T19:52:20Z",
      "side": 1,
      "message": "I feel like there\u0027s some loss of scope / encapsulation when implementing an interface with no intention of any of the methods you just added to the class being called elsewhere. i.e., we don\u0027t really intend onInvalidated to be part of PagingObservableOnSubscribe\u0027s api (even though it\u0027s an internal class), we just want to call some block of code when the backing datasource is invalidated.\n\nIt\u0027s also sometimes hard to figure out which overridden methods belong to which interface when there\u0027s a lot of implements and it\u0027s a nice way to keep them together and show where it is used / relevant.\n\nIt might also just be me carrying nightmares forward from multiple implementations of setOnClickListener jammed together in one activity though.\n\nI actually would change Cancellable and Runnable too, but didn\u0027t want to make this CL too big.",
      "parentUuid": "2f672c2f_96fe1aa5",
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcec4475_724f7b8b",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxPagedListBuilder.kt",
        "patchSetId": 4
      },
      "lineNbr": 215,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2019-06-14T20:23:46Z",
      "side": 1,
      "message": "I wrote this class originally, or at least I changed it to use this pattern. It is actually meant to save bytes in both the APK and at runtime in terms of RAM. \n\nEach lambda produces a class with at least two methods (constructor and callback) and each class comes with a fixed overhead in terms of the bytes used to represent it. By having the class be separate you\u0027re now paying for its name and declaration in addition to the cost of the two methods.\n\nAdditionally, each instance of those classes occupies 16 bytes of RAM plus 4 bytes for every reference stored in a field. Here you\u0027re capturing the PagingObservableOnSubscribe instance (and referencing its emitter and fromExecutor fields) so the lambda will cost 20 bytes. But then each object is rounded to a multiple of 8 (or 16 depending on the VM) so 4 bytes will be wasted and it will cost 24 bytes. There\u0027s also the 4 bytes you\u0027re adding to the enclosing class so that it can store a reference to the lambda class instance.\n\nCompare this to when you implemented the interface on the existing class. You only pay for the single callback method in bytecode. The class is already paid for and so is its constructor. In terms of bytes in memory, the 16 byte overhead is already paid for and you\u0027re adding no additional fields so the cost is actually 0 additional bytes.\n\nThis is only for use in non-public types, obviously. And it\u0027s a small savings, admittedly. It really only makes sense when you\u0027re creating a lot of classes. In RxJava, for example, the pattern is used in nearly every operator: https://github.com/ReactiveX/RxJava/blob/15e52bbf7221498f37cf563fba1abf38ebbf5b90/src/main/java/io/reactivex/internal/operators/observable/ObservableTake.java#L33. In RxBinding in every source: https://github.com/JakeWharton/RxBinding/blob/404146fc447abeebf829b943817ec2a2d26e9576/rxbinding/src/main/java/com/jakewharton/rxbinding3/widget/TextViewTextChangesObservable.kt#L49. Those libraries have hundreds of these classes. They wind up saving maybe tens kilobytes of APK size and RAM which isn\u0027t a ton, but it was basically free money.\n\nSo it probably doesn\u0027t matter for the single class here, but there was an actual reason for this pattern.",
      "parentUuid": "a760a4f6_819db616",
      "revId": "9b695f33feacabc19ad4c20dd618a5022b1bd1de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}