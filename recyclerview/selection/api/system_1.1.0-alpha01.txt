// Signature format: 2.0
package androidx.recyclerview.selection {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class AutoScroller {
    ctor public AutoScroller();
    method public abstract void reset();
    method public abstract void scroll(android.graphics.Point);
  }

  public abstract class BandPredicate {
    method static boolean hasSupportedLayoutManager(androidx.recyclerview.widget.RecyclerView);
  }

  public static final class BandPredicate.EmptyArea extends androidx.recyclerview.selection.BandPredicate {
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
  }

  public static final class BandPredicate.NonDraggableArea extends androidx.recyclerview.selection.BandPredicate {
    field private final androidx.recyclerview.selection.ItemDetailsLookup! mDetailsLookup;
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
  }

  class BandSelectionHelper<K> implements androidx.recyclerview.widget.RecyclerView.OnItemTouchListener {
    ctor BandSelectionHelper(androidx.recyclerview.selection.BandSelectionHelper.BandHost, androidx.recyclerview.selection.AutoScroller, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.BandPredicate, androidx.recyclerview.selection.FocusDelegate<K>, androidx.recyclerview.selection.OperationMonitor);
    method static <K> androidx.recyclerview.selection.BandSelectionHelper! create(androidx.recyclerview.widget.RecyclerView, androidx.recyclerview.selection.AutoScroller, @DrawableRes int, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>, androidx.recyclerview.selection.BandPredicate, androidx.recyclerview.selection.FocusDelegate<K>, androidx.recyclerview.selection.OperationMonitor);
    method private void endBandSelect();
    method @VisibleForTesting boolean isActive();
    method void onScrolled(androidx.recyclerview.widget.RecyclerView, int, int);
    method void reset();
    method private void resizeBand();
    method @VisibleForTesting boolean shouldStart(android.view.MotionEvent);
    method @VisibleForTesting boolean shouldStop(android.view.MotionEvent);
    method private void startBandSelect(android.view.MotionEvent);
    field static final boolean DEBUG = false;
    field static final String TAG = "BandSelectionHelper";
    field private final androidx.recyclerview.selection.BandPredicate! mBandPredicate;
    field private android.graphics.Point? mCurrentPosition;
    field private final androidx.recyclerview.selection.FocusDelegate<K>! mFocusDelegate;
    field private final androidx.recyclerview.selection.GridModel.SelectionObserver! mGridObserver;
    field private final androidx.recyclerview.selection.BandSelectionHelper.BandHost! mHost;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field private final androidx.recyclerview.selection.OperationMonitor! mLock;
    field private androidx.recyclerview.selection.GridModel? mModel;
    field private android.graphics.Point? mOrigin;
    field private final androidx.recyclerview.selection.AutoScroller! mScroller;
    field final androidx.recyclerview.selection.SelectionTracker<K>! mSelectionTracker;
  }

  abstract static class BandSelectionHelper.BandHost<K> {
    ctor BandSelectionHelper.BandHost();
    method abstract void addOnScrollListener(androidx.recyclerview.widget.RecyclerView.OnScrollListener);
    method abstract androidx.recyclerview.selection.GridModel<K>! createGridModel();
    method abstract void hideBand();
    method abstract void showBand(android.graphics.Rect);
  }

  final class DefaultBandHost<K> extends androidx.recyclerview.selection.GridModel.GridHost<K> {
    ctor DefaultBandHost(androidx.recyclerview.widget.RecyclerView, @DrawableRes int, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>);
    method void addOnScrollListener(androidx.recyclerview.widget.RecyclerView.OnScrollListener);
    method android.graphics.Point! createAbsolutePoint(android.graphics.Point);
    method androidx.recyclerview.selection.GridModel<K>! createGridModel();
    method android.graphics.Rect! getAbsoluteRectForChildViewAt(int);
    method int getAdapterPositionAt(int);
    method int getColumnCount();
    method int getVisibleChildCount();
    method boolean hasView(int);
    method void hideBand();
    method void onDrawBand(android.graphics.Canvas);
    method void removeOnScrollListener(androidx.recyclerview.widget.RecyclerView.OnScrollListener);
    method void showBand(android.graphics.Rect);
    field private static final android.graphics.Rect! NILL_RECT;
    field private final android.graphics.drawable.Drawable! mBand;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
    field private final androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>! mSelectionPredicate;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class DefaultSelectionTracker<K> extends androidx.recyclerview.selection.SelectionTracker<K> {
    ctor public DefaultSelectionTracker(String, androidx.recyclerview.selection.ItemKeyProvider, androidx.recyclerview.selection.SelectionTracker.SelectionPredicate, androidx.recyclerview.selection.StorageStrategy<K>);
    method public void anchorRange(int);
    method private boolean canSetState(K, boolean);
    method private void clearPrimarySelection();
    method public void clearProvisionalSelection();
    method private androidx.recyclerview.selection.Selection! clearSelectionQuietly();
    method public void endRange();
    method public void extendProvisionalRange(int);
    method public void extendRange(int);
    method private void extendRange(int, int);
    method protected androidx.recyclerview.widget.RecyclerView.AdapterDataObserver! getAdapterDataObserver();
    method @VisibleForTesting String! getInstanceStateKey();
    method public boolean isRangeActive();
    method public void mergeProvisionalSelection();
    method private void notifyItemStateChanged(K, boolean);
    method private void notifySelectionChanged();
    method private void notifySelectionCleared(androidx.recyclerview.selection.Selection<K>);
    method private void notifySelectionRefresh();
    method private void notifySelectionRestored();
    method void onDataSetChanged();
    method private boolean setItemsSelectedQuietly(Iterable<K>, boolean);
    method public void setProvisionalSelection(java.util.Set<K>);
    method public void startRange(int);
    method void updateForProvisionalRange(int, int, boolean);
    method private void updateForRange(int, int, boolean, int);
    method void updateForRegularRange(int, int, boolean);
    field private static final String EXTRA_SELECTION_PREFIX = "androidx.recyclerview.selection";
    field private static final String TAG = "DefaultSelectionTracker";
    field private final androidx.recyclerview.selection.DefaultSelectionTracker.AdapterObserver! mAdapterObserver;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field private final java.util.List<androidx.recyclerview.selection.SelectionTracker.SelectionObserver>! mObservers;
    field private androidx.recyclerview.selection.Range? mRange;
    field private final androidx.recyclerview.selection.DefaultSelectionTracker.RangeCallbacks! mRangeCallbacks;
    field private final androidx.recyclerview.selection.Selection<K>! mSelection;
    field private final String! mSelectionId;
    field private final androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>! mSelectionPredicate;
    field private final boolean mSingleSelect;
    field private final androidx.recyclerview.selection.StorageStrategy<K>! mStorage;
  }

  private static final class DefaultSelectionTracker.AdapterObserver extends androidx.recyclerview.widget.RecyclerView.AdapterDataObserver {
    ctor DefaultSelectionTracker.AdapterObserver(androidx.recyclerview.selection.DefaultSelectionTracker<?>);
    field private final androidx.recyclerview.selection.DefaultSelectionTracker<?>! mSelectionTracker;
  }

  private final class DefaultSelectionTracker.RangeCallbacks extends androidx.recyclerview.selection.Range.Callbacks {
    ctor DefaultSelectionTracker.RangeCallbacks();
    method void updateForRange(int, int, boolean, int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @VisibleForTesting(otherwise=androidx.annotation.VisibleForTesting.PACKAGE_PRIVATE) public class EventBridge {
    ctor private EventBridge();
    method public static <K> void install(androidx.recyclerview.widget.RecyclerView.Adapter<?>, androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.ItemKeyProvider<K>);
    field private static final String TAG = "EventsRelays";
  }

  private static final class EventBridge.TrackerToAdapterBridge<K> extends androidx.recyclerview.selection.SelectionTracker.SelectionObserver<K> {
    ctor EventBridge.TrackerToAdapterBridge(androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.widget.RecyclerView.Adapter<?>);
    field private final androidx.recyclerview.widget.RecyclerView.Adapter<?>! mAdapter;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
  }

  public abstract class FocusDelegate<K> {
    method static <K> androidx.recyclerview.selection.FocusDelegate<K>! dummy();
  }

  final class GestureRouter<T extends android.view.GestureDetector.OnGestureListener & android.view.GestureDetector.OnDoubleTapListener> implements android.view.GestureDetector.OnDoubleTapListener android.view.GestureDetector.OnGestureListener {
    ctor GestureRouter(T);
    ctor GestureRouter();
    method public void register(int, T?);
    field private final androidx.recyclerview.selection.ToolHandlerRegistry<T>! mDelegates;
  }

  final class GestureSelectionHelper implements androidx.recyclerview.widget.RecyclerView.OnItemTouchListener {
    ctor GestureSelectionHelper(androidx.recyclerview.selection.SelectionTracker<?>, androidx.recyclerview.selection.ItemDetailsLookup<?>, androidx.recyclerview.selection.GestureSelectionHelper.ViewDelegate, androidx.recyclerview.selection.AutoScroller, androidx.recyclerview.selection.OperationMonitor);
    method static androidx.recyclerview.selection.GestureSelectionHelper! create(androidx.recyclerview.selection.SelectionTracker<?>, androidx.recyclerview.selection.ItemDetailsLookup<?>, androidx.recyclerview.widget.RecyclerView, androidx.recyclerview.selection.AutoScroller, androidx.recyclerview.selection.OperationMonitor);
    method private void endSelection();
    method private void extendSelection(int);
    method static float getInboundY(float, float);
    method private void handleCancelEvent();
    method private void handleMoveEvent(android.view.MotionEvent);
    method private boolean handleTouch(android.view.MotionEvent!);
    method private void handleUpEvent();
    method void start();
    field private static final String TAG = "GestureSelectionHelper";
    field private final androidx.recyclerview.selection.ItemDetailsLookup<?>! mDetailsLookup;
    field private int mLastStartedItemPos;
    field private final androidx.recyclerview.selection.OperationMonitor! mLock;
    field private final androidx.recyclerview.selection.AutoScroller! mScroller;
    field private final androidx.recyclerview.selection.SelectionTracker<?>! mSelectionMgr;
    field private boolean mStarted;
    field private final androidx.recyclerview.selection.GestureSelectionHelper.ViewDelegate! mView;
  }

  @VisibleForTesting static final class GestureSelectionHelper.RecyclerViewDelegate extends androidx.recyclerview.selection.GestureSelectionHelper.ViewDelegate {
    ctor GestureSelectionHelper.RecyclerViewDelegate(androidx.recyclerview.widget.RecyclerView);
    method int getHeight();
    method int getItemUnder(android.view.MotionEvent);
    method int getLastGlidedItemPosition(android.view.MotionEvent);
    method @VisibleForTesting static boolean isPastLastItem(int, int, int, android.view.MotionEvent, int);
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
  }

  @VisibleForTesting abstract static class GestureSelectionHelper.ViewDelegate {
    ctor GestureSelectionHelper.ViewDelegate();
    method abstract int getHeight();
    method abstract int getItemUnder(android.view.MotionEvent);
    method abstract int getLastGlidedItemPosition(android.view.MotionEvent);
  }

  final class GridModel<K> {
    ctor GridModel(androidx.recyclerview.selection.GridModel.GridHost!, androidx.recyclerview.selection.ItemKeyProvider<K>!, androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>!);
    method void addOnSelectionChangedListener(androidx.recyclerview.selection.GridModel.SelectionObserver!);
    method private boolean areItemsCoveredByBand(androidx.recyclerview.selection.GridModel.RelativePoint, androidx.recyclerview.selection.GridModel.RelativePoint);
    method private boolean canSelect(K!);
    method private android.graphics.Rect! computeBounds();
    method private int computeCornerNearestOrigin();
    method private void computeCurrentSelection();
    method androidx.recyclerview.selection.GridModel.RelativePoint! createRelativePoint(android.graphics.Point!);
    method private boolean doesCoordinateLocationCoverItems(androidx.recyclerview.selection.GridModel.RelativeCoordinate, androidx.recyclerview.selection.GridModel.RelativeCoordinate);
    method private int getCoordinateValue(androidx.recyclerview.selection.GridModel.RelativeCoordinate, java.util.List<androidx.recyclerview.selection.GridModel.Limits>, boolean);
    method int getPositionNearestOrigin();
    method private boolean isEmpty();
    method private boolean isPossiblePositionNearestOrigin(int, int, int, int, int, int);
    method private androidx.recyclerview.selection.GridModel.RelativeCoordinate! max(androidx.recyclerview.selection.GridModel.RelativeCoordinate, androidx.recyclerview.selection.GridModel.RelativeCoordinate);
    method private androidx.recyclerview.selection.GridModel.RelativeCoordinate! min(androidx.recyclerview.selection.GridModel.RelativeCoordinate, androidx.recyclerview.selection.GridModel.RelativeCoordinate);
    method private void notifySelectionChanged();
    method void onDestroy();
    method void onScrolled(androidx.recyclerview.widget.RecyclerView!, int, int);
    method private void recordItemData(android.graphics.Rect!, int);
    method private void recordLimits(java.util.List<androidx.recyclerview.selection.GridModel.Limits>!, androidx.recyclerview.selection.GridModel.Limits!);
    method private void recordVisibleChildren();
    method void resizeSelection(android.graphics.Point!);
    method void startCapturing(android.graphics.Point!);
    method void stopCapturing();
    method private void updateModel();
    method private void updateSelection(android.graphics.Rect!);
    method private void updateSelection(int, int, int, int);
    field private static final int LEFT = 0; // 0x0
    field private static final int LOWER = 1; // 0x1
    field private static final int LOWER_LEFT = 1; // 0x1
    field private static final int LOWER_RIGHT = 3; // 0x3
    field static final int NOT_SET = -1; // 0xffffffff
    field private static final int RIGHT = 2; // 0x2
    field private static final int UPPER = 0; // 0x0
    field private static final int UPPER_LEFT = 0; // 0x0
    field private static final int UPPER_RIGHT = 2; // 0x2
    field private final java.util.List<androidx.recyclerview.selection.GridModel.Limits>! mColumnBounds;
    field private final android.util.SparseArray<android.util.SparseIntArray>! mColumns;
    field private final androidx.recyclerview.selection.GridModel.GridHost<K>! mHost;
    field private boolean mIsActive;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field private final android.util.SparseBooleanArray! mKnownPositions;
    field private final java.util.List<androidx.recyclerview.selection.GridModel.SelectionObserver>! mOnSelectionChangedListeners;
    field private android.graphics.Point! mPointer;
    field private int mPositionNearestOrigin;
    field private androidx.recyclerview.selection.GridModel.RelativePoint! mRelOrigin;
    field private androidx.recyclerview.selection.GridModel.RelativePoint! mRelPointer;
    field private final java.util.List<androidx.recyclerview.selection.GridModel.Limits>! mRowBounds;
    field private final androidx.recyclerview.widget.RecyclerView.OnScrollListener! mScrollListener;
    field private final java.util.Set<K>! mSelection;
    field private final androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>! mSelectionPredicate;
  }

  abstract static class GridModel.GridHost<K> extends androidx.recyclerview.selection.BandSelectionHelper.BandHost<K> {
    ctor GridModel.GridHost();
    method abstract android.graphics.Point! createAbsolutePoint(android.graphics.Point);
    method abstract android.graphics.Rect! getAbsoluteRectForChildViewAt(int);
    method abstract int getAdapterPositionAt(int);
    method abstract int getColumnCount();
    method abstract int getVisibleChildCount();
    method abstract boolean hasView(int);
    method abstract void removeOnScrollListener(androidx.recyclerview.widget.RecyclerView.OnScrollListener);
  }

  private static class GridModel.Limits implements java.lang.Comparable<androidx.recyclerview.selection.GridModel.Limits> {
    ctor GridModel.Limits(int, int);
    field public int lowerLimit;
    field public int upperLimit;
  }

  private static class GridModel.RelativeCoordinate implements java.lang.Comparable<androidx.recyclerview.selection.GridModel.RelativeCoordinate> {
    ctor GridModel.RelativeCoordinate(java.util.List<androidx.recyclerview.selection.GridModel.Limits>!, int);
    method int toComparisonValue();
    field static final int AFTER_LAST_ITEM = 0; // 0x0
    field static final int BEFORE_FIRST_ITEM = 1; // 0x1
    field static final int BETWEEN_TWO_ITEMS = 2; // 0x2
    field static final int WITHIN_LIMITS = 3; // 0x3
    field public androidx.recyclerview.selection.GridModel.Limits! limitsAfterCoordinate;
    field public androidx.recyclerview.selection.GridModel.Limits! limitsBeforeCoordinate;
    field public androidx.recyclerview.selection.GridModel.Limits! mFirstKnownItem;
    field public androidx.recyclerview.selection.GridModel.Limits! mLastKnownItem;
    field public final int type;
  }

  private static class GridModel.RelativePoint {
    ctor GridModel.RelativePoint(java.util.List<androidx.recyclerview.selection.GridModel.Limits>, java.util.List<androidx.recyclerview.selection.GridModel.Limits>, android.graphics.Point!);
    ctor GridModel.RelativePoint(androidx.recyclerview.selection.GridModel.RelativeCoordinate, androidx.recyclerview.selection.GridModel.RelativeCoordinate);
    field final androidx.recyclerview.selection.GridModel.RelativeCoordinate! mX;
    field final androidx.recyclerview.selection.GridModel.RelativeCoordinate! mY;
  }

  public abstract static class GridModel.SelectionObserver<K> {
    ctor public GridModel.SelectionObserver();
    method abstract void onSelectionChanged(java.util.Set<K>!);
  }

  public abstract class ItemDetailsLookup<K> {
    method final int getItemPosition(android.view.MotionEvent);
    method private static boolean hasPosition(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<?>?);
    method private static boolean hasSelectionKey(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<?>?);
    method final boolean inItemDragRegion(android.view.MotionEvent);
    method final boolean inItemSelectRegion(android.view.MotionEvent);
    method final boolean overItem(android.view.MotionEvent);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected boolean overItemWithSelectionKey(android.view.MotionEvent);
  }

  public abstract static class ItemDetailsLookup.ItemDetails<K> {
    method private boolean isEqualTo(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails);
  }

  public abstract class ItemKeyProvider<K> {
    method final boolean hasAccess(@androidx.recyclerview.selection.ItemKeyProvider.Scope int);
    field @androidx.recyclerview.selection.ItemKeyProvider.Scope private final int mScope;
  }

  final class MotionEvents {
    ctor private MotionEvents();
    method static android.graphics.Point! getOrigin(android.view.MotionEvent);
    method private static boolean hasBit(int, int);
    method static boolean isActionCancel(android.view.MotionEvent);
    method static boolean isActionMove(android.view.MotionEvent);
    method static boolean isActionPointerDown(android.view.MotionEvent);
    method static boolean isActionPointerUp(android.view.MotionEvent);
    method static boolean isActionUp(android.view.MotionEvent);
    method static boolean isAltKeyPressed(android.view.MotionEvent);
    method private static boolean isButtonPressed(android.view.MotionEvent!, int);
    method static boolean isCtrlKeyPressed(android.view.MotionEvent);
    method static boolean isMouseEvent(android.view.MotionEvent);
    method static boolean isPointerDragEvent(android.view.MotionEvent!);
    method static boolean isPrimaryMouseButtonPressed(android.view.MotionEvent);
    method static boolean isSecondaryMouseButtonPressed(android.view.MotionEvent);
    method static boolean isShiftKeyPressed(android.view.MotionEvent);
    method static boolean isTertiaryMouseButtonPressed(android.view.MotionEvent);
    method static boolean isTouchpadScroll(android.view.MotionEvent);
  }

  abstract class MotionInputHandler<K> extends android.view.GestureDetector.SimpleOnGestureListener {
    ctor MotionInputHandler(androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.FocusDelegate<K>);
    method protected final void extendSelectionRange(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>);
    method protected final boolean focusItem(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>);
    method static boolean hasPosition(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<?>?);
    method static boolean hasSelectionKey(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<?>?);
    method final boolean isRangeExtension(android.view.MotionEvent);
    method final boolean selectItem(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>);
    method boolean shouldClearSelection(android.view.MotionEvent, androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>);
    field private final androidx.recyclerview.selection.FocusDelegate<K>! mFocusDelegate;
    field private final androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field protected final androidx.recyclerview.selection.SelectionTracker<K>! mSelectionTracker;
  }

  final class MouseInputHandler<K> extends androidx.recyclerview.selection.MotionInputHandler<K> {
    ctor MouseInputHandler(androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.ItemDetailsLookup<K>, androidx.recyclerview.selection.OnContextClickListener, androidx.recyclerview.selection.OnItemActivatedListener<K>, androidx.recyclerview.selection.FocusDelegate<K>);
    method private void onItemClick(android.view.MotionEvent, androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>);
    method private boolean onRightClick(android.view.MotionEvent);
    method private void selectOrFocusItem(androidx.recyclerview.selection.ItemDetailsLookup.ItemDetails<K>, android.view.MotionEvent);
    field private static final String TAG = "MouseInputDelegate";
    field private final androidx.recyclerview.selection.ItemDetailsLookup<K>! mDetailsLookup;
    field private final androidx.recyclerview.selection.FocusDelegate<K>! mFocusDelegate;
    field private boolean mHandledOnDown;
    field private boolean mHandledTapUp;
    field private final androidx.recyclerview.selection.OnContextClickListener! mOnContextClickListener;
    field private final androidx.recyclerview.selection.OnItemActivatedListener<K>! mOnItemActivatedListener;
  }

  public final class OperationMonitor {
    method void checkStarted();
    method void checkStopped();
    method @MainThread void start();
    method @MainThread void stop();
    field private static final String TAG = "OperationMonitor";
    field private java.util.List<androidx.recyclerview.selection.OperationMonitor.OnChangeListener>! mListeners;
    field private int mNumOps;
  }

  final class PointerDragEventInterceptor implements androidx.recyclerview.widget.RecyclerView.OnItemTouchListener {
    ctor PointerDragEventInterceptor(androidx.recyclerview.selection.ItemDetailsLookup!, androidx.recyclerview.selection.OnDragInitiatedListener!, androidx.recyclerview.widget.RecyclerView.OnItemTouchListener?);
    field private androidx.recyclerview.widget.RecyclerView.OnItemTouchListener? mDelegate;
    field private final androidx.recyclerview.selection.OnDragInitiatedListener! mDragListener;
    field private final androidx.recyclerview.selection.ItemDetailsLookup! mEventDetailsLookup;
  }

  final class Range {
    ctor Range(int, androidx.recyclerview.selection.Range.Callbacks);
    method private void establishRange(int, int);
    method void extendRange(int, int);
    method private void log(int, String!);
    method private void reviseAscending(int, int);
    method private void reviseDescending(int, int);
    method private void reviseRange(int, int);
    method private void updateRange(int, int, boolean, int);
    field private static final String TAG = "Range";
    field static final int TYPE_PRIMARY = 0; // 0x0
    field static final int TYPE_PROVISIONAL = 1; // 0x1
    field private final int mBegin;
    field private final androidx.recyclerview.selection.Range.Callbacks! mCallbacks;
    field private int mEnd;
  }

  abstract static class Range.Callbacks {
    ctor Range.Callbacks();
    method abstract void updateForRange(int, int, boolean, int);
  }

  @IntDef({androidx.recyclerview.selection.Range.TYPE_PRIMARY, androidx.recyclerview.selection.Range.TYPE_PROVISIONAL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) static @interface Range.RangeType {
  }

  public class Selection<K> implements java.lang.Iterable<K> {
    ctor Selection();
    ctor Selection(java.util.Set<K>);
    method boolean add(K);
    method void clear();
    method void clearProvisionalSelection();
    method void copyFrom(androidx.recyclerview.selection.Selection<K>);
    method private boolean isEqualTo(androidx.recyclerview.selection.Selection!);
    method void mergeProvisionalSelection();
    method boolean remove(K);
    method java.util.Map<K,java.lang.Boolean>! setProvisionalSelection(java.util.Set<K>);
    field final java.util.Set<K>! mProvisionalSelection;
    field final java.util.Set<K>! mSelection;
  }

  public final class SelectionPredicates {
    ctor private SelectionPredicates();
  }

  public abstract class SelectionTracker<K> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract void anchorRange(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected abstract void clearProvisionalSelection();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract void endRange();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected abstract void extendProvisionalRange(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract void extendRange(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected abstract androidx.recyclerview.widget.RecyclerView.AdapterDataObserver! getAdapterDataObserver();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract boolean isRangeActive();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected abstract void mergeProvisionalSelection();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected abstract void setProvisionalSelection(java.util.Set<K>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract void startRange(int);
  }

  public static final class SelectionTracker.Builder<K> {
    field private final androidx.recyclerview.widget.RecyclerView.Adapter<?>! mAdapter;
    field private int mBandOverlayId;
    field private androidx.recyclerview.selection.BandPredicate! mBandPredicate;
    field private final android.content.Context! mContext;
    field private androidx.recyclerview.selection.ItemDetailsLookup<K>! mDetailsLookup;
    field private androidx.recyclerview.selection.FocusDelegate<K>! mFocusDelegate;
    field private int[]! mGestureToolTypes;
    field private androidx.recyclerview.selection.ItemKeyProvider<K>! mKeyProvider;
    field private androidx.recyclerview.selection.OperationMonitor! mMonitor;
    field private androidx.recyclerview.selection.OnContextClickListener! mOnContextClickListener;
    field private androidx.recyclerview.selection.OnDragInitiatedListener! mOnDragInitiatedListener;
    field private androidx.recyclerview.selection.OnItemActivatedListener<K>! mOnItemActivatedListener;
    field private int[]! mPointerToolTypes;
    field final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
    field private final String! mSelectionId;
    field androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>! mSelectionPredicate;
    field private final androidx.recyclerview.selection.StorageStrategy<K>! mStorage;
  }

  final class Shared {
    ctor private Shared();
    field static final boolean DEBUG = false;
    field static final boolean VERBOSE = false;
  }

  public final class StableIdKeyProvider extends androidx.recyclerview.selection.ItemKeyProvider<java.lang.Long> {
    method void onAttached(android.view.View);
    method void onDetached(android.view.View);
    field private final androidx.collection.LongSparseArray<java.lang.Integer>! mKeyToPosition;
    field private final android.util.SparseArray<java.lang.Long>! mPositionToKey;
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
  }

  public abstract class StorageStrategy<K> {
    method String! getKeyTypeName();
    field @VisibleForTesting static final String SELECTION_ENTRIES = "androidx.recyclerview.selection.entries";
    field @VisibleForTesting static final String SELECTION_KEY_TYPE = "androidx.recyclerview.selection.type";
    field private final Class<K>! mType;
  }

  private static class StorageStrategy.LongStorageStrategy extends androidx.recyclerview.selection.StorageStrategy<java.lang.Long> {
    ctor StorageStrategy.LongStorageStrategy();
  }

  private static class StorageStrategy.ParcelableStorageStrategy<K extends android.os.Parcelable> extends androidx.recyclerview.selection.StorageStrategy<K> {
    ctor StorageStrategy.ParcelableStorageStrategy(Class<K>!);
  }

  private static class StorageStrategy.StringStorageStrategy extends androidx.recyclerview.selection.StorageStrategy<java.lang.String> {
    ctor StorageStrategy.StringStorageStrategy();
  }

  final class ToolHandlerRegistry<T> {
    ctor ToolHandlerRegistry(T);
    method T! get(android.view.MotionEvent);
    method void set(int, T?);
    field private static final int NUM_INPUT_TYPES = 5; // 0x5
    field private final T! mDefault;
    field private final java.util.List<T>! mHandlers;
  }

  final class TouchEventRouter implements androidx.recyclerview.widget.RecyclerView.OnItemTouchListener {
    ctor TouchEventRouter(android.view.GestureDetector, androidx.recyclerview.widget.RecyclerView.OnItemTouchListener);
    ctor TouchEventRouter(android.view.GestureDetector);
    method void register(int, androidx.recyclerview.widget.RecyclerView.OnItemTouchListener);
    field private static final String TAG = "TouchEventRouter";
    field private final androidx.recyclerview.selection.ToolHandlerRegistry<androidx.recyclerview.widget.RecyclerView.OnItemTouchListener>! mDelegates;
    field private final android.view.GestureDetector! mDetector;
  }

  final class TouchInputHandler<K> extends androidx.recyclerview.selection.MotionInputHandler<K> {
    ctor TouchInputHandler(androidx.recyclerview.selection.SelectionTracker<K>, androidx.recyclerview.selection.ItemKeyProvider<K>, androidx.recyclerview.selection.ItemDetailsLookup<K>, androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>, Runnable, androidx.recyclerview.selection.OnDragInitiatedListener, androidx.recyclerview.selection.OnItemActivatedListener<K>, androidx.recyclerview.selection.FocusDelegate<K>, Runnable);
    field private static final boolean DEBUG = false;
    field private static final String TAG = "TouchInputDelegate";
    field private final androidx.recyclerview.selection.ItemDetailsLookup<K>! mDetailsLookup;
    field private final Runnable! mGestureStarter;
    field private final Runnable! mHapticPerformer;
    field private final androidx.recyclerview.selection.OnDragInitiatedListener! mOnDragInitiatedListener;
    field private final androidx.recyclerview.selection.OnItemActivatedListener<K>! mOnItemActivatedListener;
    field private final androidx.recyclerview.selection.SelectionTracker.SelectionPredicate<K>! mSelectionPredicate;
  }

  final class ViewAutoScroller extends androidx.recyclerview.selection.AutoScroller {
    ctor ViewAutoScroller(androidx.recyclerview.selection.ViewAutoScroller.ScrollHost);
    ctor @VisibleForTesting ViewAutoScroller(androidx.recyclerview.selection.ViewAutoScroller.ScrollHost, float);
    method private boolean aboveMotionThreshold(android.graphics.Point);
    method @VisibleForTesting int computeScrollDistance(int);
    method static androidx.recyclerview.selection.ViewAutoScroller.ScrollHost! createScrollHost(androidx.recyclerview.widget.RecyclerView!);
    method public void reset();
    method void runScroll();
    method public void scroll(android.graphics.Point);
    method private float smoothOutOfBoundsRatio(float);
    field private static final float DEFAULT_SCROLL_THRESHOLD_RATIO = 0.125f;
    field private static final int MAX_SCROLL_STEP = 70; // 0x46
    field private static final String TAG = "ViewAutoScroller";
    field private final androidx.recyclerview.selection.ViewAutoScroller.ScrollHost! mHost;
    field private android.graphics.Point? mLastLocation;
    field private android.graphics.Point? mOrigin;
    field private boolean mPassedInitialMotionThreshold;
    field private final Runnable! mRunner;
    field private final float mScrollThresholdRatio;
  }

  private static final class ViewAutoScroller.RuntimeHost extends androidx.recyclerview.selection.ViewAutoScroller.ScrollHost {
    ctor ViewAutoScroller.RuntimeHost(androidx.recyclerview.widget.RecyclerView);
    method int getViewHeight();
    method void removeCallback(Runnable);
    method void runAtNextFrame(Runnable);
    method void scrollBy(int);
    field private final androidx.recyclerview.widget.RecyclerView! mRecyclerView;
  }

  abstract static class ViewAutoScroller.ScrollHost {
    ctor ViewAutoScroller.ScrollHost();
    method abstract int getViewHeight();
    method abstract void removeCallback(Runnable);
    method abstract void runAtNextFrame(Runnable);
    method abstract void scrollBy(int);
  }

}

