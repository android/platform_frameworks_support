{
  "comments": [
    {
      "key": {
        "uuid": "f421140b_fcd3e680",
        "filename": "work/workmanager-coroutines/src/main/java/androidx/work/coroutines/CoroutineWorker.kt",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1344433
      },
      "writtenOn": "2018-11-05T06:15:33Z",
      "side": 1,
      "message": "Should we be exposing the coroutineScope to the Worker that implements it. \n\nThe typical pattern I have seen is:\n\nabstract class CoroutineWorker(\n    context: Context,\n    params: WorkerParameters)\n   : ListenableWorker(context, params), CoroutineScope {\n\n   private val job \u003d Job()\n   private val future: SettableFuture\u003cPayload\u003e \u003d SettableFuture.create()\n\n   override val coroutineContext: CoroutineContext\n        get() \u003d Dispatchers.Main + getCoroutineContext() + job\n\n   open fun getCouroutineContext() \u003d Dispatchers.Default\n\n   final override fun startWork() {\n     // We don\u0027t need to do a coroutineScope.launch { }\n     // launch {} just becomes implicit \u0026 the scope is available to the suspend function, \n     // if they need it for something else.\n    \n     launch {\n         // ....\n     }\n   } \n   \n}\n\nThe difference here is that coroutineScope is available to the suspend function marked abstract.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "7d3c2f01c4700789b3ae4a1b25ffbcd8aa8927c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc251c5_80aa5154",
        "filename": "work/workmanager-coroutines/src/main/java/androidx/work/coroutines/CoroutineWorker.kt",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-11-05T17:22:55Z",
      "side": 1,
      "message": "We don\u0027t need to expose it directly. They can use coroutineScope { } in their doWork() if they want access to the CoroutineScope. Making it available outside of doWork() may mean they start doing something in the constructor, etc.",
      "parentUuid": "f421140b_fcd3e680",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "7d3c2f01c4700789b3ae4a1b25ffbcd8aa8927c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e3ac107_256d0393",
        "filename": "work/workmanager-coroutines/src/main/java/androidx/work/coroutines/CoroutineWorker.kt",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1060206
      },
      "writtenOn": "2018-11-05T17:57:22Z",
      "side": 1,
      "message": "Resolving.",
      "parentUuid": "7bc251c5_80aa5154",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "revId": "7d3c2f01c4700789b3ae4a1b25ffbcd8aa8927c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}