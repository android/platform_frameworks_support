{
  "comments": [
    {
      "key": {
        "uuid": "ce2d3232_46c758f2",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a good idea for the API to expose the app\u0027s whole data directory - that\u0027s likely to lead to security issues for the app in many cases, since this will expose their preference files, databases, etc, not just downloaded/generated assets they may want to use in WebView.\n\nWhat I\u0027d suggest is allowing the app to mount a specified *subdirectory* of their data directory on a path. We might need to let them mount more than one subdirectory, in that case (on different paths). We probably would also want to allow a subdirectory of their cache directory too, and maybe the app\u0027s files dir on external storage? (though probably *not* other directories on the external storage even if the app has the required permission to access them, to avoid accidentally exposing files belonging to *other* apps?)\n\nWe may also want to validate that the subdirectory is not one of the \"standard\" ones Android creates for databases/etc, as those files don\u0027t seem likely to be that useful when exposed to the web (as they\u0027re not typically in easily-handleable formats), and using them to store web assets is probably undesirable.\n\nBasically I think it\u0027s safest to start with a fairly restricted form of this that encourages usages we are confident are sensible and reasonable, and then consider relaxing the restrictions or adding other variants later if developers ask us and explain their use cases.",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f26b520f_79f6b5a4",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "I modified the method to mount only one subdirectory. I think allowing to mount only one subdirectory of app internal storage is better than allowing multiple subdirectories to avoid obscure usage like a mounting a subdirectory of the already mounted subdirectory and I think it\u0027s clearer to restrict it to only one directory that is exposed.\n\nI think cache and external storage should have other set methods (in other CLs).\n\nI\u0027m not fully aware of all android\u0027s standard subdirectories, but I tend to trust developers to be aware of what they are actually exposing.",
      "parentUuid": "ce2d3232_46c758f2",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "176cbd46_48eaa6b5",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-30T18:34:26Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s anything particularly wrong with mounting a subdirectory of an already mounted subdirectory or similar; this happens all the time in webserver configs. I realise the existing builder methods make it feel logical to just have a set* method for this too, but it doesn\u0027t seem like there\u0027s really a problem with just having a hostInternalStorageDir() or something that can be called repeatedly. If we only allow them to mount subdirectories then only letting them mount one feels like a pretty big restriction.\n\nI also don\u0027t think we should trust developers to be aware of what they are actually exposing.. much of the point of this library is to encourage best practises (since it doesn\u0027t contain anything they couldn\u0027t have done themselves if they wanted to). It seems like we should either:\n\n- have an API that lets them mount an arbitrary directory in the filesystem, without caring where that directory is, which would give them the most flexibility and enable them to mount things we haven\u0027t thought of or don\u0027t think are ideal (e.g. non-app-owned directories on external storage, or cases that don\u0027t show up on Google devices like /sdcard2 for devices that have multiple \"external\" storages)\n\n- or, have an API that only allows them to mount things that we\u0027re fairly confident are safe (non-blacklisted subdirs of their internal storage dir, etc) to encourage best practises, and expand this over time as developers request other functionality.\n\nI was suggesting the latter, but I don\u0027t think the former is out of the question. I also don\u0027t think that either of these really benefit from having specific methods to handle internal vs external storage and so on: I suspect that in practise the thing the developer has when they want to use this is just a path, and having to then go back and think about \"well, is this path on external storage or not\" makes the API harder to use.\n\nSo, what I\u0027m suggesting (I think) is that *either way* the API should just take the path directly from the developer, and then if we want to go with the latter option, we can check the path \"makes sense\" as something to expose. We can evolve the *rules* for that over time (e.g. add more places that we think are ok) without having to change the API at all, which is easier for developers..",
      "parentUuid": "f26b520f_79f6b5a4",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e89ed18_f0aea85f",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 383,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "spelling",
      "range": {
        "startLine": 383,
        "startChar": 24,
        "endLine": 383,
        "endChar": 45
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e751bb00_0a541ac7",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 383,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e89ed18_f0aea85f",
      "range": {
        "startLine": 383,
        "startChar": 24,
        "endLine": 383,
        "endChar": 45
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3670d0_f0f4960a",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 404,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "spelling again",
      "range": {
        "startLine": 404,
        "startChar": 24,
        "endLine": 404,
        "endChar": 45
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7330790_f98e18f2",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 404,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df3670d0_f0f4960a",
      "range": {
        "startLine": 404,
        "startChar": 24,
        "endLine": 404,
        "endChar": 45
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b658816_febf2bcf",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 634,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "is",
      "range": {
        "startLine": 634,
        "startChar": 68,
        "endLine": 634,
        "endChar": 71
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8cd2eaa_33818fe3",
        "filename": "webkit/src/main/java/androidx/webkit/WebViewAssetLoader.java",
        "patchSetId": 6
      },
      "lineNbr": 634,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b658816_febf2bcf",
      "range": {
        "startLine": 634,
        "startChar": 68,
        "endLine": 634,
        "endChar": 71
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0ee3d39_bc14d84f",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "Somewhere in this code we need to protect against directory traversal, though ideally without totally forbidding \"..\" from appearing in paths since webservers often do support that?\n\ne.g. it should be valid to do https://foo.com/mountprefix/foo/../bar\nbut not valid to do https://foo.com/mountprefix/../bar\n\nProbably the best way to do this is to construct a File from the path, and then canonicalise it with getCanonicalPath or similar, and verify that the canonical path is within the top-level directory we were mounting. This deals with basically all cases of ., .., symlinks, etc all at once.",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b719845_5619e3f6",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T14:18:17Z",
      "side": 1,
      "message": "Done.\n\nImplemented using the suggested File#getCanonicalPath(), thanks for the suggestion.\n\nAdded a unit test for these cases as well.",
      "parentUuid": "f0ee3d39_bc14d84f",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba286547_a4f9dc34",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "Rather than adding this parameter which is only used by the test, I\u0027d suggest simplifying this function to only handle the things that the production code needs and having the recursive-mkdir behaviour in an actual test function.",
      "range": {
        "startLine": 165,
        "startChar": 20,
        "endLine": 165,
        "endChar": 36
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c37036f4_92c14e42",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba286547_a4f9dc34",
      "range": {
        "startLine": 165,
        "startChar": 20,
        "endLine": 165,
        "endChar": 36
      },
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df338668_1f0002f7",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1021004
      },
      "writtenOn": "2019-05-24T19:45:42Z",
      "side": 1,
      "message": "You can just join the segments as strings with File.pathSeparator all at once, which won\u0027t create as many temporary objects and will be simpler/shorter. If you also remove the mkdir behaviour here, then this code could probably just be inlined directly into openFile.",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2f0c397_8c76a82a",
        "filename": "webkit/src/main/java/androidx/webkit/internal/AssetHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1402701
      },
      "writtenOn": "2019-05-30T12:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df338668_1f0002f7",
      "revId": "b724a2acf13914a5493ac986f8ce59a4c4338105",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}