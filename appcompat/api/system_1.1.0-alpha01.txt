// Signature format: 2.0
package androidx.appcompat.app {

  public abstract class ActionBar {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean closeOptionsMenu();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean collapseActionView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void dispatchMenuVisibilityChanged(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean invalidateOptionsMenu();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isTitleTruncated();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onConfigurationChanged(android.content.res.Configuration!);
    method void onDestroy();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean onKeyShortcut(int, android.view.KeyEvent!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean onMenuKeyEvent(android.view.KeyEvent!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean openOptionsMenu();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) boolean requestFocus();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setDefaultDisplayHomeAsUpEnabled(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setShowHideAnimationEnabled(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setWindowTitle(CharSequence!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.view.ActionMode! startActionMode(androidx.appcompat.view.ActionMode.Callback!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(flag=true, value={androidx.appcompat.app.ActionBar.DISPLAY_USE_LOGO, androidx.appcompat.app.ActionBar.DISPLAY_SHOW_HOME, androidx.appcompat.app.ActionBar.DISPLAY_HOME_AS_UP, androidx.appcompat.app.ActionBar.DISPLAY_SHOW_TITLE, androidx.appcompat.app.ActionBar.DISPLAY_SHOW_CUSTOM}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface ActionBar.DisplayOptions {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.appcompat.app.ActionBar.NAVIGATION_MODE_STANDARD, androidx.appcompat.app.ActionBar.NAVIGATION_MODE_LIST, androidx.appcompat.app.ActionBar.NAVIGATION_MODE_TABS}) public static @interface ActionBar.NavigationMode {
  }

  public class ActionBarDrawerToggle implements androidx.drawerlayout.widget.DrawerLayout.DrawerListener {
    ctor ActionBarDrawerToggle(android.app.Activity!, androidx.appcompat.widget.Toolbar!, androidx.drawerlayout.widget.DrawerLayout!, androidx.appcompat.graphics.drawable.DrawerArrowDrawable!, @StringRes int, @StringRes int);
    method android.graphics.drawable.Drawable! getThemeUpIndicator();
    method void setActionBarDescription(int);
    method void setActionBarUpIndicator(android.graphics.drawable.Drawable!, int);
    method private void setPosition(float);
    method void toggle();
    field private final androidx.appcompat.app.ActionBarDrawerToggle.Delegate! mActivityImpl;
    field private final int mCloseDrawerContentDescRes;
    field boolean mDrawerIndicatorEnabled;
    field private final androidx.drawerlayout.widget.DrawerLayout! mDrawerLayout;
    field private boolean mDrawerSlideAnimationEnabled;
    field private boolean mHasCustomUpIndicator;
    field private android.graphics.drawable.Drawable! mHomeAsUpIndicator;
    field private final int mOpenDrawerContentDescRes;
    field private androidx.appcompat.graphics.drawable.DrawerArrowDrawable! mSlider;
    field android.view.View.OnClickListener! mToolbarNavigationClickListener;
    field private boolean mWarnedForDisplayHomeAsUp;
  }

  private static class ActionBarDrawerToggle.FrameworkActionBarDelegate implements androidx.appcompat.app.ActionBarDrawerToggle.Delegate {
    ctor ActionBarDrawerToggle.FrameworkActionBarDelegate(android.app.Activity!);
    field private final android.app.Activity! mActivity;
    field private androidx.appcompat.app.ActionBarDrawerToggleHoneycomb.SetIndicatorInfo! mSetIndicatorInfo;
  }

  static class ActionBarDrawerToggle.ToolbarCompatDelegate implements androidx.appcompat.app.ActionBarDrawerToggle.Delegate {
    ctor ActionBarDrawerToggle.ToolbarCompatDelegate(androidx.appcompat.widget.Toolbar!);
    field final CharSequence! mDefaultContentDescription;
    field final android.graphics.drawable.Drawable! mDefaultUpIndicator;
    field final androidx.appcompat.widget.Toolbar! mToolbar;
  }

  class ActionBarDrawerToggleHoneycomb {
    ctor private ActionBarDrawerToggleHoneycomb();
    method public static android.graphics.drawable.Drawable! getThemeUpIndicator(android.app.Activity!);
    method public static androidx.appcompat.app.ActionBarDrawerToggleHoneycomb.SetIndicatorInfo! setActionBarDescription(androidx.appcompat.app.ActionBarDrawerToggleHoneycomb.SetIndicatorInfo!, android.app.Activity!, int);
    method public static androidx.appcompat.app.ActionBarDrawerToggleHoneycomb.SetIndicatorInfo! setActionBarUpIndicator(android.app.Activity!, android.graphics.drawable.Drawable!, int);
    field private static final String TAG = "ActionBarDrawerToggleHC";
    field private static final int[]! THEME_ATTRS;
  }

  static class ActionBarDrawerToggleHoneycomb.SetIndicatorInfo {
    ctor ActionBarDrawerToggleHoneycomb.SetIndicatorInfo(android.app.Activity!);
    field public java.lang.reflect.Method! setHomeActionContentDescription;
    field public java.lang.reflect.Method! setHomeAsUpIndicator;
    field public android.widget.ImageView! upIndicatorView;
  }

  class AlertController {
    ctor public AlertController(android.content.Context!, androidx.appcompat.app.AppCompatDialog!, android.view.Window!);
    method static boolean canTextInput(android.view.View!);
    method private void centerButton(android.widget.Button!);
    method public android.widget.Button! getButton(int);
    method public int getIconAttributeResId(int);
    method public android.widget.ListView! getListView();
    method public void installContent();
    method static void manageScrollIndicators(android.view.View!, android.view.View!, android.view.View!);
    method public boolean onKeyDown(int, android.view.KeyEvent!);
    method public boolean onKeyUp(int, android.view.KeyEvent!);
    method private android.view.ViewGroup? resolvePanel(android.view.View?, android.view.View?);
    method private int selectContentView();
    method public void setButton(int, CharSequence!, android.content.DialogInterface.OnClickListener!, android.os.Message!, android.graphics.drawable.Drawable!);
    method public void setButtonPanelLayoutHint(int);
    method public void setCustomTitle(android.view.View!);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setMessage(CharSequence!);
    method private void setScrollIndicators(android.view.ViewGroup!, android.view.View!, int, int);
    method public void setTitle(CharSequence!);
    method public void setView(int);
    method public void setView(android.view.View!);
    method public void setView(android.view.View!, int, int, int, int);
    method private void setupButtons(android.view.ViewGroup!);
    method private void setupContent(android.view.ViewGroup!);
    method private void setupCustomContent(android.view.ViewGroup!);
    method private void setupTitle(android.view.ViewGroup!);
    method private void setupView();
    method private static boolean shouldCenterSingleButton(android.content.Context!);
    field android.widget.ListAdapter! mAdapter;
    field private int mAlertDialogLayout;
    field private final android.view.View.OnClickListener! mButtonHandler;
    field private final int mButtonIconDimen;
    field android.widget.Button! mButtonNegative;
    field private android.graphics.drawable.Drawable! mButtonNegativeIcon;
    field android.os.Message! mButtonNegativeMessage;
    field private CharSequence! mButtonNegativeText;
    field android.widget.Button! mButtonNeutral;
    field private android.graphics.drawable.Drawable! mButtonNeutralIcon;
    field android.os.Message! mButtonNeutralMessage;
    field private CharSequence! mButtonNeutralText;
    field private int mButtonPanelLayoutHint;
    field private int mButtonPanelSideLayout;
    field android.widget.Button! mButtonPositive;
    field private android.graphics.drawable.Drawable! mButtonPositiveIcon;
    field android.os.Message! mButtonPositiveMessage;
    field private CharSequence! mButtonPositiveText;
    field int mCheckedItem;
    field private final android.content.Context! mContext;
    field private android.view.View! mCustomTitleView;
    field final androidx.appcompat.app.AppCompatDialog! mDialog;
    field android.os.Handler! mHandler;
    field private android.graphics.drawable.Drawable! mIcon;
    field private int mIconId;
    field private android.widget.ImageView! mIconView;
    field int mListItemLayout;
    field int mListLayout;
    field android.widget.ListView! mListView;
    field private CharSequence! mMessage;
    field private android.widget.TextView! mMessageView;
    field int mMultiChoiceItemLayout;
    field androidx.core.widget.NestedScrollView! mScrollView;
    field private boolean mShowTitle;
    field int mSingleChoiceItemLayout;
    field private CharSequence! mTitle;
    field private android.widget.TextView! mTitleView;
    field private android.view.View! mView;
    field private int mViewLayoutResId;
    field private int mViewSpacingBottom;
    field private int mViewSpacingLeft;
    field private int mViewSpacingRight;
    field private boolean mViewSpacingSpecified;
    field private int mViewSpacingTop;
    field private final android.view.Window! mWindow;
  }

  public static class AlertController.AlertParams {
    ctor public AlertController.AlertParams(android.content.Context!);
    method public void apply(androidx.appcompat.app.AlertController!);
    method private void createListView(androidx.appcompat.app.AlertController!);
    field public android.widget.ListAdapter! mAdapter;
    field public boolean mCancelable;
    field public int mCheckedItem;
    field public boolean[]! mCheckedItems;
    field public final android.content.Context! mContext;
    field public android.database.Cursor! mCursor;
    field public android.view.View! mCustomTitleView;
    field public boolean mForceInverseBackground;
    field public android.graphics.drawable.Drawable! mIcon;
    field public int mIconAttrId;
    field public int mIconId;
    field public final android.view.LayoutInflater! mInflater;
    field public String! mIsCheckedColumn;
    field public boolean mIsMultiChoice;
    field public boolean mIsSingleChoice;
    field public CharSequence[]! mItems;
    field public String! mLabelColumn;
    field public CharSequence! mMessage;
    field public android.graphics.drawable.Drawable! mNegativeButtonIcon;
    field public android.content.DialogInterface.OnClickListener! mNegativeButtonListener;
    field public CharSequence! mNegativeButtonText;
    field public android.graphics.drawable.Drawable! mNeutralButtonIcon;
    field public android.content.DialogInterface.OnClickListener! mNeutralButtonListener;
    field public CharSequence! mNeutralButtonText;
    field public android.content.DialogInterface.OnCancelListener! mOnCancelListener;
    field public android.content.DialogInterface.OnMultiChoiceClickListener! mOnCheckboxClickListener;
    field public android.content.DialogInterface.OnClickListener! mOnClickListener;
    field public android.content.DialogInterface.OnDismissListener! mOnDismissListener;
    field public android.widget.AdapterView.OnItemSelectedListener! mOnItemSelectedListener;
    field public android.content.DialogInterface.OnKeyListener! mOnKeyListener;
    field public androidx.appcompat.app.AlertController.AlertParams.OnPrepareListViewListener! mOnPrepareListViewListener;
    field public android.graphics.drawable.Drawable! mPositiveButtonIcon;
    field public android.content.DialogInterface.OnClickListener! mPositiveButtonListener;
    field public CharSequence! mPositiveButtonText;
    field public boolean mRecycleOnMeasure;
    field public CharSequence! mTitle;
    field public android.view.View! mView;
    field public int mViewLayoutResId;
    field public int mViewSpacingBottom;
    field public int mViewSpacingLeft;
    field public int mViewSpacingRight;
    field public boolean mViewSpacingSpecified;
    field public int mViewSpacingTop;
  }

  public static interface AlertController.AlertParams.OnPrepareListViewListener {
    method public void onPrepareListView(android.widget.ListView!);
  }

  private static final class AlertController.ButtonHandler extends android.os.Handler {
    ctor public AlertController.ButtonHandler(android.content.DialogInterface!);
    field private static final int MSG_DISMISS_DIALOG = 1; // 0x1
    field private java.lang.ref.WeakReference<android.content.DialogInterface>! mDialog;
  }

  private static class AlertController.CheckedItemAdapter extends android.widget.ArrayAdapter<java.lang.CharSequence> {
    ctor public AlertController.CheckedItemAdapter(android.content.Context!, int, int, CharSequence[]!);
  }

  public static class AlertController.RecycleListView extends android.widget.ListView {
    ctor public AlertController.RecycleListView(android.content.Context!);
    ctor public AlertController.RecycleListView(android.content.Context!, android.util.AttributeSet!);
    method public void setHasDecor(boolean, boolean);
    field private final int mPaddingBottomNoButtons;
    field private final int mPaddingTopNoTitle;
  }

  public class AlertDialog extends androidx.appcompat.app.AppCompatDialog implements android.content.DialogInterface {
    method static int resolveDialogTheme(android.content.Context, @StyleRes int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setButtonPanelLayoutHint(int);
    field static final int LAYOUT_HINT_NONE = 0; // 0x0
    field static final int LAYOUT_HINT_SIDE = 1; // 0x1
    field final androidx.appcompat.app.AlertController! mAlert;
  }

  public static class AlertDialog.Builder {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.app.AlertDialog.Builder! setRecycleOnMeasureEnabled(boolean);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.app.AlertDialog.Builder! setView(android.view.View!, int, int, int, int);
    field private final androidx.appcompat.app.AlertController.AlertParams! P;
    field private final int mTheme;
  }

  public class AppCompatActivity extends androidx.fragment.app.FragmentActivity implements androidx.appcompat.app.ActionBarDrawerToggle.DelegateProvider androidx.appcompat.app.AppCompatCallback androidx.core.app.TaskStackBuilder.SupportParentable {
    method private boolean performMenuItemShortcut(int, android.view.KeyEvent!);
    field private androidx.appcompat.app.AppCompatDelegate! mDelegate;
    field private android.content.res.Resources! mResources;
    field private int mThemeId;
  }

  public abstract class AppCompatDelegate {
    ctor AppCompatDelegate();
    field static final int MODE_NIGHT_UNSPECIFIED = -100; // 0xffffff9c
    field static final String TAG = "AppCompatDelegate";
    field private static int sDefaultNightMode;
  }

  @IntDef({androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_NO, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_YES, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) static @interface AppCompatDelegate.ApplyableNightMode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_NO, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_YES, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_AUTO, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM, androidx.appcompat.app.AppCompatDelegate.MODE_NIGHT_UNSPECIFIED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface AppCompatDelegate.NightMode {
  }

  class AppCompatDelegateImpl extends androidx.appcompat.app.AppCompatDelegate implements android.view.LayoutInflater.Factory2 androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor AppCompatDelegateImpl(android.content.Context!, android.view.Window!, androidx.appcompat.app.AppCompatCallback!);
    method private void applyFixedSizeWindow();
    method void callOnPanelClosed(int, androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!, android.view.Menu!);
    method void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method void closePanel(int);
    method void closePanel(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!, boolean);
    method private android.view.ViewGroup! createSubDecor();
    method void dismissPopups();
    method boolean dispatchKeyEvent(android.view.KeyEvent!);
    method void doInvalidatePanelMenu(int);
    method void endOnGoingFadeAnimation();
    method private void ensureAutoNightModeManager();
    method private void ensureSubDecor();
    method androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState! findMenuPanel(android.view.Menu!);
    method final android.content.Context! getActionBarThemedContext();
    method @VisibleForTesting final androidx.appcompat.app.AppCompatDelegateImpl.AutoNightModeManager! getAutoNightModeManager();
    method private int getNightMode();
    method protected androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState! getPanelState(int, boolean);
    method android.view.ViewGroup! getSubDecor();
    method final CharSequence! getTitle();
    method final android.view.Window.Callback! getWindowCallback();
    method private void initWindowDecorActionBar();
    method private boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!);
    method private boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!);
    method private boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!);
    method private void invalidatePanelMenu(int);
    method int mapNightMode(int);
    method boolean onBackPressed();
    method boolean onKeyDown(int, android.view.KeyEvent!);
    method private boolean onKeyDownPanel(int, android.view.KeyEvent!);
    method boolean onKeyShortcut(int, android.view.KeyEvent!);
    method boolean onKeyUp(int, android.view.KeyEvent!);
    method private boolean onKeyUpPanel(int, android.view.KeyEvent!);
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
    method void onMenuOpened(int);
    method void onPanelClosed(int);
    method void onSubDecorInstalled(android.view.ViewGroup!);
    method private void openPanel(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!, android.view.KeyEvent!);
    method final androidx.appcompat.app.ActionBar! peekSupportActionBar();
    method private boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!, int, android.view.KeyEvent!, int);
    method private boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState!, android.view.KeyEvent!);
    method private void reopenMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method private int sanitizeWindowFeatureId(int);
    method final boolean shouldAnimateActionModeView();
    method private boolean shouldInheritContext(android.view.ViewParent!);
    method private boolean shouldRecreateOnNightModeChange();
    method androidx.appcompat.view.ActionMode! startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode.Callback);
    method private void throwFeatureRequestIfSubDecorInstalled();
    method private boolean updateForNightMode(int);
    method int updateStatusGuard(int);
    field private static final boolean DEBUG = false;
    field static final String EXCEPTION_HANDLER_MESSAGE_SUFFIX = ". If the resource you are trying to use is a vector resource, you may be referencing it in an unsupported way. See AppCompatDelegate.setCompatVectorFromResourcesEnabled() for more info.";
    field private static final boolean IS_PRE_LOLLIPOP;
    field private static final String KEY_LOCAL_NIGHT_MODE = "appcompat:local_night_mode";
    field androidx.appcompat.app.ActionBar! mActionBar;
    field private androidx.appcompat.app.AppCompatDelegateImpl.ActionMenuPresenterCallback! mActionMenuPresenterCallback;
    field androidx.appcompat.view.ActionMode! mActionMode;
    field android.widget.PopupWindow! mActionModePopup;
    field androidx.appcompat.widget.ActionBarContextView! mActionModeView;
    field final androidx.appcompat.app.AppCompatCallback! mAppCompatCallback;
    field private androidx.appcompat.app.AppCompatViewInflater! mAppCompatViewInflater;
    field final android.view.Window.Callback! mAppCompatWindowCallback;
    field private boolean mApplyDayNightCalled;
    field private androidx.appcompat.app.AppCompatDelegateImpl.AutoNightModeManager! mAutoNightModeManager;
    field private boolean mClosingActionMenu;
    field final android.content.Context! mContext;
    field private androidx.appcompat.widget.DecorContentParent! mDecorContentParent;
    field private boolean mEnableDefaultActionBarUp;
    field androidx.core.view.ViewPropertyAnimatorCompat! mFadeAnim;
    field private boolean mFeatureIndeterminateProgress;
    field private boolean mFeatureProgress;
    field private boolean mHandleNativeActionModes;
    field boolean mHasActionBar;
    field int mInvalidatePanelMenuFeatures;
    field boolean mInvalidatePanelMenuPosted;
    field private final Runnable! mInvalidatePanelMenuRunnable;
    field boolean mIsDestroyed;
    field boolean mIsFloating;
    field private int mLocalNightMode;
    field private boolean mLongPressBackDown;
    field android.view.MenuInflater! mMenuInflater;
    field final android.view.Window.Callback! mOriginalWindowCallback;
    field boolean mOverlayActionBar;
    field boolean mOverlayActionMode;
    field private androidx.appcompat.app.AppCompatDelegateImpl.PanelMenuPresenterCallback! mPanelMenuPresenterCallback;
    field private androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState[]! mPanels;
    field private androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState! mPreparedPanel;
    field Runnable! mShowActionModePopup;
    field private android.view.View! mStatusGuard;
    field private android.view.ViewGroup! mSubDecor;
    field private boolean mSubDecorInstalled;
    field private android.graphics.Rect! mTempRect1;
    field private android.graphics.Rect! mTempRect2;
    field private CharSequence! mTitle;
    field private android.widget.TextView! mTitleView;
    field final android.view.Window! mWindow;
    field boolean mWindowNoTitle;
    field private static boolean sInstalledExceptionHandler;
    field private static final int[]! sWindowBackgroundStyleable;
  }

  private class AppCompatDelegateImpl.ActionBarDrawableToggleImpl implements androidx.appcompat.app.ActionBarDrawerToggle.Delegate {
    ctor AppCompatDelegateImpl.ActionBarDrawableToggleImpl();
  }

  private final class AppCompatDelegateImpl.ActionMenuPresenterCallback implements androidx.appcompat.view.menu.MenuPresenter.Callback {
    ctor AppCompatDelegateImpl.ActionMenuPresenterCallback();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  class AppCompatDelegateImpl.ActionModeCallbackWrapperV9 implements androidx.appcompat.view.ActionMode.Callback {
    ctor public AppCompatDelegateImpl.ActionModeCallbackWrapperV9(androidx.appcompat.view.ActionMode.Callback!);
    field private androidx.appcompat.view.ActionMode.Callback! mWrapped;
  }

  class AppCompatDelegateImpl.AppCompatWindowCallback extends androidx.appcompat.view.WindowCallbackWrapper {
    ctor AppCompatDelegateImpl.AppCompatWindowCallback(android.view.Window.Callback!);
    method final android.view.ActionMode! startAsSupportActionMode(android.view.ActionMode.Callback!);
  }

  @VisibleForTesting final class AppCompatDelegateImpl.AutoNightModeManager {
    ctor AppCompatDelegateImpl.AutoNightModeManager(androidx.appcompat.app.TwilightManager);
    method void cleanup();
    method void dispatchTimeChanged();
    method int getApplyableNightMode();
    method void setup();
    field private android.content.BroadcastReceiver! mAutoTimeChangeReceiver;
    field private android.content.IntentFilter! mAutoTimeChangeReceiverFilter;
    field private boolean mIsNight;
    field private androidx.appcompat.app.TwilightManager! mTwilightManager;
  }

  private class AppCompatDelegateImpl.ListMenuDecorView extends androidx.appcompat.widget.ContentFrameLayout {
    ctor public AppCompatDelegateImpl.ListMenuDecorView(android.content.Context!);
    method private boolean isOutOfBounds(int, int);
  }

  protected static final class AppCompatDelegateImpl.PanelFeatureState {
    ctor AppCompatDelegateImpl.PanelFeatureState(int);
    method void applyFrozenState();
    method public void clearMenuPresenters();
    method androidx.appcompat.view.menu.MenuView! getListMenuView(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public boolean hasPanelItems();
    method void onRestoreInstanceState(android.os.Parcelable!);
    method android.os.Parcelable! onSaveInstanceState();
    method void setMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method void setStyle(android.content.Context!);
    field int background;
    field android.view.View! createdPanelView;
    field android.view.ViewGroup! decorView;
    field int featureId;
    field android.os.Bundle! frozenActionViewState;
    field android.os.Bundle! frozenMenuState;
    field int gravity;
    field boolean isHandled;
    field boolean isOpen;
    field boolean isPrepared;
    field androidx.appcompat.view.menu.ListMenuPresenter! listMenuPresenter;
    field android.content.Context! listPresenterContext;
    field androidx.appcompat.view.menu.MenuBuilder! menu;
    field public boolean qwertyMode;
    field boolean refreshDecorView;
    field boolean refreshMenuContent;
    field android.view.View! shownPanelView;
    field boolean wasLastOpen;
    field int windowAnimations;
    field int x;
    field int y;
  }

  private static class AppCompatDelegateImpl.PanelFeatureState.SavedState implements android.os.Parcelable {
    ctor AppCompatDelegateImpl.PanelFeatureState.SavedState();
    method static androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState.SavedState! readFromParcel(android.os.Parcel!, ClassLoader!);
    field public static final android.os.Parcelable.Creator<androidx.appcompat.app.AppCompatDelegateImpl.PanelFeatureState.SavedState>! CREATOR;
    field int featureId;
    field boolean isOpen;
    field android.os.Bundle! menuState;
  }

  private final class AppCompatDelegateImpl.PanelMenuPresenterCallback implements androidx.appcompat.view.menu.MenuPresenter.Callback {
    ctor AppCompatDelegateImpl.PanelMenuPresenterCallback();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  public class AppCompatDialog extends android.app.Dialog implements androidx.appcompat.app.AppCompatCallback {
    method private static int getThemeResId(android.content.Context!, int);
    method boolean superDispatchKeyEvent(android.view.KeyEvent!);
    field private androidx.appcompat.app.AppCompatDelegate! mDelegate;
    field private final androidx.core.view.KeyEventDispatcher.Component! mKeyDispatcher;
  }

  public class AppCompatViewInflater {
    method private void checkOnClickListener(android.view.View!, android.util.AttributeSet!);
    method final android.view.View! createView(android.view.View!, String!, android.content.Context, android.util.AttributeSet, boolean, boolean, boolean, boolean);
    method private android.view.View! createViewByPrefix(android.content.Context!, String!, String!) throws java.lang.ClassNotFoundException, android.view.InflateException;
    method private android.view.View! createViewFromTag(android.content.Context!, String!, android.util.AttributeSet!);
    method private static android.content.Context! themifyContext(android.content.Context!, android.util.AttributeSet!, boolean, boolean);
    method private void verifyNotNull(android.view.View!, String!);
    field private static final String LOG_TAG = "AppCompatViewInflater";
    field private final Object[]! mConstructorArgs;
    field private static final String[]! sClassPrefixList;
    field private static final java.util.Map<java.lang.String,java.lang.reflect.Constructor<? extends android.view.View>>! sConstructorMap;
    field private static final Class<?>[]! sConstructorSignature;
    field private static final int[]! sOnClickAttrs;
  }

  private static class AppCompatViewInflater.DeclaredOnClickListener implements android.view.View.OnClickListener {
    ctor public AppCompatViewInflater.DeclaredOnClickListener(android.view.View, String);
    method private void resolveMethod(android.content.Context?, String);
    field private final android.view.View! mHostView;
    field private final String! mMethodName;
    field private android.content.Context! mResolvedContext;
    field private java.lang.reflect.Method! mResolvedMethod;
  }

  class NavItemSelectedListener implements android.widget.AdapterView.OnItemSelectedListener {
    ctor public NavItemSelectedListener(androidx.appcompat.app.ActionBar.OnNavigationListener!);
    field private final androidx.appcompat.app.ActionBar.OnNavigationListener! mListener;
  }

  class ResourcesFlusher {
    ctor private ResourcesFlusher();
    method static void flush(android.content.res.Resources);
    method @RequiresApi(21) private static void flushLollipops(android.content.res.Resources);
    method @RequiresApi(23) private static void flushMarshmallows(android.content.res.Resources);
    method @RequiresApi(24) private static void flushNougats(android.content.res.Resources);
    method @RequiresApi(16) private static void flushThemedResourcesCache(Object);
    field private static final String TAG = "ResourcesFlusher";
    field private static java.lang.reflect.Field! sDrawableCacheField;
    field private static boolean sDrawableCacheFieldFetched;
    field private static java.lang.reflect.Field! sResourcesImplField;
    field private static boolean sResourcesImplFieldFetched;
    field private static Class! sThemedResourceCacheClazz;
    field private static boolean sThemedResourceCacheClazzFetched;
    field private static java.lang.reflect.Field! sThemedResourceCache_mUnthemedEntriesField;
    field private static boolean sThemedResourceCache_mUnthemedEntriesFieldFetched;
  }

  class ToolbarActionBar extends androidx.appcompat.app.ActionBar {
    ctor ToolbarActionBar(androidx.appcompat.widget.Toolbar!, CharSequence!, android.view.Window.Callback!);
    method public boolean closeOptionsMenu();
    method public boolean collapseActionView();
    method public void dispatchMenuVisibilityChanged(boolean);
    method private android.view.Menu! getMenu();
    method public android.view.Window.Callback! getWrappedWindowCallback();
    method public boolean invalidateOptionsMenu();
    method public boolean isTitleTruncated();
    method public void onConfigurationChanged(android.content.res.Configuration!);
    method void onDestroy();
    method public boolean onKeyShortcut(int, android.view.KeyEvent!);
    method public boolean onMenuKeyEvent(android.view.KeyEvent!);
    method public boolean openOptionsMenu();
    method void populateOptionsMenu();
    method public boolean requestFocus();
    method public void setDefaultDisplayHomeAsUpEnabled(boolean);
    method public void setShowHideAnimationEnabled(boolean);
    method public void setWindowTitle(CharSequence!);
    field androidx.appcompat.widget.DecorToolbar! mDecorToolbar;
    field private boolean mLastMenuVisibility;
    field private boolean mMenuCallbackSet;
    field private final androidx.appcompat.widget.Toolbar.OnMenuItemClickListener! mMenuClicker;
    field private final Runnable! mMenuInvalidator;
    field private java.util.ArrayList<androidx.appcompat.app.ActionBar.OnMenuVisibilityListener>! mMenuVisibilityListeners;
    field boolean mToolbarMenuPrepared;
    field android.view.Window.Callback! mWindowCallback;
  }

  private final class ToolbarActionBar.ActionMenuPresenterCallback implements androidx.appcompat.view.menu.MenuPresenter.Callback {
    ctor ToolbarActionBar.ActionMenuPresenterCallback();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
    field private boolean mClosingActionMenu;
  }

  private final class ToolbarActionBar.MenuBuilderCallback implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor ToolbarActionBar.MenuBuilderCallback();
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
  }

  private class ToolbarActionBar.ToolbarCallbackWrapper extends androidx.appcompat.view.WindowCallbackWrapper {
    ctor public ToolbarActionBar.ToolbarCallbackWrapper(android.view.Window.Callback!);
  }

  class TwilightCalculator {
    ctor TwilightCalculator();
    method public void calculateTwilight(long, double, double);
    method static androidx.appcompat.app.TwilightCalculator! getInstance();
    field private static final float ALTIDUTE_CORRECTION_CIVIL_TWILIGHT = -0.10471976f;
    field private static final float C1 = 0.0334196f;
    field private static final float C2 = 3.49066E-4f;
    field private static final float C3 = 5.236E-6f;
    field public static final int DAY = 0; // 0x0
    field private static final float DEGREES_TO_RADIANS = 0.017453292f;
    field private static final float J0 = 9.0E-4f;
    field public static final int NIGHT = 1; // 0x1
    field private static final float OBLIQUITY = 0.4092797f;
    field private static final long UTC_2000 = 946728000000L; // 0xdc6d62da00L
    field private static androidx.appcompat.app.TwilightCalculator! sInstance;
    field public int state;
    field public long sunrise;
    field public long sunset;
  }

  class TwilightManager {
    ctor @VisibleForTesting TwilightManager(android.content.Context, android.location.LocationManager);
    method static androidx.appcompat.app.TwilightManager! getInstance(android.content.Context);
    method private android.location.Location! getLastKnownLocation();
    method @RequiresPermission(anyOf={android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_FINE_LOCATION}) private android.location.Location! getLastKnownLocationForProvider(String!);
    method boolean isNight();
    method private boolean isStateValid();
    method @VisibleForTesting static void setInstance(androidx.appcompat.app.TwilightManager!);
    method private void updateState(android.location.Location);
    field private static final int SUNRISE = 6; // 0x6
    field private static final int SUNSET = 22; // 0x16
    field private static final String TAG = "TwilightManager";
    field private final android.content.Context! mContext;
    field private final android.location.LocationManager! mLocationManager;
    field private final androidx.appcompat.app.TwilightManager.TwilightState! mTwilightState;
    field private static androidx.appcompat.app.TwilightManager! sInstance;
  }

  private static class TwilightManager.TwilightState {
    ctor TwilightManager.TwilightState();
    field boolean isNight;
    field long nextUpdate;
    field long todaySunrise;
    field long todaySunset;
    field long tomorrowSunrise;
    field long yesterdaySunset;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WindowDecorActionBar extends androidx.appcompat.app.ActionBar implements androidx.appcompat.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback {
    ctor public WindowDecorActionBar(android.app.Activity!, boolean);
    ctor public WindowDecorActionBar(android.app.Dialog!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public WindowDecorActionBar(android.view.View!);
    method public void animateToMode(boolean);
    method static boolean checkShowingFlags(boolean, boolean, boolean);
    method private void cleanupTabs();
    method public boolean collapseActionView();
    method void completeDeferredDestroyActionMode();
    method private void configureTab(androidx.appcompat.app.ActionBar.Tab!, int);
    method public void dispatchMenuVisibilityChanged(boolean);
    method public void doHide(boolean);
    method public void doShow(boolean);
    method public void enableContentAnimations(boolean);
    method private void ensureTabsExist();
    method private androidx.appcompat.widget.DecorToolbar! getDecorToolbar(android.view.View!);
    method public boolean hasIcon();
    method public boolean hasLogo();
    method private void hideForActionMode();
    method public void hideForSystem();
    method private void init(android.view.View!);
    method public boolean isTitleTruncated();
    method public void onConfigurationChanged(android.content.res.Configuration!);
    method public void onContentScrollStarted();
    method public void onContentScrollStopped();
    method public boolean onKeyShortcut(int, android.view.KeyEvent!);
    method public void onWindowVisibilityChanged(int);
    method public boolean requestFocus();
    method public void setDefaultDisplayHomeAsUpEnabled(boolean);
    method private void setHasEmbeddedTabs(boolean);
    method public void setShowHideAnimationEnabled(boolean);
    method public void setWindowTitle(CharSequence!);
    method private boolean shouldAnimateContextView();
    method private void showForActionMode();
    method public void showForSystem();
    method public androidx.appcompat.view.ActionMode! startActionMode(androidx.appcompat.view.ActionMode.Callback!);
    method private void updateVisibility(boolean);
    field private static final long FADE_IN_DURATION_MS = 200L; // 0xc8L
    field private static final long FADE_OUT_DURATION_MS = 100L; // 0x64L
    field private static final int INVALID_POSITION = -1; // 0xffffffff
    field private static final String TAG = "WindowDecorActionBar";
    field androidx.appcompat.app.WindowDecorActionBar.ActionModeImpl! mActionMode;
    field private android.app.Activity! mActivity;
    field androidx.appcompat.widget.ActionBarContainer! mContainerView;
    field boolean mContentAnimations;
    field android.view.View! mContentView;
    field android.content.Context! mContext;
    field androidx.appcompat.widget.ActionBarContextView! mContextView;
    field private int mCurWindowVisibility;
    field androidx.appcompat.view.ViewPropertyAnimatorCompatSet! mCurrentShowAnim;
    field androidx.appcompat.widget.DecorToolbar! mDecorToolbar;
    field androidx.appcompat.view.ActionMode! mDeferredDestroyActionMode;
    field androidx.appcompat.view.ActionMode.Callback! mDeferredModeDestroyCallback;
    field private android.app.Dialog! mDialog;
    field private boolean mDisplayHomeAsUpSet;
    field private boolean mHasEmbeddedTabs;
    field boolean mHiddenByApp;
    field boolean mHiddenBySystem;
    field final androidx.core.view.ViewPropertyAnimatorListener! mHideListener;
    field boolean mHideOnContentScroll;
    field private boolean mLastMenuVisibility;
    field private java.util.ArrayList<androidx.appcompat.app.ActionBar.OnMenuVisibilityListener>! mMenuVisibilityListeners;
    field private boolean mNowShowing;
    field androidx.appcompat.widget.ActionBarOverlayLayout! mOverlayLayout;
    field private int mSavedTabPosition;
    field private androidx.appcompat.app.WindowDecorActionBar.TabImpl! mSelectedTab;
    field private boolean mShowHideAnimationEnabled;
    field final androidx.core.view.ViewPropertyAnimatorListener! mShowListener;
    field private boolean mShowingForMode;
    field androidx.appcompat.widget.ScrollingTabContainerView! mTabScrollView;
    field private java.util.ArrayList<androidx.appcompat.app.WindowDecorActionBar.TabImpl>! mTabs;
    field private android.content.Context! mThemedContext;
    field final androidx.core.view.ViewPropertyAnimatorUpdateListener! mUpdateListener;
    field private static final android.view.animation.Interpolator! sHideInterpolator;
    field private static final android.view.animation.Interpolator! sShowInterpolator;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WindowDecorActionBar.ActionModeImpl extends androidx.appcompat.view.ActionMode implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor public WindowDecorActionBar.ActionModeImpl(android.content.Context!, androidx.appcompat.view.ActionMode.Callback!);
    method public boolean dispatchOnCreate();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    field private final android.content.Context! mActionModeContext;
    field private androidx.appcompat.view.ActionMode.Callback! mCallback;
    field private java.lang.ref.WeakReference<android.view.View>! mCustomView;
    field private final androidx.appcompat.view.menu.MenuBuilder! mMenu;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WindowDecorActionBar.TabImpl extends androidx.appcompat.app.ActionBar.Tab {
    ctor public WindowDecorActionBar.TabImpl();
    method public androidx.appcompat.app.ActionBar.TabListener! getCallback();
    method public void setPosition(int);
    field private androidx.appcompat.app.ActionBar.TabListener! mCallback;
    field private CharSequence! mContentDesc;
    field private android.view.View! mCustomView;
    field private android.graphics.drawable.Drawable! mIcon;
    field private int mPosition;
    field private Object! mTag;
    field private CharSequence! mText;
  }

}

package androidx.appcompat.content.res {

  public final class AppCompatResources {
    ctor private AppCompatResources();
    method private static void addColorStateListToCache(android.content.Context, @ColorRes int, android.content.res.ColorStateList);
    method private static android.content.res.ColorStateList? getCachedColorStateList(android.content.Context, @ColorRes int);
    method private static android.util.TypedValue getTypedValue();
    method private static android.content.res.ColorStateList? inflateColorStateList(android.content.Context!, int);
    method private static boolean isColorInt(android.content.Context, @ColorRes int);
    field private static final String LOG_TAG = "AppCompatResources";
    field private static final ThreadLocal<android.util.TypedValue>! TL_TYPED_VALUE;
    field private static final Object! sColorStateCacheLock;
    field private static final java.util.WeakHashMap<android.content.Context,android.util.SparseArray<androidx.appcompat.content.res.AppCompatResources.ColorStateListCacheEntry>>! sColorStateCaches;
  }

  private static class AppCompatResources.ColorStateListCacheEntry {
    ctor AppCompatResources.ColorStateListCacheEntry(android.content.res.ColorStateList, android.content.res.Configuration);
    field final android.content.res.Configuration! configuration;
    field final android.content.res.ColorStateList! value;
  }

}

package androidx.appcompat.graphics.drawable {

  public class AnimatedStateListDrawableCompat extends android.graphics.drawable.Drawable implements androidx.core.graphics.drawable.TintAwareDrawable {
    ctor AnimatedStateListDrawableCompat(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState?, android.content.res.Resources?);
    method void clearMutated();
    method androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState! cloneConstantState();
    method private void inflateChildElements(android.content.Context, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private void init();
    method private int parseItem(android.content.Context, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private int parseTransition(android.content.Context, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private boolean selectTransition(int);
    method void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState);
    method private void updateStateFromTypedArray(android.content.res.TypedArray!);
    field private static final String ELEMENT_ITEM = "item";
    field private static final String ELEMENT_TRANSITION = "transition";
    field private static final String ITEM_MISSING_DRAWABLE_ERROR = ": <item> tag requires a \'drawable\' attribute or child tag defining a drawable";
    field private static final String! LOGTAG;
    field private static final String TRANSITION_MISSING_DRAWABLE_ERROR = ": <transition> tag requires a \'drawable\' attribute or child tag defining a drawable";
    field private static final String TRANSITION_MISSING_FROM_TO_ID = ": <transition> tag requires \'fromId\' & \'toId\' attributes";
    field private boolean mMutated;
    field private androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState! mState;
    field private androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.Transition! mTransition;
    field private int mTransitionFromIndex;
    field private int mTransitionToIndex;
  }

  private static class AnimatedStateListDrawableCompat.AnimatableTransition extends androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.Transition {
    ctor AnimatedStateListDrawableCompat.AnimatableTransition(android.graphics.drawable.Animatable!);
    method public void start();
    method public void stop();
    field private final android.graphics.drawable.Animatable! mA;
  }

  static class AnimatedStateListDrawableCompat.AnimatedStateListState extends androidx.appcompat.graphics.drawable.StateListDrawable.StateListState {
    ctor AnimatedStateListDrawableCompat.AnimatedStateListState(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState?, androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat, android.content.res.Resources?);
    method int addStateSet(int[], android.graphics.drawable.Drawable, int);
    method int addTransition(int, int, android.graphics.drawable.Drawable, boolean);
    method private static long generateTransitionKey(int, int);
    method int getKeyframeIdAt(int);
    method int indexOfKeyframe(int[]);
    method int indexOfTransition(int, int);
    method boolean isTransitionReversed(int, int);
    method void mutate();
    method boolean transitionHasReversibleFlag(int, int);
    field private static final long REVERSED_BIT = 4294967296L; // 0x100000000L
    field private static final long REVERSIBLE_FLAG_BIT = 8589934592L; // 0x200000000L
    field androidx.collection.SparseArrayCompat<java.lang.Integer>! mStateIds;
    field androidx.collection.LongSparseArray<java.lang.Long>! mTransitions;
  }

  private static class AnimatedStateListDrawableCompat.AnimatedVectorDrawableTransition extends androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.Transition {
    ctor AnimatedStateListDrawableCompat.AnimatedVectorDrawableTransition(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat!);
    method public void start();
    method public void stop();
    field private final androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat! mAvd;
  }

  private static class AnimatedStateListDrawableCompat.AnimationDrawableTransition extends androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.Transition {
    ctor AnimatedStateListDrawableCompat.AnimationDrawableTransition(android.graphics.drawable.AnimationDrawable!, boolean, boolean);
    method public boolean canReverse();
    method public void reverse();
    method public void start();
    method public void stop();
    field private final android.animation.ObjectAnimator! mAnim;
    field private final boolean mHasReversibleFlag;
  }

  private static class AnimatedStateListDrawableCompat.FrameInterpolator implements android.animation.TimeInterpolator {
    ctor AnimatedStateListDrawableCompat.FrameInterpolator(android.graphics.drawable.AnimationDrawable!, boolean);
    method int getTotalDuration();
    method int updateFrames(android.graphics.drawable.AnimationDrawable!, boolean);
    field private int[]! mFrameTimes;
    field private int mFrames;
    field private int mTotalDuration;
  }

  private abstract static class AnimatedStateListDrawableCompat.Transition {
    ctor private AnimatedStateListDrawableCompat.Transition();
    method public boolean canReverse();
    method public void reverse();
    method public abstract void start();
    method public abstract void stop();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class DrawableContainer extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {
    ctor DrawableContainer();
    method void animate(boolean);
    method void clearMutated();
    method androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState! cloneConstantState();
    method int getCurrentIndex();
    method private void initializeDrawableForDisplay(android.graphics.drawable.Drawable!);
    method private boolean needsMirroring();
    method static int resolveDensity(android.content.res.Resources?, int);
    method boolean selectDrawable(int);
    method void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState!);
    method void setCurrentIndex(int);
    method public void setEnterFadeDuration(int);
    method public void setExitFadeDuration(int);
    method final void updateDensity(android.content.res.Resources!);
    field private static final boolean DEBUG = false;
    field private static final boolean DEFAULT_DITHER = true;
    field private static final String TAG = "DrawableContainer";
    field private int mAlpha;
    field private Runnable! mAnimationRunnable;
    field private androidx.appcompat.graphics.drawable.DrawableContainer.BlockInvalidateCallback! mBlockInvalidateCallback;
    field private int mCurIndex;
    field private android.graphics.drawable.Drawable! mCurrDrawable;
    field private androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState! mDrawableContainerState;
    field private long mEnterAnimationEnd;
    field private long mExitAnimationEnd;
    field private boolean mHasAlpha;
    field private android.graphics.Rect! mHotspotBounds;
    field private android.graphics.drawable.Drawable! mLastDrawable;
    field private int mLastIndex;
    field private boolean mMutated;
  }

  static class DrawableContainer.BlockInvalidateCallback implements android.graphics.drawable.Drawable.Callback {
    ctor DrawableContainer.BlockInvalidateCallback();
    method public android.graphics.drawable.Drawable.Callback! unwrap();
    method public androidx.appcompat.graphics.drawable.DrawableContainer.BlockInvalidateCallback! wrap(android.graphics.drawable.Drawable.Callback!);
    field private android.graphics.drawable.Drawable.Callback! mCallback;
  }

  abstract static class DrawableContainer.DrawableContainerState extends android.graphics.drawable.Drawable.ConstantState {
    ctor DrawableContainer.DrawableContainerState(androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState!, androidx.appcompat.graphics.drawable.DrawableContainer!, android.content.res.Resources!);
    method public final int addChild(android.graphics.drawable.Drawable!);
    method @RequiresApi(android.os.Build.VERSION_CODES.LOLLIPOP) final void applyTheme(android.content.res.Resources.Theme!);
    method public boolean canConstantState();
    method final void clearMutated();
    method protected void computeConstantSize();
    method private void createAllFutures();
    method final int getCapacity();
    method public final android.graphics.drawable.Drawable! getChild(int);
    method public final int getChildCount();
    method public final int getConstantHeight();
    method public final int getConstantMinimumHeight();
    method public final int getConstantMinimumWidth();
    method public final android.graphics.Rect! getConstantPadding();
    method public final int getConstantWidth();
    method public final int getEnterFadeDuration();
    method public final int getExitFadeDuration();
    method public final int getOpacity();
    method public void growArray(int, int);
    method void invalidateCache();
    method public final boolean isConstantSize();
    method public final boolean isStateful();
    method void mutate();
    method private android.graphics.drawable.Drawable! prepareDrawable(android.graphics.drawable.Drawable!);
    method public final void setConstantSize(boolean);
    method public final void setEnterFadeDuration(int);
    method public final void setExitFadeDuration(int);
    method final boolean setLayoutDirection(int, int);
    method public final void setVariablePadding(boolean);
    method final void updateDensity(android.content.res.Resources!);
    field boolean mAutoMirrored;
    field boolean mCanConstantState;
    field int mChangingConfigurations;
    field boolean mCheckedConstantSize;
    field boolean mCheckedConstantState;
    field boolean mCheckedOpacity;
    field boolean mCheckedPadding;
    field boolean mCheckedStateful;
    field int mChildrenChangingConfigurations;
    field android.graphics.ColorFilter! mColorFilter;
    field int mConstantHeight;
    field int mConstantMinimumHeight;
    field int mConstantMinimumWidth;
    field android.graphics.Rect! mConstantPadding;
    field boolean mConstantSize;
    field int mConstantWidth;
    field int mDensity;
    field boolean mDither;
    field android.util.SparseArray<android.graphics.drawable.Drawable.ConstantState>! mDrawableFutures;
    field android.graphics.drawable.Drawable[]! mDrawables;
    field int mEnterFadeDuration;
    field int mExitFadeDuration;
    field boolean mHasColorFilter;
    field boolean mHasTintList;
    field boolean mHasTintMode;
    field int mLayoutDirection;
    field boolean mMutated;
    field int mNumChildren;
    field int mOpacity;
    field final androidx.appcompat.graphics.drawable.DrawableContainer! mOwner;
    field android.content.res.Resources! mSourceRes;
    field boolean mStateful;
    field android.content.res.ColorStateList! mTintList;
    field android.graphics.PorterDuff.Mode! mTintMode;
    field boolean mVariablePadding;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {
    ctor public DrawableWrapper(android.graphics.drawable.Drawable!);
    method public android.graphics.drawable.Drawable! getWrappedDrawable();
    method public void setWrappedDrawable(android.graphics.drawable.Drawable!);
    field private android.graphics.drawable.Drawable! mDrawable;
  }

  public class DrawerArrowDrawable extends android.graphics.drawable.Drawable {
    method private static float lerp(float, float, float);
    field private static final float ARROW_HEAD_ANGLE;
    field private float mArrowHeadLength;
    field private float mArrowShaftLength;
    field private float mBarGap;
    field private float mBarLength;
    field private int mDirection;
    field private float mMaxCutForBarSize;
    field private final android.graphics.Paint! mPaint;
    field private final android.graphics.Path! mPath;
    field private float mProgress;
    field private final int mSize;
    field private boolean mSpin;
    field private boolean mVerticalMirror;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.appcompat.graphics.drawable.DrawerArrowDrawable.ARROW_DIRECTION_LEFT, androidx.appcompat.graphics.drawable.DrawerArrowDrawable.ARROW_DIRECTION_RIGHT, androidx.appcompat.graphics.drawable.DrawerArrowDrawable.ARROW_DIRECTION_START, androidx.appcompat.graphics.drawable.DrawerArrowDrawable.ARROW_DIRECTION_END}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface DrawerArrowDrawable.ArrowDirection {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class StateListDrawable extends androidx.appcompat.graphics.drawable.DrawableContainer {
    ctor StateListDrawable();
    ctor StateListDrawable(androidx.appcompat.graphics.drawable.StateListDrawable.StateListState!, android.content.res.Resources!);
    ctor StateListDrawable(androidx.appcompat.graphics.drawable.StateListDrawable.StateListState?);
    method public void addState(int[]!, android.graphics.drawable.Drawable!);
    method void clearMutated();
    method androidx.appcompat.graphics.drawable.StateListDrawable.StateListState! cloneConstantState();
    method int[]! extractStateSet(android.util.AttributeSet!);
    method int getStateCount();
    method android.graphics.drawable.Drawable! getStateDrawable(int);
    method int getStateDrawableIndex(int[]!);
    method androidx.appcompat.graphics.drawable.StateListDrawable.StateListState! getStateListState();
    method int[]! getStateSet(int);
    method public void inflate(android.content.Context, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private void inflateChildElements(android.content.Context!, android.content.res.Resources!, org.xmlpull.v1.XmlPullParser!, android.util.AttributeSet!, android.content.res.Resources.Theme!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState);
    method private void updateStateFromTypedArray(android.content.res.TypedArray!);
    field private static final boolean DEBUG = false;
    field private static final String TAG = "StateListDrawable";
    field private boolean mMutated;
    field private androidx.appcompat.graphics.drawable.StateListDrawable.StateListState! mStateListState;
  }

  static class StateListDrawable.StateListState extends androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState {
    ctor StateListDrawable.StateListState(androidx.appcompat.graphics.drawable.StateListDrawable.StateListState!, androidx.appcompat.graphics.drawable.StateListDrawable!, android.content.res.Resources!);
    method int addStateSet(int[]!, android.graphics.drawable.Drawable!);
    method public void growArray(int, int);
    method int indexOfStateSet(int[]!);
    method void mutate();
    field int[][]! mStateSets;
  }

}

package androidx.appcompat.text {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class AllCapsTransformationMethod implements android.text.method.TransformationMethod {
    ctor public AllCapsTransformationMethod(android.content.Context!);
    field private java.util.Locale! mLocale;
  }

}

package androidx.appcompat.view {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionBarPolicy {
    ctor private ActionBarPolicy(android.content.Context!);
    method public boolean enableHomeButtonByDefault();
    method public static androidx.appcompat.view.ActionBarPolicy! get(android.content.Context!);
    method public int getEmbeddedMenuWidthLimit();
    method public int getMaxActionButtons();
    method public int getStackedTabMaxWidth();
    method public int getTabContainerHeight();
    method public boolean hasEmbeddedTabs();
    method public boolean showsOverflowMenuButton();
    field private android.content.Context! mContext;
  }

  public abstract class ActionMode {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isUiFocusable();
    field private Object! mTag;
    field private boolean mTitleOptionalHint;
  }

  public class ContextThemeWrapper extends android.content.ContextWrapper {
    method private android.content.res.Resources! getResourcesInternal();
    method private void initializeTheme();
    field private android.view.LayoutInflater! mInflater;
    field private android.content.res.Configuration! mOverrideConfiguration;
    field private android.content.res.Resources! mResources;
    field private android.content.res.Resources.Theme! mTheme;
    field private int mThemeResource;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class StandaloneActionMode extends androidx.appcompat.view.ActionMode implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor public StandaloneActionMode(android.content.Context!, androidx.appcompat.widget.ActionBarContextView!, androidx.appcompat.view.ActionMode.Callback!, boolean);
    method public boolean isUiFocusable();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onCloseSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    field private androidx.appcompat.view.ActionMode.Callback! mCallback;
    field private android.content.Context! mContext;
    field private androidx.appcompat.widget.ActionBarContextView! mContextView;
    field private java.lang.ref.WeakReference<android.view.View>! mCustomView;
    field private boolean mFinished;
    field private boolean mFocusable;
    field private androidx.appcompat.view.menu.MenuBuilder! mMenu;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SupportActionModeWrapper extends android.view.ActionMode {
    ctor public SupportActionModeWrapper(android.content.Context!, androidx.appcompat.view.ActionMode!);
    field final android.content.Context! mContext;
    field final androidx.appcompat.view.ActionMode! mWrappedObject;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class SupportActionModeWrapper.CallbackWrapper implements androidx.appcompat.view.ActionMode.Callback {
    ctor public SupportActionModeWrapper.CallbackWrapper(android.content.Context!, android.view.ActionMode.Callback!);
    method public android.view.ActionMode! getActionModeWrapper(androidx.appcompat.view.ActionMode!);
    method private android.view.Menu! getMenuWrapper(android.view.Menu!);
    field final java.util.ArrayList<androidx.appcompat.view.SupportActionModeWrapper>! mActionModes;
    field final android.content.Context! mContext;
    field final androidx.collection.SimpleArrayMap<android.view.Menu,android.view.Menu>! mMenus;
    field final android.view.ActionMode.Callback! mWrappedCallback;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SupportMenuInflater extends android.view.MenuInflater {
    ctor public SupportMenuInflater(android.content.Context!);
    method private Object! findRealOwner(Object!);
    method Object! getRealOwner();
    method private void parseMenu(org.xmlpull.v1.XmlPullParser!, android.util.AttributeSet!, android.view.Menu!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    field static final Class<?>[]! ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE;
    field static final Class<?>[]! ACTION_VIEW_CONSTRUCTOR_SIGNATURE;
    field static final String LOG_TAG = "SupportMenuInflater";
    field static final int NO_ID = 0; // 0x0
    field private static final String XML_GROUP = "group";
    field private static final String XML_ITEM = "item";
    field private static final String XML_MENU = "menu";
    field final Object[]! mActionProviderConstructorArguments;
    field final Object[]! mActionViewConstructorArguments;
    field android.content.Context! mContext;
    field private Object! mRealOwner;
  }

  private static class SupportMenuInflater.InflatedOnMenuItemClickListener implements android.view.MenuItem.OnMenuItemClickListener {
    ctor public SupportMenuInflater.InflatedOnMenuItemClickListener(Object!, String!);
    field private static final Class<?>[]! PARAM_TYPES;
    field private java.lang.reflect.Method! mMethod;
    field private Object! mRealOwner;
  }

  private class SupportMenuInflater.MenuState {
    ctor public SupportMenuInflater.MenuState(android.view.Menu!);
    method public void addItem();
    method public android.view.SubMenu! addSubMenuItem();
    method private char getShortcut(String!);
    method public boolean hasAddedItem();
    method private <T> T! newInstance(String!, Class<?>[]!, Object[]!);
    method public void readGroup(android.util.AttributeSet!);
    method public void readItem(android.util.AttributeSet!);
    method public void resetGroup();
    method private void setItem(android.view.MenuItem!);
    field private static final int defaultGroupId = 0; // 0x0
    field private static final int defaultItemCategory = 0; // 0x0
    field private static final int defaultItemCheckable = 0; // 0x0
    field private static final boolean defaultItemChecked = false;
    field private static final boolean defaultItemEnabled = true;
    field private static final int defaultItemId = 0; // 0x0
    field private static final int defaultItemOrder = 0; // 0x0
    field private static final boolean defaultItemVisible = true;
    field private int groupCategory;
    field private int groupCheckable;
    field private boolean groupEnabled;
    field private int groupId;
    field private int groupOrder;
    field private boolean groupVisible;
    field androidx.core.view.ActionProvider! itemActionProvider;
    field private String! itemActionProviderClassName;
    field private String! itemActionViewClassName;
    field private int itemActionViewLayout;
    field private boolean itemAdded;
    field private int itemAlphabeticModifiers;
    field private char itemAlphabeticShortcut;
    field private int itemCategoryOrder;
    field private int itemCheckable;
    field private boolean itemChecked;
    field private CharSequence! itemContentDescription;
    field private boolean itemEnabled;
    field private int itemIconResId;
    field private android.content.res.ColorStateList! itemIconTintList;
    field private android.graphics.PorterDuff.Mode! itemIconTintMode;
    field private int itemId;
    field private String! itemListenerMethodName;
    field private int itemNumericModifiers;
    field private char itemNumericShortcut;
    field private int itemShowAsAction;
    field private CharSequence! itemTitle;
    field private CharSequence! itemTitleCondensed;
    field private CharSequence! itemTooltipText;
    field private boolean itemVisible;
    field private android.view.Menu! menu;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ViewPropertyAnimatorCompatSet {
    ctor public ViewPropertyAnimatorCompatSet();
    method public void cancel();
    method void onAnimationsEnded();
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! play(androidx.core.view.ViewPropertyAnimatorCompat!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! playSequentially(androidx.core.view.ViewPropertyAnimatorCompat!, androidx.core.view.ViewPropertyAnimatorCompat!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setDuration(long);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setInterpolator(android.view.animation.Interpolator!);
    method public androidx.appcompat.view.ViewPropertyAnimatorCompatSet! setListener(androidx.core.view.ViewPropertyAnimatorListener!);
    method public void start();
    field final java.util.ArrayList<androidx.core.view.ViewPropertyAnimatorCompat>! mAnimators;
    field private long mDuration;
    field private android.view.animation.Interpolator! mInterpolator;
    field private boolean mIsStarted;
    field androidx.core.view.ViewPropertyAnimatorListener! mListener;
    field private final androidx.core.view.ViewPropertyAnimatorListenerAdapter! mProxyListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class WindowCallbackWrapper implements android.view.Window.Callback {
    ctor public WindowCallbackWrapper(android.view.Window.Callback!);
    field final android.view.Window.Callback! mWrapped;
  }

}

package androidx.appcompat.view.menu {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionMenuItem implements androidx.core.internal.view.SupportMenuItem {
    ctor public ActionMenuItem(android.content.Context!, int, int, int, int, CharSequence!);
    method private void applyIconTint();
    method public boolean invoke();
    method public androidx.appcompat.view.menu.ActionMenuItem! setExclusiveCheckable(boolean);
    field private static final int CHECKABLE = 1; // 0x1
    field private static final int CHECKED = 2; // 0x2
    field private static final int ENABLED = 16; // 0x10
    field private static final int EXCLUSIVE = 4; // 0x4
    field private static final int HIDDEN = 8; // 0x8
    field private static final int NO_ICON = 0; // 0x0
    field private final int mCategoryOrder;
    field private androidx.core.internal.view.SupportMenuItem.OnMenuItemClickListener! mClickListener;
    field private CharSequence! mContentDescription;
    field private android.content.Context! mContext;
    field private int mFlags;
    field private final int mGroup;
    field private boolean mHasIconTint;
    field private boolean mHasIconTintMode;
    field private android.graphics.drawable.Drawable! mIconDrawable;
    field private int mIconResId;
    field private android.content.res.ColorStateList! mIconTintList;
    field private android.graphics.PorterDuff.Mode! mIconTintMode;
    field private final int mId;
    field private android.content.Intent! mIntent;
    field private final int mOrdering;
    field private char mShortcutAlphabeticChar;
    field private int mShortcutAlphabeticModifiers;
    field private char mShortcutNumericChar;
    field private int mShortcutNumericModifiers;
    field private CharSequence! mTitle;
    field private CharSequence! mTitleCondensed;
    field private CharSequence! mTooltipText;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionMenuItemView extends androidx.appcompat.widget.AppCompatTextView implements androidx.appcompat.widget.ActionMenuView.ActionMenuChildView androidx.appcompat.view.menu.MenuView.ItemView android.view.View.OnClickListener {
    ctor public ActionMenuItemView(android.content.Context!);
    ctor public ActionMenuItemView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionMenuItemView(android.content.Context!, android.util.AttributeSet!, int);
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public boolean hasText();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method public boolean needsDividerAfter();
    method public boolean needsDividerBefore();
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setExpandedFormat(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder.ItemInvoker!);
    method public void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView.PopupCallback!);
    method public void setShortcut(boolean, char);
    method public void setTitle(CharSequence!);
    method private boolean shouldAllowTextWithIcon();
    method public boolean showsIcon();
    method private void updateTextButtonVisibility();
    field private static final int MAX_ICON_SIZE = 32; // 0x20
    field private static final String TAG = "ActionMenuItemView";
    field private boolean mAllowTextWithIcon;
    field private boolean mExpandedFormat;
    field private androidx.appcompat.widget.ForwardingListener! mForwardingListener;
    field private android.graphics.drawable.Drawable! mIcon;
    field androidx.appcompat.view.menu.MenuItemImpl! mItemData;
    field androidx.appcompat.view.menu.MenuBuilder.ItemInvoker! mItemInvoker;
    field private int mMaxIconSize;
    field private int mMinWidth;
    field androidx.appcompat.view.menu.ActionMenuItemView.PopupCallback! mPopupCallback;
    field private int mSavedPaddingLeft;
    field private CharSequence! mTitle;
  }

  private class ActionMenuItemView.ActionMenuItemForwardingListener extends androidx.appcompat.widget.ForwardingListener {
    ctor public ActionMenuItemView.ActionMenuItemForwardingListener();
    method public androidx.appcompat.view.menu.ShowableListMenu! getPopup();
    method protected boolean onForwardingStarted();
  }

  public abstract static class ActionMenuItemView.PopupCallback {
    ctor public ActionMenuItemView.PopupCallback();
    method public abstract androidx.appcompat.view.menu.ShowableListMenu! getPopup();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class BaseMenuPresenter implements androidx.appcompat.view.menu.MenuPresenter {
    ctor public BaseMenuPresenter(android.content.Context!, int, int);
    method protected void addItemView(android.view.View!, int);
    method public abstract void bindItemView(androidx.appcompat.view.menu.MenuItemImpl!, androidx.appcompat.view.menu.MenuView.ItemView!);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public androidx.appcompat.view.menu.MenuView.ItemView! createItemView(android.view.ViewGroup!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method protected boolean filterLeftoverView(android.view.ViewGroup!, int);
    method public boolean flagActionItems();
    method public androidx.appcompat.view.menu.MenuPresenter.Callback! getCallback();
    method public int getId();
    method public android.view.View! getItemView(androidx.appcompat.view.menu.MenuItemImpl!, android.view.View!, android.view.ViewGroup!);
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setId(int);
    method public boolean shouldIncludeItem(int, androidx.appcompat.view.menu.MenuItemImpl!);
    method public void updateMenuView(boolean);
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mCallback;
    field protected android.content.Context! mContext;
    field private int mId;
    field protected android.view.LayoutInflater! mInflater;
    field private int mItemLayoutRes;
    field protected androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field private int mMenuLayoutRes;
    field protected androidx.appcompat.view.menu.MenuView! mMenuView;
    field protected android.content.Context! mSystemContext;
    field protected android.view.LayoutInflater! mSystemInflater;
  }

  abstract class BaseMenuWrapper {
    ctor BaseMenuWrapper(android.content.Context!);
    method final android.view.MenuItem! getMenuItemWrapper(android.view.MenuItem!);
    method final android.view.SubMenu! getSubMenuWrapper(android.view.SubMenu!);
    method final void internalClear();
    method final void internalRemoveGroup(int);
    method final void internalRemoveItem(int);
    field final android.content.Context! mContext;
    field private java.util.Map<androidx.core.internal.view.SupportMenuItem,android.view.MenuItem>! mMenuItems;
    field private java.util.Map<androidx.core.internal.view.SupportSubMenu,android.view.SubMenu>! mSubMenus;
  }

  final class CascadingMenuPopup extends androidx.appcompat.view.menu.MenuPopup implements androidx.appcompat.view.menu.MenuPresenter android.widget.PopupWindow.OnDismissListener android.view.View.OnKeyListener {
    ctor public CascadingMenuPopup(android.content.Context, android.view.View, @AttrRes int, @StyleRes int, boolean);
    method public void addMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method protected boolean closeMenuOnSubMenuOpened();
    method private androidx.appcompat.widget.MenuPopupWindow! createPopupWindow();
    method public void dismiss();
    method private int findIndexOfAddedMenu(androidx.appcompat.view.menu.MenuBuilder);
    method private android.view.MenuItem! findMenuItemForSubmenu(androidx.appcompat.view.menu.MenuBuilder, androidx.appcompat.view.menu.MenuBuilder);
    method private android.view.View? findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup.CascadingMenuInfo, androidx.appcompat.view.menu.MenuBuilder);
    method public boolean flagActionItems();
    method private int getInitialMenuPosition();
    method public android.widget.ListView! getListView();
    method private int getNextMenuPosition(int);
    method public boolean isShowing();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setAnchorView(android.view.View);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setForceShowIcon(boolean);
    method public void setGravity(int);
    method public void setHorizontalOffset(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener!);
    method public void setShowTitle(boolean);
    method public void setVerticalOffset(int);
    method public void show();
    method private void showMenu(androidx.appcompat.view.menu.MenuBuilder);
    method public void updateMenuView(boolean);
    field static final int HORIZ_POSITION_LEFT = 0; // 0x0
    field static final int HORIZ_POSITION_RIGHT = 1; // 0x1
    field private static final int ITEM_LAYOUT;
    field static final int SUBMENU_TIMEOUT_MS = 200; // 0xc8
    field private android.view.View! mAnchorView;
    field private final android.view.View.OnAttachStateChangeListener! mAttachStateChangeListener;
    field private final android.content.Context! mContext;
    field private int mDropDownGravity;
    field private boolean mForceShowIcon;
    field final android.view.ViewTreeObserver.OnGlobalLayoutListener! mGlobalLayoutListener;
    field private boolean mHasXOffset;
    field private boolean mHasYOffset;
    field private int mLastPosition;
    field private final androidx.appcompat.widget.MenuItemHoverListener! mMenuItemHoverListener;
    field private final int mMenuMaxWidth;
    field private android.widget.PopupWindow.OnDismissListener! mOnDismissListener;
    field private final boolean mOverflowOnly;
    field private final java.util.List<androidx.appcompat.view.menu.MenuBuilder>! mPendingMenus;
    field private final int mPopupStyleAttr;
    field private final int mPopupStyleRes;
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mPresenterCallback;
    field private int mRawDropDownGravity;
    field boolean mShouldCloseImmediately;
    field private boolean mShowTitle;
    field final java.util.List<androidx.appcompat.view.menu.CascadingMenuPopup.CascadingMenuInfo>! mShowingMenus;
    field android.view.View! mShownAnchorView;
    field final android.os.Handler! mSubMenuHoverHandler;
    field android.view.ViewTreeObserver! mTreeObserver;
    field private int mXOffset;
    field private int mYOffset;
  }

  private static class CascadingMenuPopup.CascadingMenuInfo {
    ctor public CascadingMenuPopup.CascadingMenuInfo(androidx.appcompat.widget.MenuPopupWindow, androidx.appcompat.view.menu.MenuBuilder, int);
    method public android.widget.ListView! getListView();
    field public final androidx.appcompat.view.menu.MenuBuilder! menu;
    field public final int position;
    field public final androidx.appcompat.widget.MenuPopupWindow! window;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.appcompat.view.menu.CascadingMenuPopup.HORIZ_POSITION_LEFT, androidx.appcompat.view.menu.CascadingMenuPopup.HORIZ_POSITION_RIGHT}) public static @interface CascadingMenuPopup.HorizPosition {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class ExpandedMenuView extends android.widget.ListView implements android.widget.AdapterView.OnItemClickListener androidx.appcompat.view.menu.MenuBuilder.ItemInvoker androidx.appcompat.view.menu.MenuView {
    ctor public ExpandedMenuView(android.content.Context!, android.util.AttributeSet!);
    ctor public ExpandedMenuView(android.content.Context!, android.util.AttributeSet!, int);
    method public int getWindowAnimations();
    method public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
    method public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
    field private static final int[]! TINT_ATTRS;
    field private int mAnimations;
    field private androidx.appcompat.view.menu.MenuBuilder! mMenu;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ListMenuItemView extends android.widget.LinearLayout implements android.widget.AbsListView.SelectionBoundsAdjuster androidx.appcompat.view.menu.MenuView.ItemView {
    ctor public ListMenuItemView(android.content.Context!, android.util.AttributeSet!);
    ctor public ListMenuItemView(android.content.Context!, android.util.AttributeSet!, int);
    method private void addContentView(android.view.View!);
    method private void addContentView(android.view.View!, int);
    method private android.view.LayoutInflater! getInflater();
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method private void insertCheckBox();
    method private void insertIconView();
    method private void insertRadioButton();
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setForceShowIcon(boolean);
    method public void setGroupDividerEnabled(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setShortcut(boolean, char);
    method private void setSubMenuArrowVisible(boolean);
    method public void setTitle(CharSequence!);
    method public boolean showsIcon();
    field private static final String TAG = "ListMenuItemView";
    field private android.graphics.drawable.Drawable! mBackground;
    field private android.widget.CheckBox! mCheckBox;
    field private android.widget.LinearLayout! mContent;
    field private boolean mForceShowIcon;
    field private android.widget.ImageView! mGroupDivider;
    field private boolean mHasListDivider;
    field private android.widget.ImageView! mIconView;
    field private android.view.LayoutInflater! mInflater;
    field private androidx.appcompat.view.menu.MenuItemImpl! mItemData;
    field private int mMenuType;
    field private boolean mPreserveIconSpacing;
    field private android.widget.RadioButton! mRadioButton;
    field private android.widget.TextView! mShortcutView;
    field private android.graphics.drawable.Drawable! mSubMenuArrow;
    field private android.widget.ImageView! mSubMenuArrowView;
    field private int mTextAppearance;
    field private android.content.Context! mTextAppearanceContext;
    field private android.widget.TextView! mTitleView;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ListMenuPresenter implements android.widget.AdapterView.OnItemClickListener androidx.appcompat.view.menu.MenuPresenter {
    ctor public ListMenuPresenter(android.content.Context!, int);
    ctor public ListMenuPresenter(int, int);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean flagActionItems();
    method public android.widget.ListAdapter! getAdapter();
    method public int getId();
    method int getItemIndexOffset();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void restoreHierarchyState(android.os.Bundle!);
    method public void saveHierarchyState(android.os.Bundle!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setId(int);
    method public void setItemIndexOffset(int);
    method public void updateMenuView(boolean);
    field private static final String TAG = "ListMenuPresenter";
    field public static final String VIEWS_TAG = "android:menu:list";
    field androidx.appcompat.view.menu.ListMenuPresenter.MenuAdapter! mAdapter;
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mCallback;
    field android.content.Context! mContext;
    field private int mId;
    field android.view.LayoutInflater! mInflater;
    field int mItemIndexOffset;
    field int mItemLayoutRes;
    field androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field androidx.appcompat.view.menu.ExpandedMenuView! mMenuView;
    field int mThemeRes;
  }

  private class ListMenuPresenter.MenuAdapter extends android.widget.BaseAdapter {
    ctor public ListMenuPresenter.MenuAdapter();
    method void findExpandedIndex();
    field private int mExpandedIndex;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuAdapter extends android.widget.BaseAdapter {
    ctor public MenuAdapter(androidx.appcompat.view.menu.MenuBuilder!, android.view.LayoutInflater!, boolean, int);
    method void findExpandedIndex();
    method public androidx.appcompat.view.menu.MenuBuilder! getAdapterMenu();
    method public boolean getForceShowIcon();
    method public void setForceShowIcon(boolean);
    field androidx.appcompat.view.menu.MenuBuilder! mAdapterMenu;
    field private int mExpandedIndex;
    field private boolean mForceShowIcon;
    field private final android.view.LayoutInflater! mInflater;
    field private final int mItemLayoutRes;
    field private final boolean mOverflowOnly;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuBuilder implements androidx.core.internal.view.SupportMenu {
    ctor public MenuBuilder(android.content.Context!);
    method protected android.view.MenuItem! addInternal(int, int, int, CharSequence!);
    method public void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!);
    method public void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!, android.content.Context!);
    method public void changeMenuMode();
    method public void clearAll();
    method public void clearHeader();
    method public final void close(boolean);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method private androidx.appcompat.view.menu.MenuItemImpl! createNewMenuItem(int, int, int, int, CharSequence!, int);
    method boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method private void dispatchPresenterUpdate(boolean);
    method private void dispatchRestoreInstanceState(android.os.Bundle!);
    method private void dispatchSaveInstanceState(android.os.Bundle!);
    method private boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!, androidx.appcompat.view.menu.MenuPresenter!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method public int findGroupIndex(int);
    method public int findGroupIndex(int, int);
    method private static int findInsertIndex(java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>!, int);
    method public int findItemIndex(int);
    method androidx.appcompat.view.menu.MenuItemImpl! findItemWithShortcutForKey(int, android.view.KeyEvent!);
    method void findItemsWithShortcutForKey(java.util.List<androidx.appcompat.view.menu.MenuItemImpl>!, int, android.view.KeyEvent!);
    method public void flagActionItems();
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! getActionItems();
    method protected String! getActionViewStatesKey();
    method public android.content.Context! getContext();
    method public androidx.appcompat.view.menu.MenuItemImpl! getExpandedItem();
    method public android.graphics.drawable.Drawable! getHeaderIcon();
    method public CharSequence! getHeaderTitle();
    method public android.view.View! getHeaderView();
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! getNonActionItems();
    method boolean getOptionalIconsVisible();
    method private static int getOrdering(int);
    method android.content.res.Resources! getResources();
    method public androidx.appcompat.view.menu.MenuBuilder! getRootMenu();
    method public java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl> getVisibleItems();
    method public boolean isGroupDividerEnabled();
    method boolean isQwertyMode();
    method public boolean isShortcutsVisible();
    method void onItemActionRequestChanged(androidx.appcompat.view.menu.MenuItemImpl!);
    method void onItemVisibleChanged(androidx.appcompat.view.menu.MenuItemImpl!);
    method public void onItemsChanged(boolean);
    method public boolean performItemAction(android.view.MenuItem!, int);
    method public boolean performItemAction(android.view.MenuItem!, androidx.appcompat.view.menu.MenuPresenter!, int);
    method public void removeItemAt(int);
    method private void removeItemAtInt(int, boolean);
    method public void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter!);
    method public void restoreActionViewStates(android.os.Bundle!);
    method public void restorePresenterStates(android.os.Bundle!);
    method public void saveActionViewStates(android.os.Bundle!);
    method public void savePresenterStates(android.os.Bundle!);
    method public void setCallback(androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setCurrentMenuInfo(android.view.ContextMenu.ContextMenuInfo!);
    method public androidx.appcompat.view.menu.MenuBuilder! setDefaultShowAsAction(int);
    method void setExclusiveItemChecked(android.view.MenuItem!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderIconInt(android.graphics.drawable.Drawable!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderIconInt(int);
    method private void setHeaderInternal(int, CharSequence!, int, android.graphics.drawable.Drawable!, android.view.View!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderTitleInt(CharSequence!);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderTitleInt(int);
    method protected androidx.appcompat.view.menu.MenuBuilder! setHeaderViewInt(android.view.View!);
    method public void setOptionalIconsVisible(boolean);
    method public void setOverrideVisibleItems(boolean);
    method public void setShortcutsVisible(boolean);
    method private void setShortcutsVisibleInner(boolean);
    method public void startDispatchingItemsChanged();
    method public void stopDispatchingItemsChanged();
    field private static final String ACTION_VIEW_STATES_KEY = "android:menu:actionviewstates";
    field private static final String EXPANDED_ACTION_VIEW_ID = "android:menu:expandedactionview";
    field private static final String PRESENTER_KEY = "android:menu:presenters";
    field private static final String TAG = "MenuBuilder";
    field private java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! mActionItems;
    field private androidx.appcompat.view.menu.MenuBuilder.Callback! mCallback;
    field private final android.content.Context! mContext;
    field private android.view.ContextMenu.ContextMenuInfo! mCurrentMenuInfo;
    field private int mDefaultShowAsAction;
    field private androidx.appcompat.view.menu.MenuItemImpl! mExpandedItem;
    field private android.util.SparseArray<android.os.Parcelable>! mFrozenViewStates;
    field private boolean mGroupDividerEnabled;
    field android.graphics.drawable.Drawable! mHeaderIcon;
    field CharSequence! mHeaderTitle;
    field android.view.View! mHeaderView;
    field private boolean mIsActionItemsStale;
    field private boolean mIsClosing;
    field private boolean mIsVisibleItemsStale;
    field private java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! mItems;
    field private boolean mItemsChangedWhileDispatchPrevented;
    field private java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! mNonActionItems;
    field private boolean mOptionalIconsVisible;
    field private boolean mOverrideVisibleItems;
    field private java.util.concurrent.CopyOnWriteArrayList<java.lang.ref.WeakReference<androidx.appcompat.view.menu.MenuPresenter>>! mPresenters;
    field private boolean mPreventDispatchingItemsChanged;
    field private boolean mQwertyMode;
    field private final android.content.res.Resources! mResources;
    field private boolean mShortcutsVisible;
    field private boolean mStructureChangedWhileDispatchPrevented;
    field private java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! mTempShortcutItemList;
    field private java.util.ArrayList<androidx.appcompat.view.menu.MenuItemImpl>! mVisibleItems;
    field private static final int[]! sCategoryToOrder;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface MenuBuilder.Callback {
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface MenuBuilder.ItemInvoker {
    method public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
  }

  class MenuDialogHelper implements android.content.DialogInterface.OnClickListener android.content.DialogInterface.OnDismissListener android.content.DialogInterface.OnKeyListener androidx.appcompat.view.menu.MenuPresenter.Callback {
    ctor public MenuDialogHelper(androidx.appcompat.view.menu.MenuBuilder!);
    method public void dismiss();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method public void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void show(android.os.IBinder!);
    field private androidx.appcompat.app.AlertDialog! mDialog;
    field private androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field androidx.appcompat.view.menu.ListMenuPresenter! mPresenter;
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mPresenterCallback;
  }

  interface MenuHelper {
    method public void dismiss();
    method public void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class MenuItemImpl implements androidx.core.internal.view.SupportMenuItem {
    ctor MenuItemImpl(androidx.appcompat.view.menu.MenuBuilder!, int, int, int, int, CharSequence!, int);
    method public void actionFormatChanged();
    method private static void appendModifier(StringBuilder!, int, int, String!);
    method private android.graphics.drawable.Drawable! applyIconTintIfNecessary(android.graphics.drawable.Drawable!);
    method Runnable! getCallback();
    method public int getOrdering();
    method char getShortcut();
    method String! getShortcutLabel();
    method CharSequence! getTitleForItemView(androidx.appcompat.view.menu.MenuView.ItemView!);
    method public boolean hasCollapsibleActionView();
    method public boolean invoke();
    method public boolean isActionButton();
    method public boolean isExclusiveCheckable();
    method public boolean requestsActionButton();
    method public void setActionViewExpanded(boolean);
    method public android.view.MenuItem! setCallback(Runnable!);
    method void setCheckedInt(boolean);
    method public void setExclusiveCheckable(boolean);
    method public void setIsActionButton(boolean);
    method void setMenuInfo(android.view.ContextMenu.ContextMenuInfo!);
    method public void setSubMenu(androidx.appcompat.view.menu.SubMenuBuilder!);
    method boolean setVisibleInt(boolean);
    method public boolean shouldShowIcon();
    method boolean shouldShowShortcut();
    method public boolean showsTextAsAction();
    field private static final int CHECKABLE = 1; // 0x1
    field private static final int CHECKED = 2; // 0x2
    field private static final int ENABLED = 16; // 0x10
    field private static final int EXCLUSIVE = 4; // 0x4
    field private static final int HIDDEN = 8; // 0x8
    field private static final int IS_ACTION = 32; // 0x20
    field static final int NO_ICON = 0; // 0x0
    field private static final int SHOW_AS_ACTION_MASK = 3; // 0x3
    field private static final String TAG = "MenuItemImpl";
    field private androidx.core.view.ActionProvider! mActionProvider;
    field private android.view.View! mActionView;
    field private final int mCategoryOrder;
    field private androidx.core.internal.view.SupportMenuItem.OnMenuItemClickListener! mClickListener;
    field private CharSequence! mContentDescription;
    field private int mFlags;
    field private final int mGroup;
    field private boolean mHasIconTint;
    field private boolean mHasIconTintMode;
    field private android.graphics.drawable.Drawable! mIconDrawable;
    field private int mIconResId;
    field private android.content.res.ColorStateList! mIconTintList;
    field private android.graphics.PorterDuff.Mode! mIconTintMode;
    field private final int mId;
    field private android.content.Intent! mIntent;
    field private boolean mIsActionViewExpanded;
    field private Runnable! mItemCallback;
    field androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field private android.view.ContextMenu.ContextMenuInfo! mMenuInfo;
    field private boolean mNeedToApplyIconTint;
    field private android.view.MenuItem.OnActionExpandListener! mOnActionExpandListener;
    field private final int mOrdering;
    field private char mShortcutAlphabeticChar;
    field private int mShortcutAlphabeticModifiers;
    field private char mShortcutNumericChar;
    field private int mShortcutNumericModifiers;
    field private int mShowAsAction;
    field private androidx.appcompat.view.menu.SubMenuBuilder! mSubMenu;
    field private CharSequence! mTitle;
    field private CharSequence! mTitleCondensed;
    field private CharSequence! mTooltipText;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuItemWrapperICS extends androidx.appcompat.view.menu.BaseMenuWrapper implements android.view.MenuItem {
    ctor public MenuItemWrapperICS(android.content.Context!, androidx.core.internal.view.SupportMenuItem!);
    method public void setExclusiveCheckable(boolean);
    field static final String LOG_TAG = "MenuItemWrapper";
    field private java.lang.reflect.Method! mSetExclusiveCheckableMethod;
    field private final androidx.core.internal.view.SupportMenuItem! mWrappedObject;
  }

  private class MenuItemWrapperICS.ActionProviderWrapper extends androidx.core.view.ActionProvider {
    ctor MenuItemWrapperICS.ActionProviderWrapper(android.content.Context!, android.view.ActionProvider!);
    field final android.view.ActionProvider! mInner;
  }

  @RequiresApi(16) private class MenuItemWrapperICS.ActionProviderWrapperJB extends androidx.appcompat.view.menu.MenuItemWrapperICS.ActionProviderWrapper implements android.view.ActionProvider.VisibilityListener {
    ctor MenuItemWrapperICS.ActionProviderWrapperJB(android.content.Context!, android.view.ActionProvider!);
    field private androidx.core.view.ActionProvider.VisibilityListener! mListener;
  }

  static class MenuItemWrapperICS.CollapsibleActionViewWrapper extends android.widget.FrameLayout implements androidx.appcompat.view.CollapsibleActionView {
    ctor MenuItemWrapperICS.CollapsibleActionViewWrapper(android.view.View!);
    method android.view.View! getWrappedView();
    field final android.view.CollapsibleActionView! mWrappedView;
  }

  private class MenuItemWrapperICS.OnActionExpandListenerWrapper implements android.view.MenuItem.OnActionExpandListener {
    ctor MenuItemWrapperICS.OnActionExpandListenerWrapper(android.view.MenuItem.OnActionExpandListener!);
    field private final android.view.MenuItem.OnActionExpandListener! mObject;
  }

  private class MenuItemWrapperICS.OnMenuItemClickListenerWrapper implements android.view.MenuItem.OnMenuItemClickListener {
    ctor MenuItemWrapperICS.OnMenuItemClickListenerWrapper(android.view.MenuItem.OnMenuItemClickListener!);
    field private final android.view.MenuItem.OnMenuItemClickListener! mObject;
  }

  abstract class MenuPopup implements android.widget.AdapterView.OnItemClickListener androidx.appcompat.view.menu.MenuPresenter androidx.appcompat.view.menu.ShowableListMenu {
    ctor MenuPopup();
    method public abstract void addMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method protected boolean closeMenuOnSubMenuOpened();
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public android.graphics.Rect! getEpicenterBounds();
    method public int getId();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context, androidx.appcompat.view.menu.MenuBuilder?);
    method protected static int measureIndividualMenuWidth(android.widget.ListAdapter!, android.view.ViewGroup!, android.content.Context!, int);
    method public abstract void setAnchorView(android.view.View!);
    method public void setEpicenterBounds(android.graphics.Rect!);
    method public abstract void setForceShowIcon(boolean);
    method public abstract void setGravity(int);
    method public abstract void setHorizontalOffset(int);
    method public abstract void setOnDismissListener(android.widget.PopupWindow.OnDismissListener!);
    method public abstract void setShowTitle(boolean);
    method public abstract void setVerticalOffset(int);
    method protected static boolean shouldPreserveIconSpacing(androidx.appcompat.view.menu.MenuBuilder!);
    method protected static androidx.appcompat.view.menu.MenuAdapter! toMenuAdapter(android.widget.ListAdapter!);
    field private android.graphics.Rect! mEpicenterBounds;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuPopupHelper implements androidx.appcompat.view.menu.MenuHelper {
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View, boolean, @AttrRes int);
    ctor public MenuPopupHelper(android.content.Context, androidx.appcompat.view.menu.MenuBuilder, android.view.View, boolean, @AttrRes int, @StyleRes int);
    method private androidx.appcompat.view.menu.MenuPopup createPopup();
    method public void dismiss();
    method public int getGravity();
    method public android.widget.ListView! getListView();
    method public androidx.appcompat.view.menu.MenuPopup getPopup();
    method public boolean isShowing();
    method protected void onDismiss();
    method public void setAnchorView(android.view.View);
    method public void setForceShowIcon(boolean);
    method public void setGravity(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener?);
    method public void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter.Callback?);
    method public void show();
    method public void show(int, int);
    method private void showPopup(int, int, boolean, boolean);
    method public boolean tryShow();
    method public boolean tryShow(int, int);
    field private static final int TOUCH_EPICENTER_SIZE_DP = 48; // 0x30
    field private android.view.View! mAnchorView;
    field private final android.content.Context! mContext;
    field private int mDropDownGravity;
    field private boolean mForceShowIcon;
    field private final android.widget.PopupWindow.OnDismissListener! mInternalOnDismissListener;
    field private final androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field private android.widget.PopupWindow.OnDismissListener! mOnDismissListener;
    field private final boolean mOverflowOnly;
    field private androidx.appcompat.view.menu.MenuPopup! mPopup;
    field private final int mPopupStyleAttr;
    field private final int mPopupStyleRes;
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mPresenterCallback;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface MenuPresenter {
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean flagActionItems();
    method public int getId();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void updateMenuView(boolean);
  }

  public static interface MenuPresenter.Callback {
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface MenuView {
    method public int getWindowAnimations();
    method public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
  }

  public static interface MenuView.ItemView {
    method public androidx.appcompat.view.menu.MenuItemImpl! getItemData();
    method public void initialize(androidx.appcompat.view.menu.MenuItemImpl!, int);
    method public boolean prefersCondensedTitle();
    method public void setCheckable(boolean);
    method public void setChecked(boolean);
    method public void setEnabled(boolean);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setShortcut(boolean, char);
    method public void setTitle(CharSequence!);
    method public boolean showsIcon();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuWrapperICS extends androidx.appcompat.view.menu.BaseMenuWrapper implements android.view.Menu {
    ctor public MenuWrapperICS(android.content.Context!, androidx.core.internal.view.SupportMenu!);
    field private final androidx.core.internal.view.SupportMenu! mWrappedObject;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface ShowableListMenu {
    method public void dismiss();
    method public android.widget.ListView! getListView();
    method public boolean isShowing();
    method public void show();
  }

  final class StandardMenuPopup extends androidx.appcompat.view.menu.MenuPopup implements android.widget.AdapterView.OnItemClickListener androidx.appcompat.view.menu.MenuPresenter android.widget.PopupWindow.OnDismissListener android.view.View.OnKeyListener {
    ctor public StandardMenuPopup(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!, android.view.View!, int, int, boolean);
    method public void addMenu(androidx.appcompat.view.menu.MenuBuilder!);
    method public void dismiss();
    method public boolean flagActionItems();
    method public android.widget.ListView! getListView();
    method public boolean isShowing();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setAnchorView(android.view.View!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setForceShowIcon(boolean);
    method public void setGravity(int);
    method public void setHorizontalOffset(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener!);
    method public void setShowTitle(boolean);
    method public void setVerticalOffset(int);
    method public void show();
    method private boolean tryShow();
    method public void updateMenuView(boolean);
    field private static final int ITEM_LAYOUT;
    field private final androidx.appcompat.view.menu.MenuAdapter! mAdapter;
    field private android.view.View! mAnchorView;
    field private final android.view.View.OnAttachStateChangeListener! mAttachStateChangeListener;
    field private int mContentWidth;
    field private final android.content.Context! mContext;
    field private int mDropDownGravity;
    field final android.view.ViewTreeObserver.OnGlobalLayoutListener! mGlobalLayoutListener;
    field private boolean mHasContentWidth;
    field private final androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field private android.widget.PopupWindow.OnDismissListener! mOnDismissListener;
    field private final boolean mOverflowOnly;
    field final androidx.appcompat.widget.MenuPopupWindow! mPopup;
    field private final int mPopupMaxWidth;
    field private final int mPopupStyleAttr;
    field private final int mPopupStyleRes;
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mPresenterCallback;
    field private boolean mShowTitle;
    field android.view.View! mShownAnchorView;
    field android.view.ViewTreeObserver! mTreeObserver;
    field private boolean mWasDismissed;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SubMenuBuilder extends androidx.appcompat.view.menu.MenuBuilder implements android.view.SubMenu {
    ctor public SubMenuBuilder(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuItemImpl!);
    method public String! getActionViewStatesKey();
    method public android.view.Menu! getParentMenu();
    method public androidx.appcompat.view.menu.MenuBuilder! getRootMenu();
    method public boolean isGroupDividerEnabled();
    method public boolean isQwertyMode();
    method public boolean isShortcutsVisible();
    method public void setCallback(androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setShortcutsVisible(boolean);
    field private androidx.appcompat.view.menu.MenuItemImpl! mItem;
    field private androidx.appcompat.view.menu.MenuBuilder! mParentMenu;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class SubMenuWrapperICS extends androidx.appcompat.view.menu.MenuWrapperICS implements android.view.SubMenu {
    ctor SubMenuWrapperICS(android.content.Context!, androidx.core.internal.view.SupportSubMenu!);
    field private final androidx.core.internal.view.SupportSubMenu! mSubMenu;
  }

}

package androidx.appcompat.widget {

  abstract class AbsActionBarView extends android.view.ViewGroup {
    ctor AbsActionBarView(android.content.Context!);
    ctor AbsActionBarView(android.content.Context!, android.util.AttributeSet!);
    ctor AbsActionBarView(android.content.Context!, android.util.AttributeSet!, int);
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void dismissPopupMenus();
    method public int getAnimatedVisibility();
    method public int getContentHeight();
    method public boolean hideOverflowMenu();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isOverflowReserved();
    method protected int measureChildView(android.view.View!, int, int, int);
    method protected static int next(int, int, boolean);
    method protected int positionChild(android.view.View!, int, int, int, boolean);
    method public void postShowOverflowMenu();
    method public void setContentHeight(int);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean showOverflowMenu();
    field private static final int FADE_DURATION = 200; // 0xc8
    field protected androidx.appcompat.widget.ActionMenuPresenter! mActionMenuPresenter;
    field protected int mContentHeight;
    field private boolean mEatingHover;
    field private boolean mEatingTouch;
    field protected androidx.appcompat.widget.ActionMenuView! mMenuView;
    field protected final android.content.Context! mPopupContext;
    field protected final androidx.appcompat.widget.AbsActionBarView.VisibilityAnimListener! mVisAnimListener;
    field protected androidx.core.view.ViewPropertyAnimatorCompat! mVisibilityAnim;
  }

  protected class AbsActionBarView.VisibilityAnimListener implements androidx.core.view.ViewPropertyAnimatorListener {
    ctor protected AbsActionBarView.VisibilityAnimListener();
    method public androidx.appcompat.widget.AbsActionBarView.VisibilityAnimListener! withFinalVisibility(androidx.core.view.ViewPropertyAnimatorCompat!, int);
    field private boolean mCanceled;
    field int mFinalVisibility;
  }

  class ActionBarBackgroundDrawable extends android.graphics.drawable.Drawable {
    ctor public ActionBarBackgroundDrawable(androidx.appcompat.widget.ActionBarContainer!);
    field final androidx.appcompat.widget.ActionBarContainer! mContainer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionBarContainer extends android.widget.FrameLayout {
    ctor public ActionBarContainer(android.content.Context!);
    ctor public ActionBarContainer(android.content.Context!, android.util.AttributeSet!);
    method private int getMeasuredHeightWithMargins(android.view.View!);
    method public android.view.View! getTabContainer();
    method private boolean isCollapsed(android.view.View!);
    method public void setPrimaryBackground(android.graphics.drawable.Drawable!);
    method public void setSplitBackground(android.graphics.drawable.Drawable!);
    method public void setStackedBackground(android.graphics.drawable.Drawable!);
    method public void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setTransitioning(boolean);
    field private android.view.View! mActionBarView;
    field android.graphics.drawable.Drawable! mBackground;
    field private android.view.View! mContextView;
    field private int mHeight;
    field boolean mIsSplit;
    field boolean mIsStacked;
    field private boolean mIsTransitioning;
    field android.graphics.drawable.Drawable! mSplitBackground;
    field android.graphics.drawable.Drawable! mStackedBackground;
    field private android.view.View! mTabContainer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionBarContextView extends androidx.appcompat.widget.AbsActionBarView {
    ctor public ActionBarContextView(android.content.Context!);
    ctor public ActionBarContextView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionBarContextView(android.content.Context!, android.util.AttributeSet!, int);
    method public void closeMode();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public boolean hideOverflowMenu();
    method public void initForMode(androidx.appcompat.view.ActionMode!);
    method private void initTitle();
    method public boolean isOverflowMenuShowing();
    method public boolean isTitleOptional();
    method public void killMode();
    method public void setContentHeight(int);
    method public void setCustomView(android.view.View!);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method public void setTitleOptional(boolean);
    method public boolean showOverflowMenu();
    field private static final String TAG = "ActionBarContextView";
    field private android.view.View! mClose;
    field private int mCloseItemLayout;
    field private android.view.View! mCustomView;
    field private CharSequence! mSubtitle;
    field private int mSubtitleStyleRes;
    field private android.widget.TextView! mSubtitleView;
    field private CharSequence! mTitle;
    field private android.widget.LinearLayout! mTitleLayout;
    field private boolean mTitleOptional;
    field private int mTitleStyleRes;
    field private android.widget.TextView! mTitleView;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActionBarOverlayLayout extends android.view.ViewGroup implements androidx.appcompat.widget.DecorContentParent androidx.core.view.NestedScrollingParent androidx.core.view.NestedScrollingParent2 androidx.core.view.NestedScrollingParent3 {
    ctor public ActionBarOverlayLayout(android.content.Context!);
    ctor public ActionBarOverlayLayout(android.content.Context!, android.util.AttributeSet!);
    method private void addActionBarHideOffset();
    method private boolean applyInsets(android.view.View!, android.graphics.Rect!, boolean, boolean, boolean, boolean);
    method public boolean canShowOverflowMenu();
    method public void dismissPopups();
    method public int getActionBarHideOffset();
    method private androidx.appcompat.widget.DecorToolbar! getDecorToolbar(android.view.View!);
    method public CharSequence! getTitle();
    method void haltActionBarHideOffsetAnimations();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method private void init(android.content.Context!);
    method public void initFeature(int);
    method public boolean isHideOnContentScrollEnabled();
    method public boolean isInOverlayMode();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method private void postAddActionBarHideOffset();
    method private void postRemoveActionBarHideOffset();
    method void pullChildren();
    method private void removeActionBarHideOffset();
    method public void restoreToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setActionBarHideOffset(int);
    method public void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback!);
    method public void setHasNonEmbeddedTabs(boolean);
    method public void setHideOnContentScrollEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuPrepared();
    method public void setOverlayMode(boolean);
    method public void setShowingForActionMode(boolean);
    method public void setUiOptions(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method private boolean shouldHideActionBarOnFling(float, float);
    method public boolean showOverflowMenu();
    field private static final int ACTION_BAR_ANIMATE_DELAY = 600; // 0x258
    field static final int[]! ATTRS;
    field private static final String TAG = "ActionBarOverlayLayout";
    field private int mActionBarHeight;
    field androidx.appcompat.widget.ActionBarContainer! mActionBarTop;
    field private androidx.appcompat.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback! mActionBarVisibilityCallback;
    field private final Runnable! mAddActionBarHideOffset;
    field boolean mAnimatingForFling;
    field private final android.graphics.Rect! mBaseContentInsets;
    field private final android.graphics.Rect! mBaseInnerInsets;
    field private androidx.appcompat.widget.ContentFrameLayout! mContent;
    field private final android.graphics.Rect! mContentInsets;
    field android.view.ViewPropertyAnimator! mCurrentActionBarTopAnimator;
    field private androidx.appcompat.widget.DecorToolbar! mDecorToolbar;
    field private android.widget.OverScroller! mFlingEstimator;
    field private boolean mHasNonEmbeddedTabs;
    field private boolean mHideOnContentScroll;
    field private int mHideOnContentScrollReference;
    field private boolean mIgnoreWindowContentOverlay;
    field private final android.graphics.Rect! mInnerInsets;
    field private final android.graphics.Rect! mLastBaseContentInsets;
    field private final android.graphics.Rect! mLastBaseInnerInsets;
    field private final android.graphics.Rect! mLastInnerInsets;
    field private int mLastSystemUiVisibility;
    field private boolean mOverlayMode;
    field private final androidx.core.view.NestedScrollingParentHelper! mParentHelper;
    field private final Runnable! mRemoveActionBarHideOffset;
    field final android.animation.AnimatorListenerAdapter! mTopAnimatorListener;
    field private android.graphics.drawable.Drawable! mWindowContentOverlay;
    field private int mWindowVisibility;
  }

  public static interface ActionBarOverlayLayout.ActionBarVisibilityCallback {
    method public void enableContentAnimations(boolean);
    method public void hideForSystem();
    method public void onContentScrollStarted();
    method public void onContentScrollStopped();
    method public void onWindowVisibilityChanged(int);
    method public void showForSystem();
  }

  public static class ActionBarOverlayLayout.LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
    ctor public ActionBarOverlayLayout.LayoutParams(android.content.Context!, android.util.AttributeSet!);
    ctor public ActionBarOverlayLayout.LayoutParams(int, int);
    ctor public ActionBarOverlayLayout.LayoutParams(android.view.ViewGroup.LayoutParams!);
    ctor public ActionBarOverlayLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams!);
  }

  class ActionMenuPresenter extends androidx.appcompat.view.menu.BaseMenuPresenter implements androidx.core.view.ActionProvider.SubUiVisibilityListener {
    ctor public ActionMenuPresenter(android.content.Context!);
    method public void bindItemView(androidx.appcompat.view.menu.MenuItemImpl!, androidx.appcompat.view.menu.MenuView.ItemView!);
    method public boolean dismissPopupMenus();
    method public boolean filterLeftoverView(android.view.ViewGroup!, int);
    method private android.view.View! findViewForItem(android.view.MenuItem!);
    method public boolean flagActionItems();
    method public android.view.View! getItemView(androidx.appcompat.view.menu.MenuItemImpl!, android.view.View!, android.view.ViewGroup!);
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public android.graphics.drawable.Drawable! getOverflowIcon();
    method public boolean hideOverflowMenu();
    method public boolean hideSubMenus();
    method public void initForMenu(android.content.Context, androidx.appcompat.view.menu.MenuBuilder?);
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isOverflowReserved();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onConfigurationChanged(android.content.res.Configuration!);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setExpandedActionViewsExclusive(boolean);
    method public void setItemLimit(int);
    method public void setMenuView(androidx.appcompat.widget.ActionMenuView!);
    method public void setOverflowIcon(android.graphics.drawable.Drawable!);
    method public void setReserveOverflow(boolean);
    method public void setWidthLimit(int, boolean);
    method public boolean shouldIncludeItem(int, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean showOverflowMenu();
    method public void updateMenuView(boolean);
    field private static final String TAG = "ActionMenuPresenter";
    field private final android.util.SparseBooleanArray! mActionButtonGroups;
    field androidx.appcompat.widget.ActionMenuPresenter.ActionButtonSubmenu! mActionButtonPopup;
    field private int mActionItemWidthLimit;
    field private boolean mExpandedActionViewsExclusive;
    field private int mMaxItems;
    field private boolean mMaxItemsSet;
    field private int mMinCellSize;
    field int mOpenSubMenuId;
    field androidx.appcompat.widget.ActionMenuPresenter.OverflowMenuButton! mOverflowButton;
    field androidx.appcompat.widget.ActionMenuPresenter.OverflowPopup! mOverflowPopup;
    field private android.graphics.drawable.Drawable! mPendingOverflowIcon;
    field private boolean mPendingOverflowIconSet;
    field private androidx.appcompat.widget.ActionMenuPresenter.ActionMenuPopupCallback! mPopupCallback;
    field final androidx.appcompat.widget.ActionMenuPresenter.PopupPresenterCallback! mPopupPresenterCallback;
    field androidx.appcompat.widget.ActionMenuPresenter.OpenOverflowRunnable! mPostedOpenRunnable;
    field private boolean mReserveOverflow;
    field private boolean mReserveOverflowSet;
    field private android.view.View! mScrapActionButtonView;
    field private boolean mStrictWidthLimit;
    field private int mWidthLimit;
    field private boolean mWidthLimitSet;
  }

  private class ActionMenuPresenter.ActionButtonSubmenu extends androidx.appcompat.view.menu.MenuPopupHelper {
    ctor public ActionMenuPresenter.ActionButtonSubmenu(android.content.Context!, androidx.appcompat.view.menu.SubMenuBuilder!, android.view.View!);
    method protected void onDismiss();
  }

  private class ActionMenuPresenter.ActionMenuPopupCallback extends androidx.appcompat.view.menu.ActionMenuItemView.PopupCallback {
    ctor ActionMenuPresenter.ActionMenuPopupCallback();
    method public androidx.appcompat.view.menu.ShowableListMenu! getPopup();
  }

  private class ActionMenuPresenter.OpenOverflowRunnable implements java.lang.Runnable {
    ctor public ActionMenuPresenter.OpenOverflowRunnable(androidx.appcompat.widget.ActionMenuPresenter.OverflowPopup!);
    field private androidx.appcompat.widget.ActionMenuPresenter.OverflowPopup! mPopup;
  }

  private class ActionMenuPresenter.OverflowMenuButton extends androidx.appcompat.widget.AppCompatImageView implements androidx.appcompat.widget.ActionMenuView.ActionMenuChildView {
    ctor public ActionMenuPresenter.OverflowMenuButton(android.content.Context!);
    method public boolean needsDividerAfter();
    method public boolean needsDividerBefore();
    field private final float[]! mTempPts;
  }

  private class ActionMenuPresenter.OverflowPopup extends androidx.appcompat.view.menu.MenuPopupHelper {
    ctor public ActionMenuPresenter.OverflowPopup(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!, android.view.View!, boolean);
    method protected void onDismiss();
  }

  private class ActionMenuPresenter.PopupPresenterCallback implements androidx.appcompat.view.menu.MenuPresenter.Callback {
    ctor ActionMenuPresenter.PopupPresenterCallback();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  private static class ActionMenuPresenter.SavedState implements android.os.Parcelable {
    ctor ActionMenuPresenter.SavedState();
    ctor ActionMenuPresenter.SavedState(android.os.Parcel!);
    field public static final android.os.Parcelable.Creator<androidx.appcompat.widget.ActionMenuPresenter.SavedState>! CREATOR;
    field public int openSubMenuId;
  }

  public class ActionMenuView extends androidx.appcompat.widget.LinearLayoutCompat implements androidx.appcompat.view.menu.MenuBuilder.ItemInvoker androidx.appcompat.view.menu.MenuView {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.widget.ActionMenuView.LayoutParams! generateOverflowButtonLayoutParams();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int getWindowAnimations();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected boolean hasSupportDividerBeforeChildAt(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void initialize(androidx.appcompat.view.menu.MenuBuilder!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isOverflowMenuShowPending();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isOverflowReserved();
    method static int measureChildForCells(android.view.View!, int, int, int, int);
    method private void onMeasureExactFormat(int, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.view.menu.MenuBuilder! peekMenu();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setExpandedActionViewsExclusive(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setOverflowReserved(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setPresenter(androidx.appcompat.widget.ActionMenuPresenter!);
    field static final int GENERATED_ITEM_PADDING = 4; // 0x4
    field static final int MIN_CELL_SIZE = 56; // 0x38
    field private static final String TAG = "ActionMenuView";
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mActionMenuPresenterCallback;
    field private boolean mFormatItems;
    field private int mFormatItemsWidth;
    field private int mGeneratedItemPadding;
    field private androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field androidx.appcompat.view.menu.MenuBuilder.Callback! mMenuBuilderCallback;
    field private int mMinCellSize;
    field androidx.appcompat.widget.ActionMenuView.OnMenuItemClickListener! mOnMenuItemClickListener;
    field private android.content.Context! mPopupContext;
    field private int mPopupTheme;
    field private androidx.appcompat.widget.ActionMenuPresenter! mPresenter;
    field private boolean mReserveOverflow;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface ActionMenuView.ActionMenuChildView {
    method public boolean needsDividerAfter();
    method public boolean needsDividerBefore();
  }

  private static class ActionMenuView.ActionMenuPresenterCallback implements androidx.appcompat.widget.ActionMenuPresenter.Callback {
    ctor ActionMenuView.ActionMenuPresenterCallback();
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder!);
  }

  public static class ActionMenuView.LayoutParams extends androidx.appcompat.widget.LinearLayoutCompat.LayoutParams {
    ctor ActionMenuView.LayoutParams(int, int, boolean);
    field boolean expanded;
  }

  private class ActionMenuView.MenuBuilderCallback implements androidx.appcompat.view.menu.MenuBuilder.Callback {
    ctor ActionMenuView.MenuBuilderCallback();
    method public boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder!, android.view.MenuItem!);
    method public void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder!);
  }

  class ActivityChooserModel extends android.database.DataSetObservable {
    ctor private ActivityChooserModel(android.content.Context!, String!);
    method private boolean addHistoricalRecord(androidx.appcompat.widget.ActivityChooserModel.HistoricalRecord!);
    method public android.content.Intent! chooseActivity(int);
    method private void ensureConsistentState();
    method public static androidx.appcompat.widget.ActivityChooserModel! get(android.content.Context!, String!);
    method public android.content.pm.ResolveInfo! getActivity(int);
    method public int getActivityCount();
    method public int getActivityIndex(android.content.pm.ResolveInfo!);
    method public android.content.pm.ResolveInfo! getDefaultActivity();
    method public int getHistoryMaxSize();
    method public int getHistorySize();
    method public android.content.Intent! getIntent();
    method private boolean loadActivitiesIfNeeded();
    method private void persistHistoricalDataIfNeeded();
    method private void pruneExcessiveHistoricalRecordsIfNeeded();
    method private boolean readHistoricalDataIfNeeded();
    method private void readHistoricalDataImpl();
    method public void setActivitySorter(androidx.appcompat.widget.ActivityChooserModel.ActivitySorter!);
    method public void setDefaultActivity(int);
    method public void setHistoryMaxSize(int);
    method public void setIntent(android.content.Intent!);
    method public void setOnChooseActivityListener(androidx.appcompat.widget.ActivityChooserModel.OnChooseActivityListener!);
    method private boolean sortActivitiesIfNeeded();
    field static final String ATTRIBUTE_ACTIVITY = "activity";
    field static final String ATTRIBUTE_TIME = "time";
    field static final String ATTRIBUTE_WEIGHT = "weight";
    field static final boolean DEBUG = false;
    field private static final int DEFAULT_ACTIVITY_INFLATION = 5; // 0x5
    field private static final float DEFAULT_HISTORICAL_RECORD_WEIGHT = 1.0f;
    field public static final String DEFAULT_HISTORY_FILE_NAME = "activity_choser_model_history.xml";
    field public static final int DEFAULT_HISTORY_MAX_LENGTH = 50; // 0x32
    field private static final String HISTORY_FILE_EXTENSION = ".xml";
    field private static final int INVALID_INDEX = -1; // 0xffffffff
    field static final String! LOG_TAG;
    field static final String TAG_HISTORICAL_RECORD = "historical-record";
    field static final String TAG_HISTORICAL_RECORDS = "historical-records";
    field private final java.util.List<androidx.appcompat.widget.ActivityChooserModel.ActivityResolveInfo>! mActivities;
    field private androidx.appcompat.widget.ActivityChooserModel.OnChooseActivityListener! mActivityChoserModelPolicy;
    field private androidx.appcompat.widget.ActivityChooserModel.ActivitySorter! mActivitySorter;
    field boolean mCanReadHistoricalData;
    field final android.content.Context! mContext;
    field private final java.util.List<androidx.appcompat.widget.ActivityChooserModel.HistoricalRecord>! mHistoricalRecords;
    field private boolean mHistoricalRecordsChanged;
    field final String! mHistoryFileName;
    field private int mHistoryMaxSize;
    field private final Object! mInstanceLock;
    field private android.content.Intent! mIntent;
    field private boolean mReadShareHistoryCalled;
    field private boolean mReloadActivities;
    field private static final java.util.Map<java.lang.String,androidx.appcompat.widget.ActivityChooserModel>! sDataModelRegistry;
    field private static final Object! sRegistryLock;
  }

  public static interface ActivityChooserModel.ActivityChooserModelClient {
    method public void setActivityChooserModel(androidx.appcompat.widget.ActivityChooserModel!);
  }

  public static final class ActivityChooserModel.ActivityResolveInfo implements java.lang.Comparable<androidx.appcompat.widget.ActivityChooserModel.ActivityResolveInfo> {
    ctor public ActivityChooserModel.ActivityResolveInfo(android.content.pm.ResolveInfo!);
    field public final android.content.pm.ResolveInfo! resolveInfo;
    field public float weight;
  }

  public static interface ActivityChooserModel.ActivitySorter {
    method public void sort(android.content.Intent!, java.util.List<androidx.appcompat.widget.ActivityChooserModel.ActivityResolveInfo>!, java.util.List<androidx.appcompat.widget.ActivityChooserModel.HistoricalRecord>!);
  }

  private static final class ActivityChooserModel.DefaultSorter implements androidx.appcompat.widget.ActivityChooserModel.ActivitySorter {
    ctor ActivityChooserModel.DefaultSorter();
    method public void sort(android.content.Intent!, java.util.List<androidx.appcompat.widget.ActivityChooserModel.ActivityResolveInfo>!, java.util.List<androidx.appcompat.widget.ActivityChooserModel.HistoricalRecord>!);
    field private static final float WEIGHT_DECAY_COEFFICIENT = 0.95f;
    field private final java.util.Map<android.content.ComponentName,androidx.appcompat.widget.ActivityChooserModel.ActivityResolveInfo>! mPackageNameToActivityMap;
  }

  public static final class ActivityChooserModel.HistoricalRecord {
    ctor public ActivityChooserModel.HistoricalRecord(String!, long, float);
    ctor public ActivityChooserModel.HistoricalRecord(android.content.ComponentName!, long, float);
    field public final android.content.ComponentName! activity;
    field public final long time;
    field public final float weight;
  }

  public static interface ActivityChooserModel.OnChooseActivityListener {
    method public boolean onChooseActivity(androidx.appcompat.widget.ActivityChooserModel!, android.content.Intent!);
  }

  private final class ActivityChooserModel.PersistHistoryAsyncTask extends android.os.AsyncTask<java.lang.Object,java.lang.Void,java.lang.Void> {
    ctor ActivityChooserModel.PersistHistoryAsyncTask();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ActivityChooserView extends android.view.ViewGroup implements androidx.appcompat.widget.ActivityChooserModel.ActivityChooserModelClient {
    ctor public ActivityChooserView(android.content.Context!);
    ctor public ActivityChooserView(android.content.Context!, android.util.AttributeSet!);
    ctor public ActivityChooserView(android.content.Context!, android.util.AttributeSet!, int);
    method public boolean dismissPopup();
    method public androidx.appcompat.widget.ActivityChooserModel! getDataModel();
    method androidx.appcompat.widget.ListPopupWindow! getListPopupWindow();
    method public boolean isShowingPopup();
    method public void setActivityChooserModel(androidx.appcompat.widget.ActivityChooserModel!);
    method public void setDefaultActionButtonContentDescription(int);
    method public void setExpandActivityOverflowButtonContentDescription(int);
    method public void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable!);
    method public void setInitialActivityCount(int);
    method public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setProvider(androidx.core.view.ActionProvider!);
    method public boolean showPopup();
    method void showPopupUnchecked(int);
    method void updateAppearance();
    field private static final String LOG_TAG = "ActivityChooserView";
    field private final android.view.View! mActivityChooserContent;
    field private final android.graphics.drawable.Drawable! mActivityChooserContentBackground;
    field final androidx.appcompat.widget.ActivityChooserView.ActivityChooserViewAdapter! mAdapter;
    field private final androidx.appcompat.widget.ActivityChooserView.Callbacks! mCallbacks;
    field private int mDefaultActionButtonContentDescription;
    field final android.widget.FrameLayout! mDefaultActivityButton;
    field private final android.widget.ImageView! mDefaultActivityButtonImage;
    field final android.widget.FrameLayout! mExpandActivityOverflowButton;
    field private final android.widget.ImageView! mExpandActivityOverflowButtonImage;
    field int mInitialActivityCount;
    field private boolean mIsAttachedToWindow;
    field boolean mIsSelectingDefaultActivity;
    field private final int mListPopupMaxWidth;
    field private androidx.appcompat.widget.ListPopupWindow! mListPopupWindow;
    field final android.database.DataSetObserver! mModelDataSetObserver;
    field android.widget.PopupWindow.OnDismissListener! mOnDismissListener;
    field private final android.view.ViewTreeObserver.OnGlobalLayoutListener! mOnGlobalLayoutListener;
    field androidx.core.view.ActionProvider! mProvider;
  }

  private class ActivityChooserView.ActivityChooserViewAdapter extends android.widget.BaseAdapter {
    ctor ActivityChooserView.ActivityChooserViewAdapter();
    method public int getActivityCount();
    method public androidx.appcompat.widget.ActivityChooserModel! getDataModel();
    method public android.content.pm.ResolveInfo! getDefaultActivity();
    method public int getHistorySize();
    method public boolean getShowDefaultActivity();
    method public int measureContentWidth();
    method public void setDataModel(androidx.appcompat.widget.ActivityChooserModel!);
    method public void setMaxActivityCount(int);
    method public void setShowDefaultActivity(boolean, boolean);
    method public void setShowFooterView(boolean);
    field private static final int ITEM_VIEW_TYPE_ACTIVITY = 0; // 0x0
    field private static final int ITEM_VIEW_TYPE_COUNT = 3; // 0x3
    field private static final int ITEM_VIEW_TYPE_FOOTER = 1; // 0x1
    field public static final int MAX_ACTIVITY_COUNT_DEFAULT = 4; // 0x4
    field public static final int MAX_ACTIVITY_COUNT_UNLIMITED = 2147483647; // 0x7fffffff
    field private androidx.appcompat.widget.ActivityChooserModel! mDataModel;
    field private boolean mHighlightDefaultActivity;
    field private int mMaxActivityCount;
    field private boolean mShowDefaultActivity;
    field private boolean mShowFooterView;
  }

  private class ActivityChooserView.Callbacks implements android.widget.AdapterView.OnItemClickListener android.widget.PopupWindow.OnDismissListener android.view.View.OnClickListener android.view.View.OnLongClickListener {
    ctor ActivityChooserView.Callbacks();
    method private void notifyOnDismissListener();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class ActivityChooserView.InnerLayout extends android.widget.LinearLayout {
    ctor public ActivityChooserView.InnerLayout(android.content.Context!, android.util.AttributeSet!);
    field private static final int[]! TINT_ATTRS;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class AlertDialogLayout extends androidx.appcompat.widget.LinearLayoutCompat {
    ctor public AlertDialogLayout(android.content.Context?);
    ctor public AlertDialogLayout(android.content.Context?, android.util.AttributeSet?);
    method private void forceUniformWidth(int, int);
    method private static int resolveMinimumHeight(android.view.View!);
    method private void setChildFrame(android.view.View!, int, int, int, int);
    method private boolean tryOnMeasure(int, int);
  }

  public class AppCompatAutoCompleteTextView extends android.widget.AutoCompleteTextView implements androidx.core.view.TintableBackgroundView {
    field private static final int[]! TINT_ATTRS;
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  class AppCompatBackgroundHelper {
    ctor AppCompatBackgroundHelper(android.view.View!);
    method private boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable);
    method void applySupportBackgroundTint();
    method android.content.res.ColorStateList! getSupportBackgroundTintList();
    method android.graphics.PorterDuff.Mode! getSupportBackgroundTintMode();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method void onSetBackgroundDrawable(android.graphics.drawable.Drawable!);
    method void onSetBackgroundResource(int);
    method void setInternalBackgroundTint(android.content.res.ColorStateList!);
    method void setSupportBackgroundTintList(android.content.res.ColorStateList!);
    method void setSupportBackgroundTintMode(android.graphics.PorterDuff.Mode!);
    method private boolean shouldApplyFrameworkTintUsingColorFilter();
    field private int mBackgroundResId;
    field private androidx.appcompat.widget.TintInfo! mBackgroundTint;
    field private final androidx.appcompat.widget.AppCompatDrawableManager! mDrawableManager;
    field private androidx.appcompat.widget.TintInfo! mInternalBackgroundTint;
    field private androidx.appcompat.widget.TintInfo! mTmpInfo;
    field private final android.view.View! mView;
  }

  public class AppCompatButton extends android.widget.Button implements androidx.core.widget.AutoSizeableTextView androidx.core.view.TintableBackgroundView {
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  public class AppCompatCheckBox extends android.widget.CheckBox implements androidx.core.widget.TintableCompoundButton {
    field private final androidx.appcompat.widget.AppCompatCompoundButtonHelper! mCompoundButtonHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  public class AppCompatCheckedTextView extends android.widget.CheckedTextView {
    field private static final int[]! TINT_ATTRS;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  class AppCompatCompoundButtonHelper {
    ctor AppCompatCompoundButtonHelper(android.widget.CompoundButton!);
    method void applyButtonTint();
    method int getCompoundPaddingLeft(int);
    method android.content.res.ColorStateList! getSupportButtonTintList();
    method android.graphics.PorterDuff.Mode! getSupportButtonTintMode();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method void onSetButtonDrawable();
    method void setSupportButtonTintList(android.content.res.ColorStateList!);
    method void setSupportButtonTintMode(android.graphics.PorterDuff.Mode?);
    field private android.content.res.ColorStateList! mButtonTintList;
    field private android.graphics.PorterDuff.Mode! mButtonTintMode;
    field private boolean mHasButtonTint;
    field private boolean mHasButtonTintMode;
    field private boolean mSkipNextApply;
    field private final android.widget.CompoundButton! mView;
  }

  static interface AppCompatCompoundButtonHelper.DirectSetButtonDrawableInterface {
    method public void setButtonDrawable(android.graphics.drawable.Drawable!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class AppCompatDrawableManager {
    ctor public AppCompatDrawableManager();
    method private void addDelegate(String, androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate);
    method private boolean addDrawableToCache(android.content.Context, long, android.graphics.drawable.Drawable);
    method private void addTintListToCache(android.content.Context, @DrawableRes int, android.content.res.ColorStateList);
    method private static boolean arrayContains(int[]!, int);
    method private void checkVectorDrawableSetup(android.content.Context);
    method private android.content.res.ColorStateList! createBorderlessButtonColorStateList(android.content.Context);
    method private android.content.res.ColorStateList! createButtonColorStateList(android.content.Context, @ColorInt int);
    method private static long createCacheKey(android.util.TypedValue!);
    method private android.content.res.ColorStateList! createColoredButtonColorStateList(android.content.Context);
    method private android.content.res.ColorStateList! createDefaultButtonColorStateList(android.content.Context);
    method private android.graphics.drawable.Drawable! createDrawableIfNeeded(android.content.Context, @DrawableRes int);
    method private android.content.res.ColorStateList! createSwitchThumbColorStateList(android.content.Context!);
    method private static android.graphics.PorterDuffColorFilter! createTintFilter(android.content.res.ColorStateList!, android.graphics.PorterDuff.Mode!, int[]!);
    method public static androidx.appcompat.widget.AppCompatDrawableManager! get();
    method private android.graphics.drawable.Drawable! getCachedDrawable(android.content.Context, long);
    method public android.graphics.drawable.Drawable! getDrawable(android.content.Context, @DrawableRes int);
    method android.graphics.drawable.Drawable! getDrawable(android.content.Context, @DrawableRes int, boolean);
    method public static android.graphics.PorterDuffColorFilter! getPorterDuffColorFilter(int, android.graphics.PorterDuff.Mode!);
    method android.content.res.ColorStateList! getTintList(android.content.Context, @DrawableRes int);
    method private android.content.res.ColorStateList! getTintListFromCache(android.content.Context, @DrawableRes int);
    method static android.graphics.PorterDuff.Mode! getTintMode(int);
    method private static void installDefaultInflateDelegates(androidx.appcompat.widget.AppCompatDrawableManager);
    method private static boolean isVectorDrawable(android.graphics.drawable.Drawable);
    method private android.graphics.drawable.Drawable! loadDrawableFromDelegates(android.content.Context, @DrawableRes int);
    method public void onConfigurationChanged(android.content.Context);
    method android.graphics.drawable.Drawable! onDrawableLoadedFromResources(android.content.Context, androidx.appcompat.widget.VectorEnabledTintResources, @DrawableRes int);
    method private void removeDelegate(String, androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate);
    method private static void setPorterDuffColorFilter(android.graphics.drawable.Drawable!, int, android.graphics.PorterDuff.Mode!);
    method private android.graphics.drawable.Drawable! tintDrawable(android.content.Context, @DrawableRes int, boolean, android.graphics.drawable.Drawable);
    method static void tintDrawable(android.graphics.drawable.Drawable!, androidx.appcompat.widget.TintInfo!, int[]!);
    method static boolean tintDrawableUsingColorFilter(android.content.Context, @DrawableRes int, android.graphics.drawable.Drawable);
    field private static final int[]! COLORFILTER_COLOR_BACKGROUND_MULTIPLY;
    field private static final int[]! COLORFILTER_COLOR_CONTROL_ACTIVATED;
    field private static final int[]! COLORFILTER_TINT_COLOR_CONTROL_NORMAL;
    field private static final androidx.appcompat.widget.AppCompatDrawableManager.ColorFilterLruCache! COLOR_FILTER_CACHE;
    field private static final boolean DEBUG = false;
    field private static final android.graphics.PorterDuff.Mode! DEFAULT_MODE;
    field private static androidx.appcompat.widget.AppCompatDrawableManager! INSTANCE;
    field private static final String PLATFORM_VD_CLAZZ = "android.graphics.drawable.VectorDrawable";
    field private static final String SKIP_DRAWABLE_TAG = "appcompat_skip_skip";
    field private static final String TAG = "AppCompatDrawableManag";
    field private static final int[]! TINT_CHECKABLE_BUTTON_LIST;
    field private static final int[]! TINT_COLOR_CONTROL_NORMAL;
    field private static final int[]! TINT_COLOR_CONTROL_STATE_LIST;
    field private androidx.collection.ArrayMap<java.lang.String,androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate>! mDelegates;
    field private final java.util.WeakHashMap<android.content.Context,androidx.collection.LongSparseArray<java.lang.ref.WeakReference<android.graphics.drawable.Drawable.ConstantState>>>! mDrawableCaches;
    field private boolean mHasCheckedVectorDrawableSetup;
    field private androidx.collection.SparseArrayCompat<java.lang.String>! mKnownDrawableIdTags;
    field private java.util.WeakHashMap<android.content.Context,androidx.collection.SparseArrayCompat<android.content.res.ColorStateList>>! mTintLists;
    field private android.util.TypedValue! mTypedValue;
  }

  @RequiresApi(11) static class AppCompatDrawableManager.AsldcInflateDelegate implements androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate {
    ctor AppCompatDrawableManager.AsldcInflateDelegate();
    method public android.graphics.drawable.Drawable! createFromXmlInner(android.content.Context, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?);
  }

  private static class AppCompatDrawableManager.AvdcInflateDelegate implements androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate {
    ctor AppCompatDrawableManager.AvdcInflateDelegate();
    method public android.graphics.drawable.Drawable! createFromXmlInner(android.content.Context, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?);
  }

  private static class AppCompatDrawableManager.ColorFilterLruCache extends androidx.collection.LruCache<java.lang.Integer,android.graphics.PorterDuffColorFilter> {
    ctor public AppCompatDrawableManager.ColorFilterLruCache(int);
    method private static int generateCacheKey(int, android.graphics.PorterDuff.Mode!);
    method android.graphics.PorterDuffColorFilter! get(int, android.graphics.PorterDuff.Mode!);
    method android.graphics.PorterDuffColorFilter! put(int, android.graphics.PorterDuff.Mode!, android.graphics.PorterDuffColorFilter!);
  }

  private static interface AppCompatDrawableManager.InflateDelegate {
    method public android.graphics.drawable.Drawable! createFromXmlInner(android.content.Context, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?);
  }

  private static class AppCompatDrawableManager.VdcInflateDelegate implements androidx.appcompat.widget.AppCompatDrawableManager.InflateDelegate {
    ctor AppCompatDrawableManager.VdcInflateDelegate();
    method public android.graphics.drawable.Drawable! createFromXmlInner(android.content.Context, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?);
  }

  public class AppCompatEditText extends android.widget.EditText implements androidx.core.view.TintableBackgroundView {
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatTextClassifierHelper! mTextClassifierHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  class AppCompatHintHelper {
    ctor private AppCompatHintHelper();
    method static android.view.inputmethod.InputConnection! onCreateInputConnection(android.view.inputmethod.InputConnection!, android.view.inputmethod.EditorInfo!, android.view.View!);
  }

  public class AppCompatImageButton extends android.widget.ImageButton implements androidx.core.view.TintableBackgroundView androidx.core.widget.TintableImageSourceView {
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatImageHelper! mImageHelper;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class AppCompatImageHelper {
    ctor public AppCompatImageHelper(android.widget.ImageView!);
    method private boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable);
    method void applySupportImageTint();
    method android.content.res.ColorStateList! getSupportImageTintList();
    method android.graphics.PorterDuff.Mode! getSupportImageTintMode();
    method boolean hasOverlappingRendering();
    method public void loadFromAttributes(android.util.AttributeSet!, int);
    method public void setImageResource(int);
    method void setInternalImageTint(android.content.res.ColorStateList!);
    method void setSupportImageTintList(android.content.res.ColorStateList!);
    method void setSupportImageTintMode(android.graphics.PorterDuff.Mode!);
    method private boolean shouldApplyFrameworkTintUsingColorFilter();
    field private androidx.appcompat.widget.TintInfo! mImageTint;
    field private androidx.appcompat.widget.TintInfo! mInternalImageTint;
    field private androidx.appcompat.widget.TintInfo! mTmpInfo;
    field private final android.widget.ImageView! mView;
  }

  public class AppCompatImageView extends android.widget.ImageView implements androidx.core.view.TintableBackgroundView androidx.core.widget.TintableImageSourceView {
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatImageHelper! mImageHelper;
  }

  public class AppCompatMultiAutoCompleteTextView extends android.widget.MultiAutoCompleteTextView implements androidx.core.view.TintableBackgroundView {
    field private static final int[]! TINT_ATTRS;
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  class AppCompatPopupWindow extends android.widget.PopupWindow {
    ctor public AppCompatPopupWindow(android.content.Context, android.util.AttributeSet?, @AttrRes int);
    ctor public AppCompatPopupWindow(android.content.Context, android.util.AttributeSet?, @AttrRes int, @StyleRes int);
    method private void init(android.content.Context!, android.util.AttributeSet!, int, int);
    method private void setSupportOverlapAnchor(boolean);
    field private static final boolean COMPAT_OVERLAP_ANCHOR;
    field private boolean mOverlapAnchor;
  }

  class AppCompatProgressBarHelper {
    ctor AppCompatProgressBarHelper(android.widget.ProgressBar!);
    method private android.graphics.drawable.shapes.Shape! getDrawableShape();
    method android.graphics.Bitmap! getSampleTile();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method private android.graphics.drawable.Drawable! tileify(android.graphics.drawable.Drawable!, boolean);
    method private android.graphics.drawable.Drawable! tileifyIndeterminate(android.graphics.drawable.Drawable!);
    field private static final int[]! TINT_ATTRS;
    field private android.graphics.Bitmap! mSampleTile;
    field private final android.widget.ProgressBar! mView;
  }

  public class AppCompatRadioButton extends android.widget.RadioButton implements androidx.core.widget.TintableCompoundButton {
    field private final androidx.appcompat.widget.AppCompatCompoundButtonHelper! mCompoundButtonHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  public class AppCompatRatingBar extends android.widget.RatingBar {
    field private final androidx.appcompat.widget.AppCompatProgressBarHelper! mAppCompatProgressBarHelper;
  }

  public class AppCompatSeekBar extends android.widget.SeekBar {
    field private final androidx.appcompat.widget.AppCompatSeekBarHelper! mAppCompatSeekBarHelper;
  }

  class AppCompatSeekBarHelper extends androidx.appcompat.widget.AppCompatProgressBarHelper {
    ctor AppCompatSeekBarHelper(android.widget.SeekBar!);
    method private void applyTickMarkTint();
    method void drawTickMarks(android.graphics.Canvas!);
    method void drawableStateChanged();
    method android.graphics.drawable.Drawable? getTickMark();
    method android.content.res.ColorStateList? getTickMarkTintList();
    method android.graphics.PorterDuff.Mode? getTickMarkTintMode();
    method void jumpDrawablesToCurrentState();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method void setTickMark(android.graphics.drawable.Drawable?);
    method void setTickMarkTintList(android.content.res.ColorStateList?);
    method void setTickMarkTintMode(android.graphics.PorterDuff.Mode?);
    field private boolean mHasTickMarkTint;
    field private boolean mHasTickMarkTintMode;
    field private android.graphics.drawable.Drawable! mTickMark;
    field private android.content.res.ColorStateList! mTickMarkTintList;
    field private android.graphics.PorterDuff.Mode! mTickMarkTintMode;
    field private final android.widget.SeekBar! mView;
  }

  public class AppCompatSpinner extends android.widget.Spinner implements androidx.core.view.TintableBackgroundView {
    method int compatMeasureContentWidth(android.widget.SpinnerAdapter!, android.graphics.drawable.Drawable!);
    field private static final int[]! ATTRS_ANDROID_SPINNERMODE;
    field private static final int MAX_ITEMS_MEASURED = 15; // 0xf
    field private static final int MODE_DIALOG = 0; // 0x0
    field private static final int MODE_DROPDOWN = 1; // 0x1
    field private static final int MODE_THEME = -1; // 0xffffffff
    field private static final String TAG = "AppCompatSpinner";
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field int mDropDownWidth;
    field private androidx.appcompat.widget.ForwardingListener! mForwardingListener;
    field androidx.appcompat.widget.AppCompatSpinner.DropdownPopup! mPopup;
    field private final android.content.Context! mPopupContext;
    field private final boolean mPopupSet;
    field private android.widget.SpinnerAdapter! mTempAdapter;
    field final android.graphics.Rect! mTempRect;
  }

  private static class AppCompatSpinner.DropDownAdapter implements android.widget.ListAdapter android.widget.SpinnerAdapter {
    ctor public AppCompatSpinner.DropDownAdapter(android.widget.SpinnerAdapter?, android.content.res.Resources.Theme?);
    field private android.widget.SpinnerAdapter! mAdapter;
    field private android.widget.ListAdapter! mListAdapter;
  }

  private class AppCompatSpinner.DropdownPopup extends androidx.appcompat.widget.ListPopupWindow {
    ctor public AppCompatSpinner.DropdownPopup(android.content.Context!, android.util.AttributeSet!, int);
    method void computeContentWidth();
    method public CharSequence! getHintText();
    method boolean isVisibleToUser(android.view.View!);
    method public void setPromptText(CharSequence!);
    field android.widget.ListAdapter! mAdapter;
    field private CharSequence! mHintText;
    field private final android.graphics.Rect! mVisibleRect;
  }

  final class AppCompatTextClassifierHelper {
    ctor AppCompatTextClassifierHelper(android.widget.TextView!);
    method @RequiresApi(api=26) public android.view.textclassifier.TextClassifier getTextClassifier();
    method @RequiresApi(api=26) public void setTextClassifier(android.view.textclassifier.TextClassifier?);
    field private android.view.textclassifier.TextClassifier? mTextClassifier;
    field private android.widget.TextView mTextView;
  }

  class AppCompatTextHelper {
    ctor AppCompatTextHelper(android.widget.TextView!);
    method private void applyCompoundDrawableTint(android.graphics.drawable.Drawable!, androidx.appcompat.widget.TintInfo!);
    method void applyCompoundDrawablesTints();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void autoSizeText();
    method private static androidx.appcompat.widget.TintInfo! createTintInfo(android.content.Context!, androidx.appcompat.widget.AppCompatDrawableManager!, int);
    method int getAutoSizeMaxTextSize();
    method int getAutoSizeMinTextSize();
    method int getAutoSizeStepGranularity();
    method int[]! getAutoSizeTextAvailableSizes();
    method int getAutoSizeTextType();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) boolean isAutoSizeEnabled();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method void onAsyncTypefaceReceived(java.lang.ref.WeakReference<android.widget.TextView>!, android.graphics.Typeface!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void onLayout(boolean, int, int, int, int);
    method void onSetTextAppearance(android.content.Context!, int);
    method void setAllCaps(boolean);
    method void setAutoSizeTextTypeUniformWithConfiguration(int, int, int, int) throws java.lang.IllegalArgumentException;
    method void setAutoSizeTextTypeUniformWithPresetSizes(int[], int) throws java.lang.IllegalArgumentException;
    method void setAutoSizeTextTypeWithDefaults(int);
    method private void setCompoundDrawables(android.graphics.drawable.Drawable!, android.graphics.drawable.Drawable!, android.graphics.drawable.Drawable!, android.graphics.drawable.Drawable!, android.graphics.drawable.Drawable!, android.graphics.drawable.Drawable!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setTextSize(int, float);
    method private void setTextSizeInternal(int, float);
    method private void updateTypefaceAndStyle(android.content.Context!, androidx.appcompat.widget.TintTypedArray!);
    field private static final int MONOSPACE = 3; // 0x3
    field private static final int SANS = 1; // 0x1
    field private static final int SERIF = 2; // 0x2
    field private boolean mAsyncFontPending;
    field private final androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper mAutoSizeTextHelper;
    field private androidx.appcompat.widget.TintInfo! mDrawableBottomTint;
    field private androidx.appcompat.widget.TintInfo! mDrawableEndTint;
    field private androidx.appcompat.widget.TintInfo! mDrawableLeftTint;
    field private androidx.appcompat.widget.TintInfo! mDrawableRightTint;
    field private androidx.appcompat.widget.TintInfo! mDrawableStartTint;
    field private androidx.appcompat.widget.TintInfo! mDrawableTopTint;
    field private android.graphics.Typeface! mFontTypeface;
    field private int mStyle;
    field private final android.widget.TextView! mView;
  }

  public class AppCompatTextView extends android.widget.TextView implements androidx.core.widget.AutoSizeableTextView androidx.core.view.TintableBackgroundView {
    method private void consumeTextFutureAndSetBlocking();
    field private final androidx.appcompat.widget.AppCompatBackgroundHelper! mBackgroundTintHelper;
    field private java.util.concurrent.Future<androidx.core.text.PrecomputedTextCompat>? mPrecomputedTextFuture;
    field private final androidx.appcompat.widget.AppCompatTextClassifierHelper! mTextClassifierHelper;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  class AppCompatTextViewAutoSizeHelper {
    ctor AppCompatTextViewAutoSizeHelper(android.widget.TextView!);
    method private static <T> T! accessAndReturnWithDefault(Object, String, T);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void autoSizeText();
    method private int[]! cleanupAutoSizePresetSizes(int[]!);
    method private void clearAutoSizeConfiguration();
    method @VisibleForTesting android.text.StaticLayout! createLayout(CharSequence!, android.text.Layout.Alignment!, int, int);
    method @RequiresApi(23) private android.text.StaticLayout! createStaticLayoutForMeasuring(CharSequence!, android.text.Layout.Alignment!, int, int);
    method private android.text.StaticLayout! createStaticLayoutForMeasuringPre16(CharSequence!, android.text.Layout.Alignment!, int);
    method @RequiresApi(16) private android.text.StaticLayout! createStaticLayoutForMeasuringPre23(CharSequence!, android.text.Layout.Alignment!, int);
    method private int findLargestTextSizeWhichFits(android.graphics.RectF!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) int getAutoSizeMaxTextSize();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) int getAutoSizeMinTextSize();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) int getAutoSizeStepGranularity();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) int[]! getAutoSizeTextAvailableSizes();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) int getAutoSizeTextType();
    method private static java.lang.reflect.Field? getTextViewField(String);
    method private static java.lang.reflect.Method? getTextViewMethod(String);
    method @VisibleForTesting void initTempTextPaint(int);
    method private static <T> T! invokeAndReturnWithDefault(Object, String, T);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) boolean isAutoSizeEnabled();
    method void loadFromAttributes(android.util.AttributeSet!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setAutoSizeTextTypeUniformWithConfiguration(int, int, int, int) throws java.lang.IllegalArgumentException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setAutoSizeTextTypeUniformWithPresetSizes(int[], int) throws java.lang.IllegalArgumentException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setAutoSizeTextTypeWithDefaults(int);
    method private void setRawTextSize(float);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) void setTextSizeInternal(int, float);
    method private boolean setupAutoSizeText();
    method private void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray!);
    method private boolean setupAutoSizeUniformPresetSizesConfiguration();
    method private boolean suggestedSizeFitsInSpace(int, android.graphics.RectF!);
    method private boolean supportsAutoSizeText();
    method private void validateAndSetAutoSizeTextTypeUniformConfiguration(float, float, float) throws java.lang.IllegalArgumentException;
    field private static final int DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX = 1; // 0x1
    field private static final int DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP = 112; // 0x70
    field private static final int DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP = 12; // 0xc
    field private static final String TAG = "ACTVAutoSizeHelper";
    field private static final android.graphics.RectF! TEMP_RECTF;
    field static final float UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE = -1.0f;
    field private static final int VERY_WIDE = 1048576; // 0x100000
    field private float mAutoSizeMaxTextSizeInPx;
    field private float mAutoSizeMinTextSizeInPx;
    field private float mAutoSizeStepGranularityInPx;
    field private int[]! mAutoSizeTextSizesInPx;
    field private int mAutoSizeTextType;
    field private final android.content.Context! mContext;
    field private boolean mHasPresetAutoSizeValues;
    field private boolean mNeedsAutoSizeText;
    field private android.text.TextPaint! mTempTextPaint;
    field private final android.widget.TextView! mTextView;
    field private static java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.reflect.Field>! sTextViewFieldByNameCache;
    field private static java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.reflect.Method>! sTextViewMethodByNameCache;
  }

  public class AppCompatToggleButton extends android.widget.ToggleButton {
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ButtonBarLayout extends android.widget.LinearLayout {
    ctor public ButtonBarLayout(android.content.Context!, android.util.AttributeSet!);
    method private int getNextVisibleChildIndex(int);
    method private boolean isStacked();
    method public void setAllowStacking(boolean);
    method private void setStacked(boolean);
    field private static final int PEEK_BUTTON_DP = 16; // 0x10
    field private boolean mAllowStacking;
    field private int mLastWidthSize;
    field private int mMinimumHeight;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public class ContentFrameLayout extends android.widget.FrameLayout {
    ctor public ContentFrameLayout(android.content.Context!);
    ctor public ContentFrameLayout(android.content.Context!, android.util.AttributeSet!);
    ctor public ContentFrameLayout(android.content.Context!, android.util.AttributeSet!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void dispatchFitSystemWindows(android.graphics.Rect!);
    method public android.util.TypedValue! getFixedHeightMajor();
    method public android.util.TypedValue! getFixedHeightMinor();
    method public android.util.TypedValue! getFixedWidthMajor();
    method public android.util.TypedValue! getFixedWidthMinor();
    method public android.util.TypedValue! getMinWidthMajor();
    method public android.util.TypedValue! getMinWidthMinor();
    method public void setAttachListener(androidx.appcompat.widget.ContentFrameLayout.OnAttachListener!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setDecorPadding(int, int, int, int);
    field private androidx.appcompat.widget.ContentFrameLayout.OnAttachListener! mAttachListener;
    field private final android.graphics.Rect! mDecorPadding;
    field private android.util.TypedValue! mFixedHeightMajor;
    field private android.util.TypedValue! mFixedHeightMinor;
    field private android.util.TypedValue! mFixedWidthMajor;
    field private android.util.TypedValue! mFixedWidthMinor;
    field private android.util.TypedValue! mMinWidthMajor;
    field private android.util.TypedValue! mMinWidthMinor;
  }

  public static interface ContentFrameLayout.OnAttachListener {
    method public void onAttachedFromWindow();
    method public void onDetachedFromWindow();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface DecorContentParent {
    method public boolean canShowOverflowMenu();
    method public void dismissPopups();
    method public CharSequence! getTitle();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initFeature(int);
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public void restoreToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveToolbarHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuPrepared();
    method public void setUiOptions(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public boolean showOverflowMenu();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface DecorToolbar {
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void collapseActionView();
    method public void dismissPopupMenus();
    method public android.content.Context! getContext();
    method public android.view.View! getCustomView();
    method public int getDisplayOptions();
    method public int getDropdownItemCount();
    method public int getDropdownSelectedPosition();
    method public int getHeight();
    method public android.view.Menu! getMenu();
    method public int getNavigationMode();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public android.view.ViewGroup! getViewGroup();
    method public int getVisibility();
    method public boolean hasEmbeddedTabs();
    method public boolean hasExpandedActionView();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initIndeterminateProgress();
    method public void initProgress();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isTitleTruncated();
    method public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable!);
    method public void setCollapsible(boolean);
    method public void setCustomView(android.view.View!);
    method public void setDefaultNavigationContentDescription(int);
    method public void setDefaultNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setDisplayOptions(int);
    method public void setDropdownParams(android.widget.SpinnerAdapter!, android.widget.AdapterView.OnItemSelectedListener!);
    method public void setDropdownSelectedPosition(int);
    method public void setEmbeddedTabView(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setHomeButtonEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setLogo(android.graphics.drawable.Drawable!);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setMenuPrepared();
    method public void setNavigationContentDescription(CharSequence!);
    method public void setNavigationContentDescription(int);
    method public void setNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setNavigationIcon(int);
    method public void setNavigationMode(int);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method public void setVisibility(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean showOverflowMenu();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class DialogTitle extends androidx.appcompat.widget.AppCompatTextView {
    ctor public DialogTitle(android.content.Context!, android.util.AttributeSet!, int);
    ctor public DialogTitle(android.content.Context!, android.util.AttributeSet!);
    ctor public DialogTitle(android.content.Context!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class DrawableUtils {
    ctor private DrawableUtils();
    method public static boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable);
    method static void fixDrawable(android.graphics.drawable.Drawable);
    method private static void fixVectorDrawableTinting(android.graphics.drawable.Drawable!);
    method public static android.graphics.Rect! getOpticalBounds(android.graphics.drawable.Drawable!);
    method public static android.graphics.PorterDuff.Mode! parseTintMode(int, android.graphics.PorterDuff.Mode!);
    field public static final android.graphics.Rect! INSETS_NONE;
    field private static final String TAG = "DrawableUtils";
    field private static final String VECTOR_DRAWABLE_CLAZZ_NAME = "android.graphics.drawable.VectorDrawable";
    field private static Class<?>! sInsetsClazz;
  }

  class DropDownListView extends android.widget.ListView {
    ctor DropDownListView(android.content.Context!, boolean);
    method private void clearPressedItem();
    method private void clickPressedItem(android.view.View!, int);
    method private void drawSelectorCompat(android.graphics.Canvas!);
    method public int lookForSelectablePosition(int, boolean);
    method public int measureHeightOfChildrenCompat(int, int, int, int, int);
    method public boolean onForwardedEvent(android.view.MotionEvent!, int);
    method private void positionSelectorCompat(int, android.view.View!);
    method private void positionSelectorLikeFocusCompat(int, android.view.View!);
    method private void positionSelectorLikeTouchCompat(int, android.view.View!, float, float);
    method void setListSelectionHidden(boolean);
    method private void setPressedItem(android.view.View!, int, float, float);
    method private void setSelectorEnabled(boolean);
    method private boolean touchModeDrawsInPressedStateCompat();
    method private void updateSelectorStateCompat();
    field public static final int INVALID_POSITION = -1; // 0xffffffff
    field public static final int NO_POSITION = -1; // 0xffffffff
    field private androidx.core.view.ViewPropertyAnimatorCompat! mClickAnimation;
    field private boolean mDrawsInPressedState;
    field private boolean mHijackFocus;
    field private java.lang.reflect.Field! mIsChildViewEnabled;
    field private boolean mListSelectionHidden;
    field private int mMotionPosition;
    field androidx.appcompat.widget.DropDownListView.ResolveHoverRunnable! mResolveHoverRunnable;
    field private androidx.core.widget.ListViewAutoScrollHelper! mScrollHelper;
    field private int mSelectionBottomPadding;
    field private int mSelectionLeftPadding;
    field private int mSelectionRightPadding;
    field private int mSelectionTopPadding;
    field private androidx.appcompat.widget.DropDownListView.GateKeeperDrawable! mSelector;
    field private final android.graphics.Rect! mSelectorRect;
  }

  private static class DropDownListView.GateKeeperDrawable extends androidx.appcompat.graphics.drawable.DrawableWrapper {
    ctor DropDownListView.GateKeeperDrawable(android.graphics.drawable.Drawable!);
    method void setEnabled(boolean);
    field private boolean mEnabled;
  }

  private class DropDownListView.ResolveHoverRunnable implements java.lang.Runnable {
    ctor DropDownListView.ResolveHoverRunnable();
    method public void cancel();
    method public void post();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class FitWindowsFrameLayout extends android.widget.FrameLayout implements androidx.appcompat.widget.FitWindowsViewGroup {
    ctor public FitWindowsFrameLayout(android.content.Context!);
    ctor public FitWindowsFrameLayout(android.content.Context!, android.util.AttributeSet!);
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
    field private androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener! mListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class FitWindowsLinearLayout extends android.widget.LinearLayout implements androidx.appcompat.widget.FitWindowsViewGroup {
    ctor public FitWindowsLinearLayout(android.content.Context!);
    ctor public FitWindowsLinearLayout(android.content.Context!, android.util.AttributeSet!);
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
    field private androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener! mListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface FitWindowsViewGroup {
    method public void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup.OnFitSystemWindowsListener!);
  }

  public static interface FitWindowsViewGroup.OnFitSystemWindowsListener {
    method public void onFitSystemWindows(android.graphics.Rect!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class ForwardingListener implements android.view.View.OnAttachStateChangeListener android.view.View.OnTouchListener {
    ctor public ForwardingListener(android.view.View!);
    method private void clearCallbacks();
    method public abstract androidx.appcompat.view.menu.ShowableListMenu! getPopup();
    method protected boolean onForwardingStarted();
    method protected boolean onForwardingStopped();
    method void onLongPress();
    method private boolean onTouchForwarded(android.view.MotionEvent!);
    method private boolean onTouchObserved(android.view.MotionEvent!);
    method private static boolean pointInView(android.view.View!, float, float, float);
    method private boolean toGlobalMotionEvent(android.view.View!, android.view.MotionEvent!);
    method private boolean toLocalMotionEvent(android.view.View!, android.view.MotionEvent!);
    field private int mActivePointerId;
    field private Runnable! mDisallowIntercept;
    field private boolean mForwarding;
    field private final int mLongPressTimeout;
    field private final float mScaledTouchSlop;
    field final android.view.View! mSrc;
    field private final int mTapTimeout;
    field private final int[]! mTmpLocation;
    field private Runnable! mTriggerLongPress;
  }

  private class ForwardingListener.DisallowIntercept implements java.lang.Runnable {
    ctor ForwardingListener.DisallowIntercept();
  }

  private class ForwardingListener.TriggerLongPress implements java.lang.Runnable {
    ctor ForwardingListener.TriggerLongPress();
  }

  public class LinearLayoutCompat extends android.view.ViewGroup {
    method void drawDividersHorizontal(android.graphics.Canvas!);
    method void drawDividersVertical(android.graphics.Canvas!);
    method void drawHorizontalDivider(android.graphics.Canvas!, int);
    method void drawVerticalDivider(android.graphics.Canvas!, int);
    method private void forceUniformHeight(int, int);
    method private void forceUniformWidth(int, int);
    method int getChildrenSkipCount(android.view.View!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int getDividerWidth();
    method int getLocationOffset(android.view.View!);
    method int getNextLocationOffset(android.view.View!);
    method android.view.View! getVirtualChildAt(int);
    method int getVirtualChildCount();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) protected boolean hasDividerBeforeChildAt(int);
    method void layoutHorizontal(int, int, int, int);
    method void layoutVertical(int, int, int, int);
    method void measureChildBeforeLayout(android.view.View!, int, int, int, int, int);
    method void measureHorizontal(int, int);
    method int measureNullChild(int);
    method void measureVertical(int, int);
    method private void setChildFrame(android.view.View!, int, int, int, int);
    field private static final int INDEX_BOTTOM = 2; // 0x2
    field private static final int INDEX_CENTER_VERTICAL = 0; // 0x0
    field private static final int INDEX_FILL = 3; // 0x3
    field private static final int INDEX_TOP = 1; // 0x1
    field private static final int VERTICAL_GRAVITY_COUNT = 4; // 0x4
    field private boolean mBaselineAligned;
    field private int mBaselineAlignedChildIndex;
    field private int mBaselineChildTop;
    field private android.graphics.drawable.Drawable! mDivider;
    field private int mDividerHeight;
    field private int mDividerPadding;
    field private int mDividerWidth;
    field private int mGravity;
    field private int[]! mMaxAscent;
    field private int[]! mMaxDescent;
    field private int mOrientation;
    field private int mShowDividers;
    field private int mTotalLength;
    field private boolean mUseLargestChild;
    field private float mWeightSum;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(flag=true, value={androidx.appcompat.widget.LinearLayoutCompat.SHOW_DIVIDER_NONE, androidx.appcompat.widget.LinearLayoutCompat.SHOW_DIVIDER_BEGINNING, androidx.appcompat.widget.LinearLayoutCompat.SHOW_DIVIDER_MIDDLE, androidx.appcompat.widget.LinearLayoutCompat.SHOW_DIVIDER_END}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LinearLayoutCompat.DividerMode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.appcompat.widget.LinearLayoutCompat.HORIZONTAL, androidx.appcompat.widget.LinearLayoutCompat.VERTICAL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LinearLayoutCompat.OrientationMode {
  }

  public class ListPopupWindow implements androidx.appcompat.view.menu.ShowableListMenu {
    method private int buildDropDown();
    method androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context!, boolean);
    method private int getMaxAvailableHeight(android.view.View!, int, boolean);
    method private static boolean isConfirmKey(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isDropDownAlwaysVisible();
    method private void removePromptView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setDropDownAlwaysVisible(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setEpicenterBounds(android.graphics.Rect!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setForceIgnoreOutsideTouch(boolean);
    method void setListItemExpandMax(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setOverlapAnchor(boolean);
    method private void setPopupClipToScreenEnabled(boolean);
    field private static final boolean DEBUG = false;
    field static final int EXPAND_LIST_TIMEOUT = 250; // 0xfa
    field private static final String TAG = "ListPopupWindow";
    field private android.widget.ListAdapter! mAdapter;
    field private android.content.Context! mContext;
    field private boolean mDropDownAlwaysVisible;
    field private android.view.View! mDropDownAnchorView;
    field private int mDropDownGravity;
    field private int mDropDownHeight;
    field private int mDropDownHorizontalOffset;
    field androidx.appcompat.widget.DropDownListView! mDropDownList;
    field private android.graphics.drawable.Drawable! mDropDownListHighlight;
    field private int mDropDownVerticalOffset;
    field private boolean mDropDownVerticalOffsetSet;
    field private int mDropDownWidth;
    field private int mDropDownWindowLayoutType;
    field private android.graphics.Rect! mEpicenterBounds;
    field private boolean mForceIgnoreOutsideTouch;
    field final android.os.Handler! mHandler;
    field private final androidx.appcompat.widget.ListPopupWindow.ListSelectorHider! mHideSelector;
    field private boolean mIsAnimatedFromAnchor;
    field private android.widget.AdapterView.OnItemClickListener! mItemClickListener;
    field private android.widget.AdapterView.OnItemSelectedListener! mItemSelectedListener;
    field int mListItemExpandMaximum;
    field private boolean mModal;
    field private android.database.DataSetObserver! mObserver;
    field private boolean mOverlapAnchor;
    field private boolean mOverlapAnchorSet;
    field android.widget.PopupWindow! mPopup;
    field private int mPromptPosition;
    field private android.view.View! mPromptView;
    field final androidx.appcompat.widget.ListPopupWindow.ResizePopupRunnable! mResizePopupRunnable;
    field private final androidx.appcompat.widget.ListPopupWindow.PopupScrollListener! mScrollListener;
    field private Runnable! mShowDropDownRunnable;
    field private final android.graphics.Rect! mTempRect;
    field private final androidx.appcompat.widget.ListPopupWindow.PopupTouchInterceptor! mTouchInterceptor;
    field private static java.lang.reflect.Method! sClipToWindowEnabledMethod;
    field private static java.lang.reflect.Method! sGetMaxAvailableHeightMethod;
    field private static java.lang.reflect.Method! sSetEpicenterBoundsMethod;
  }

  private class ListPopupWindow.ListSelectorHider implements java.lang.Runnable {
    ctor ListPopupWindow.ListSelectorHider();
  }

  private class ListPopupWindow.PopupDataSetObserver extends android.database.DataSetObserver {
    ctor ListPopupWindow.PopupDataSetObserver();
  }

  private class ListPopupWindow.PopupScrollListener implements android.widget.ListView.OnScrollListener {
    ctor ListPopupWindow.PopupScrollListener();
  }

  private class ListPopupWindow.PopupTouchInterceptor implements android.view.View.OnTouchListener {
    ctor ListPopupWindow.PopupTouchInterceptor();
  }

  private class ListPopupWindow.ResizePopupRunnable implements java.lang.Runnable {
    ctor ListPopupWindow.ResizePopupRunnable();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface MenuItemHoverListener {
    method public void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MenuPopupWindow extends androidx.appcompat.widget.ListPopupWindow implements androidx.appcompat.widget.MenuItemHoverListener {
    ctor public MenuPopupWindow(android.content.Context!, android.util.AttributeSet!, int, int);
    method androidx.appcompat.widget.DropDownListView! createDropDownListView(android.content.Context!, boolean);
    method public void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder, android.view.MenuItem);
    method public void setEnterTransition(Object!);
    method public void setExitTransition(Object!);
    method public void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener!);
    method public void setTouchModal(boolean);
    field private static final String TAG = "MenuPopupWindow";
    field private androidx.appcompat.widget.MenuItemHoverListener! mHoverListener;
    field private static java.lang.reflect.Method! sSetTouchModalMethod;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class MenuPopupWindow.MenuDropDownListView extends androidx.appcompat.widget.DropDownListView {
    ctor public MenuPopupWindow.MenuDropDownListView(android.content.Context!, boolean);
    method public void clearSelection();
    method public void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener!);
    field final int mAdvanceKey;
    field private androidx.appcompat.widget.MenuItemHoverListener! mHoverListener;
    field private android.view.MenuItem! mHoveredMenuItem;
    field final int mRetreatKey;
  }

  public class PopupMenu {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) android.widget.ListView! getMenuListView();
    field private final android.view.View! mAnchor;
    field private final android.content.Context! mContext;
    field private android.view.View.OnTouchListener! mDragListener;
    field private final androidx.appcompat.view.menu.MenuBuilder! mMenu;
    field androidx.appcompat.widget.PopupMenu.OnMenuItemClickListener! mMenuItemClickListener;
    field androidx.appcompat.widget.PopupMenu.OnDismissListener! mOnDismissListener;
    field final androidx.appcompat.view.menu.MenuPopupHelper! mPopup;
  }

  class ResourcesWrapper extends android.content.res.Resources {
    ctor public ResourcesWrapper(android.content.res.Resources!);
    field private final android.content.res.Resources! mResources;
  }

  class RtlSpacingHelper {
    ctor RtlSpacingHelper();
    method public int getEnd();
    method public int getLeft();
    method public int getRight();
    method public int getStart();
    method public void setAbsolute(int, int);
    method public void setDirection(boolean);
    method public void setRelative(int, int);
    field public static final int UNDEFINED = -2147483648; // 0x80000000
    field private int mEnd;
    field private int mExplicitLeft;
    field private int mExplicitRight;
    field private boolean mIsRelative;
    field private boolean mIsRtl;
    field private int mLeft;
    field private int mRight;
    field private int mStart;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ScrollingTabContainerView extends android.widget.HorizontalScrollView implements android.widget.AdapterView.OnItemSelectedListener {
    ctor public ScrollingTabContainerView(android.content.Context!);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, boolean);
    method public void addTab(androidx.appcompat.app.ActionBar.Tab!, int, boolean);
    method public void animateToTab(int);
    method public void animateToVisibility(int);
    method private android.widget.Spinner! createSpinner();
    method private androidx.appcompat.widget.LinearLayoutCompat! createTabLayout();
    method androidx.appcompat.widget.ScrollingTabContainerView.TabView! createTabView(androidx.appcompat.app.ActionBar.Tab!, boolean);
    method private boolean isCollapsed();
    method private void performCollapse();
    method private boolean performExpand();
    method public void removeAllTabs();
    method public void removeTabAt(int);
    method public void setAllowCollapse(boolean);
    method public void setContentHeight(int);
    method public void setTabSelected(int);
    method public void updateTab(int);
    field private static final int FADE_DURATION = 200; // 0xc8
    field private static final String TAG = "ScrollingTabContainerView";
    field private boolean mAllowCollapse;
    field private int mContentHeight;
    field int mMaxTabWidth;
    field private int mSelectedTabIndex;
    field int mStackedTabMaxWidth;
    field private androidx.appcompat.widget.ScrollingTabContainerView.TabClickListener! mTabClickListener;
    field androidx.appcompat.widget.LinearLayoutCompat! mTabLayout;
    field Runnable! mTabSelector;
    field private android.widget.Spinner! mTabSpinner;
    field protected final androidx.appcompat.widget.ScrollingTabContainerView.VisibilityAnimListener! mVisAnimListener;
    field protected android.view.ViewPropertyAnimator! mVisibilityAnim;
    field private static final android.view.animation.Interpolator! sAlphaInterpolator;
  }

  private class ScrollingTabContainerView.TabAdapter extends android.widget.BaseAdapter {
    ctor ScrollingTabContainerView.TabAdapter();
  }

  private class ScrollingTabContainerView.TabClickListener implements android.view.View.OnClickListener {
    ctor ScrollingTabContainerView.TabClickListener();
  }

  private class ScrollingTabContainerView.TabView extends android.widget.LinearLayout {
    ctor public ScrollingTabContainerView.TabView(android.content.Context!, androidx.appcompat.app.ActionBar.Tab!, boolean);
    method public void bindTab(androidx.appcompat.app.ActionBar.Tab!);
    method public androidx.appcompat.app.ActionBar.Tab! getTab();
    method public void update();
    field private final int[]! BG_ATTRS;
    field private android.view.View! mCustomView;
    field private android.widget.ImageView! mIconView;
    field private androidx.appcompat.app.ActionBar.Tab! mTab;
    field private android.widget.TextView! mTextView;
  }

  protected class ScrollingTabContainerView.VisibilityAnimListener extends android.animation.AnimatorListenerAdapter {
    ctor protected ScrollingTabContainerView.VisibilityAnimListener();
    method public androidx.appcompat.widget.ScrollingTabContainerView.VisibilityAnimListener! withFinalVisibility(android.view.ViewPropertyAnimator!, int);
    field private boolean mCanceled;
    field private int mFinalVisibility;
  }

  public class SearchView extends androidx.appcompat.widget.LinearLayoutCompat implements androidx.appcompat.view.CollapsibleActionView {
    method void adjustDropDownSizeAndPosition();
    method private android.content.Intent! createIntent(String!, android.net.Uri!, String!, String!, int, String!);
    method private android.content.Intent! createIntentFromSuggestion(android.database.Cursor!, int, String!);
    method private android.content.Intent! createVoiceAppSearchIntent(android.content.Intent!, android.app.SearchableInfo!);
    method private android.content.Intent! createVoiceWebSearchIntent(android.content.Intent!, android.app.SearchableInfo!);
    method private void dismissSuggestions();
    method void forceSuggestionQuery();
    method private void getChildBoundsWithinSearchView(android.view.View!, android.graphics.Rect!);
    method private CharSequence! getDecoratedHint(CharSequence!);
    method private int getPreferredHeight();
    method private int getPreferredWidth();
    method int getSuggestionCommitIconResId();
    method int getSuggestionRowLayout();
    method private boolean hasVoiceSearch();
    method static boolean isLandscapeMode(android.content.Context!);
    method private boolean isSubmitAreaEnabled();
    method private void launchIntent(android.content.Intent!);
    method void launchQuerySearch(int, String!, String!);
    method private boolean launchSuggestion(int, int, String!);
    method void onCloseClicked();
    method boolean onItemClicked(int, int, String!);
    method boolean onItemSelected(int);
    method void onQueryRefine(CharSequence!);
    method void onSearchClicked();
    method void onSubmitQuery();
    method boolean onSuggestionsKey(android.view.View!, int, android.view.KeyEvent!);
    method void onTextChanged(CharSequence!);
    method void onTextFocusChanged();
    method void onVoiceClicked();
    method private void postUpdateFocusedState();
    method private void rewriteQueryFromSuggestion(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setAppSearchData(android.os.Bundle!);
    method private void setQuery(CharSequence!);
    method private void updateCloseButton();
    method void updateFocusedState();
    method private void updateQueryHint();
    method private void updateSearchAutoComplete();
    method private void updateSubmitArea();
    method private void updateSubmitButton(boolean);
    method private void updateViewsVisibility(boolean);
    method private void updateVoiceButton(boolean);
    field static final boolean DBG = false;
    field static final androidx.appcompat.widget.SearchView.AutoCompleteTextViewReflector! HIDDEN_METHOD_INVOKER;
    field private static final String IME_OPTION_NO_MICROPHONE = "nm";
    field static final String LOG_TAG = "SearchView";
    field private android.os.Bundle! mAppSearchData;
    field private boolean mClearingFocus;
    field final android.widget.ImageView! mCloseButton;
    field private final android.widget.ImageView! mCollapsedIcon;
    field private int mCollapsedImeOptions;
    field private final CharSequence! mDefaultQueryHint;
    field private final android.view.View! mDropDownAnchor;
    field private boolean mExpandedInActionView;
    field final android.widget.ImageView! mGoButton;
    field private boolean mIconified;
    field private boolean mIconifiedByDefault;
    field private int mMaxWidth;
    field private CharSequence! mOldQueryText;
    field private final android.view.View.OnClickListener! mOnClickListener;
    field private androidx.appcompat.widget.SearchView.OnCloseListener! mOnCloseListener;
    field private final android.widget.TextView.OnEditorActionListener! mOnEditorActionListener;
    field private final android.widget.AdapterView.OnItemClickListener! mOnItemClickListener;
    field private final android.widget.AdapterView.OnItemSelectedListener! mOnItemSelectedListener;
    field private androidx.appcompat.widget.SearchView.OnQueryTextListener! mOnQueryChangeListener;
    field android.view.View.OnFocusChangeListener! mOnQueryTextFocusChangeListener;
    field private android.view.View.OnClickListener! mOnSearchClickListener;
    field private androidx.appcompat.widget.SearchView.OnSuggestionListener! mOnSuggestionListener;
    field private final java.util.WeakHashMap<java.lang.String,android.graphics.drawable.Drawable.ConstantState>! mOutsideDrawablesCache;
    field private CharSequence! mQueryHint;
    field private boolean mQueryRefinement;
    field private Runnable! mReleaseCursorRunnable;
    field final android.widget.ImageView! mSearchButton;
    field private final android.view.View! mSearchEditFrame;
    field private final android.graphics.drawable.Drawable! mSearchHintIcon;
    field private final android.view.View! mSearchPlate;
    field final androidx.appcompat.widget.SearchView.SearchAutoComplete! mSearchSrcTextView;
    field private android.graphics.Rect! mSearchSrcTextViewBounds;
    field private android.graphics.Rect! mSearchSrtTextViewBoundsExpanded;
    field android.app.SearchableInfo! mSearchable;
    field private final android.view.View! mSubmitArea;
    field private boolean mSubmitButtonEnabled;
    field private final int mSuggestionCommitIconResId;
    field private final int mSuggestionRowLayout;
    field androidx.cursoradapter.widget.CursorAdapter! mSuggestionsAdapter;
    field private int[]! mTemp;
    field private int[]! mTemp2;
    field android.view.View.OnKeyListener! mTextKeyListener;
    field private android.text.TextWatcher! mTextWatcher;
    field private androidx.appcompat.widget.SearchView.UpdatableTouchDelegate! mTouchDelegate;
    field private final Runnable! mUpdateDrawableStateRunnable;
    field private CharSequence! mUserQuery;
    field private final android.content.Intent! mVoiceAppSearchIntent;
    field final android.widget.ImageView! mVoiceButton;
    field private boolean mVoiceButtonEnabled;
    field private final android.content.Intent! mVoiceWebSearchIntent;
  }

  private static class SearchView.AutoCompleteTextViewReflector {
    ctor SearchView.AutoCompleteTextViewReflector();
    method void doAfterTextChanged(android.widget.AutoCompleteTextView!);
    method void doBeforeTextChanged(android.widget.AutoCompleteTextView!);
    method void ensureImeVisible(android.widget.AutoCompleteTextView!, boolean);
    field private java.lang.reflect.Method! doAfterTextChanged;
    field private java.lang.reflect.Method! doBeforeTextChanged;
    field private java.lang.reflect.Method! ensureImeVisible;
    field private java.lang.reflect.Method! showSoftInputUnchecked;
  }

  static class SearchView.SavedState extends androidx.customview.view.AbsSavedState {
    ctor SearchView.SavedState(android.os.Parcelable!);
    ctor public SearchView.SavedState(android.os.Parcel!, ClassLoader!);
    field public static final android.os.Parcelable.Creator<androidx.appcompat.widget.SearchView.SavedState>! CREATOR;
    field boolean isIconified;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class SearchView.SearchAutoComplete extends androidx.appcompat.widget.AppCompatAutoCompleteTextView {
    ctor public SearchView.SearchAutoComplete(android.content.Context!);
    ctor public SearchView.SearchAutoComplete(android.content.Context!, android.util.AttributeSet!);
    ctor public SearchView.SearchAutoComplete(android.content.Context!, android.util.AttributeSet!, int);
    method private int getSearchViewTextMinWidthDp();
    method boolean isEmpty();
    method void setImeVisibility(boolean);
    method void setSearchView(androidx.appcompat.widget.SearchView!);
    method void showSoftInputIfNecessary();
    field private boolean mHasPendingShowSoftInputRequest;
    field final Runnable! mRunShowSoftInputIfNecessary;
    field private androidx.appcompat.widget.SearchView! mSearchView;
    field private int mThreshold;
  }

  private static class SearchView.UpdatableTouchDelegate extends android.view.TouchDelegate {
    ctor public SearchView.UpdatableTouchDelegate(android.graphics.Rect!, android.graphics.Rect!, android.view.View!);
    method public void setBounds(android.graphics.Rect!, android.graphics.Rect!);
    field private final android.graphics.Rect! mActualBounds;
    field private boolean mDelegateTargeted;
    field private final android.view.View! mDelegateView;
    field private final int mSlop;
    field private final android.graphics.Rect! mSlopBounds;
    field private final android.graphics.Rect! mTargetBounds;
  }

  public class ShareActionProvider extends androidx.core.view.ActionProvider {
    method private void setActivityChooserPolicyIfNeeded();
    method void updateIntent(android.content.Intent!);
    field private static final int DEFAULT_INITIAL_ACTIVITY_COUNT = 4; // 0x4
    field final android.content.Context! mContext;
    field private int mMaxShownActivityCount;
    field private androidx.appcompat.widget.ActivityChooserModel.OnChooseActivityListener! mOnChooseActivityListener;
    field private final androidx.appcompat.widget.ShareActionProvider.ShareMenuItemOnMenuItemClickListener! mOnMenuItemClickListener;
    field androidx.appcompat.widget.ShareActionProvider.OnShareTargetSelectedListener! mOnShareTargetSelectedListener;
    field String! mShareHistoryFileName;
  }

  private class ShareActionProvider.ShareActivityChooserModelPolicy implements androidx.appcompat.widget.ActivityChooserModel.OnChooseActivityListener {
    ctor ShareActionProvider.ShareActivityChooserModelPolicy();
    method public boolean onChooseActivity(androidx.appcompat.widget.ActivityChooserModel!, android.content.Intent!);
  }

  private class ShareActionProvider.ShareMenuItemOnMenuItemClickListener implements android.view.MenuItem.OnMenuItemClickListener {
    ctor ShareActionProvider.ShareMenuItemOnMenuItemClickListener();
  }

  class SuggestionsAdapter extends androidx.cursoradapter.widget.ResourceCursorAdapter implements android.view.View.OnClickListener {
    ctor public SuggestionsAdapter(android.content.Context!, androidx.appcompat.widget.SearchView!, android.app.SearchableInfo!, java.util.WeakHashMap<java.lang.String,android.graphics.drawable.Drawable.ConstantState>!);
    method private android.graphics.drawable.Drawable! checkIconCache(String!);
    method public void close();
    method private CharSequence! formatUrl(CharSequence!);
    method private android.graphics.drawable.Drawable! getActivityIcon(android.content.ComponentName!);
    method private android.graphics.drawable.Drawable! getActivityIconWithCache(android.content.ComponentName!);
    method public static String! getColumnString(android.database.Cursor!, String!);
    method private android.graphics.drawable.Drawable! getDefaultIcon1(android.database.Cursor!);
    method private android.graphics.drawable.Drawable! getDrawable(android.net.Uri!);
    method android.graphics.drawable.Drawable! getDrawableFromResourceUri(android.net.Uri!) throws java.io.FileNotFoundException;
    method private android.graphics.drawable.Drawable! getDrawableFromResourceValue(String!);
    method private android.graphics.drawable.Drawable! getIcon1(android.database.Cursor!);
    method private android.graphics.drawable.Drawable! getIcon2(android.database.Cursor!);
    method public int getQueryRefinement();
    method android.database.Cursor! getSearchManagerSuggestions(android.app.SearchableInfo!, String!, int);
    method private static String! getStringOrNull(android.database.Cursor!, int);
    method public void setQueryRefinement(int);
    method private void setViewDrawable(android.widget.ImageView!, android.graphics.drawable.Drawable!, int);
    method private void setViewText(android.widget.TextView!, CharSequence!);
    method private void storeInIconCache(String!, android.graphics.drawable.Drawable!);
    method private void updateSpinnerState(android.database.Cursor!);
    field private static final boolean DBG = false;
    field static final int INVALID_INDEX = -1; // 0xffffffff
    field private static final String LOG_TAG = "SuggestionsAdapter";
    field private static final int QUERY_LIMIT = 50; // 0x32
    field static final int REFINE_ALL = 2; // 0x2
    field static final int REFINE_BY_ENTRY = 1; // 0x1
    field static final int REFINE_NONE = 0; // 0x0
    field private boolean mClosed;
    field private final int mCommitIconResId;
    field private int mFlagsCol;
    field private int mIconName1Col;
    field private int mIconName2Col;
    field private final java.util.WeakHashMap<java.lang.String,android.graphics.drawable.Drawable.ConstantState>! mOutsideDrawablesCache;
    field private final android.content.Context! mProviderContext;
    field private int mQueryRefinement;
    field private final android.app.SearchManager! mSearchManager;
    field private final androidx.appcompat.widget.SearchView! mSearchView;
    field private final android.app.SearchableInfo! mSearchable;
    field private int mText1Col;
    field private int mText2Col;
    field private int mText2UrlCol;
    field private android.content.res.ColorStateList! mUrlColor;
  }

  private static final class SuggestionsAdapter.ChildViewCache {
    ctor public SuggestionsAdapter.ChildViewCache(android.view.View!);
    field public final android.widget.ImageView! mIcon1;
    field public final android.widget.ImageView! mIcon2;
    field public final android.widget.ImageView! mIconRefine;
    field public final android.widget.TextView! mText1;
    field public final android.widget.TextView! mText2;
  }

  public class SwitchCompat extends android.widget.CompoundButton {
    method private void animateThumbToCheckedState(boolean);
    method private void applyThumbTint();
    method private void applyTrackTint();
    method private void cancelPositionAnimator();
    method private void cancelSuperTouch(android.view.MotionEvent!);
    method private static float constrain(float, float, float);
    method private boolean getTargetCheckedState();
    method private int getThumbOffset();
    method private int getThumbScrollRange();
    method private boolean hitThumb(float, float);
    method private android.text.Layout! makeLayout(CharSequence!);
    method private void setSwitchTypefaceByIndex(int, int);
    method void setThumbPosition(float);
    method private void stopDrag(android.view.MotionEvent!);
    field private static final String ACCESSIBILITY_EVENT_CLASS_NAME = "android.widget.Switch";
    field private static final int[]! CHECKED_STATE_SET;
    field private static final int MONOSPACE = 3; // 0x3
    field private static final int SANS = 1; // 0x1
    field private static final int SERIF = 2; // 0x2
    field private static final int THUMB_ANIMATION_DURATION = 250; // 0xfa
    field private static final android.util.Property<androidx.appcompat.widget.SwitchCompat,java.lang.Float>! THUMB_POS;
    field private static final int TOUCH_MODE_DOWN = 1; // 0x1
    field private static final int TOUCH_MODE_DRAGGING = 2; // 0x2
    field private static final int TOUCH_MODE_IDLE = 0; // 0x0
    field private boolean mHasThumbTint;
    field private boolean mHasThumbTintMode;
    field private boolean mHasTrackTint;
    field private boolean mHasTrackTintMode;
    field private int mMinFlingVelocity;
    field private android.text.Layout! mOffLayout;
    field private android.text.Layout! mOnLayout;
    field android.animation.ObjectAnimator! mPositionAnimator;
    field private boolean mShowText;
    field private boolean mSplitTrack;
    field private int mSwitchBottom;
    field private int mSwitchHeight;
    field private int mSwitchLeft;
    field private int mSwitchMinWidth;
    field private int mSwitchPadding;
    field private int mSwitchRight;
    field private int mSwitchTop;
    field private android.text.method.TransformationMethod! mSwitchTransformationMethod;
    field private int mSwitchWidth;
    field private final android.graphics.Rect! mTempRect;
    field private android.content.res.ColorStateList! mTextColors;
    field private final androidx.appcompat.widget.AppCompatTextHelper! mTextHelper;
    field private CharSequence! mTextOff;
    field private CharSequence! mTextOn;
    field private final android.text.TextPaint! mTextPaint;
    field private android.graphics.drawable.Drawable! mThumbDrawable;
    field float mThumbPosition;
    field private int mThumbTextPadding;
    field private android.content.res.ColorStateList! mThumbTintList;
    field private android.graphics.PorterDuff.Mode! mThumbTintMode;
    field private int mThumbWidth;
    field private int mTouchMode;
    field private int mTouchSlop;
    field private float mTouchX;
    field private float mTouchY;
    field private android.graphics.drawable.Drawable! mTrackDrawable;
    field private android.content.res.ColorStateList! mTrackTintList;
    field private android.graphics.PorterDuff.Mode! mTrackTintMode;
    field private android.view.VelocityTracker! mVelocityTracker;
  }

  class ThemeUtils {
    ctor private ThemeUtils();
    method public static android.content.res.ColorStateList! createDisabledStateList(int, int);
    method public static int getDisabledThemeAttrColor(android.content.Context!, int);
    method public static int getThemeAttrColor(android.content.Context!, int);
    method static int getThemeAttrColor(android.content.Context!, int, float);
    method public static android.content.res.ColorStateList! getThemeAttrColorStateList(android.content.Context!, int);
    method private static android.util.TypedValue! getTypedValue();
    field static final int[]! ACTIVATED_STATE_SET;
    field static final int[]! CHECKED_STATE_SET;
    field static final int[]! DISABLED_STATE_SET;
    field static final int[]! EMPTY_STATE_SET;
    field static final int[]! FOCUSED_STATE_SET;
    field static final int[]! NOT_PRESSED_OR_FOCUSED_STATE_SET;
    field static final int[]! PRESSED_STATE_SET;
    field static final int[]! SELECTED_STATE_SET;
    field private static final int[]! TEMP_ARRAY;
    field private static final ThreadLocal<android.util.TypedValue>! TL_TYPED_VALUE;
  }

  public static final class ThemedSpinnerAdapter.Helper {
    field private final android.content.Context! mContext;
    field private android.view.LayoutInflater! mDropDownInflater;
    field private final android.view.LayoutInflater! mInflater;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TintContextWrapper extends android.content.ContextWrapper {
    ctor private TintContextWrapper(android.content.Context);
    method private static boolean shouldWrap(android.content.Context);
    method public static android.content.Context! wrap(android.content.Context);
    field private static final Object! CACHE_LOCK;
    field private final android.content.res.Resources! mResources;
    field private final android.content.res.Resources.Theme! mTheme;
    field private static java.util.ArrayList<java.lang.ref.WeakReference<androidx.appcompat.widget.TintContextWrapper>>! sCache;
  }

  class TintInfo {
    ctor TintInfo();
    method void clear();
    field public boolean mHasTintList;
    field public boolean mHasTintMode;
    field public android.content.res.ColorStateList! mTintList;
    field public android.graphics.PorterDuff.Mode! mTintMode;
  }

  class TintResources extends androidx.appcompat.widget.ResourcesWrapper {
    ctor public TintResources(android.content.Context, android.content.res.Resources);
    field private final java.lang.ref.WeakReference<android.content.Context>! mContextRef;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TintTypedArray {
    ctor private TintTypedArray(android.content.Context!, android.content.res.TypedArray!);
    method public boolean getBoolean(int, boolean);
    method @RequiresApi(21) public int getChangingConfigurations();
    method public int getColor(int, int);
    method public android.content.res.ColorStateList! getColorStateList(int);
    method public float getDimension(int, float);
    method public int getDimensionPixelOffset(int, int);
    method public int getDimensionPixelSize(int, int);
    method public android.graphics.drawable.Drawable! getDrawable(int);
    method public android.graphics.drawable.Drawable! getDrawableIfKnown(int);
    method public float getFloat(int, float);
    method public android.graphics.Typeface? getFont(@StyleableRes int, int, androidx.core.content.res.ResourcesCompat.FontCallback?);
    method public float getFraction(int, int, int, float);
    method public int getIndex(int);
    method public int getIndexCount();
    method public int getInt(int, int);
    method public int getInteger(int, int);
    method public int getLayoutDimension(int, String!);
    method public int getLayoutDimension(int, int);
    method public String! getNonResourceString(int);
    method public String! getPositionDescription();
    method public int getResourceId(int, int);
    method public android.content.res.Resources! getResources();
    method public String! getString(int);
    method public CharSequence! getText(int);
    method public CharSequence[]! getTextArray(int);
    method public int getType(int);
    method public boolean getValue(int, android.util.TypedValue!);
    method public boolean hasValue(int);
    method public int length();
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, android.util.AttributeSet!, int[]!);
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, android.util.AttributeSet!, int[]!, int, int);
    method public static androidx.appcompat.widget.TintTypedArray! obtainStyledAttributes(android.content.Context!, int, int[]!);
    method public android.util.TypedValue! peekValue(int);
    method public void recycle();
    field private final android.content.Context! mContext;
    field private android.util.TypedValue! mTypedValue;
    field private final android.content.res.TypedArray! mWrapped;
  }

  public class Toolbar extends android.view.ViewGroup {
    method void addChildrenForExpandedActionView();
    method private void addCustomViewsWithGravity(java.util.List<android.view.View>!, int);
    method private void addSystemView(android.view.View!, boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean canShowOverflowMenu();
    method void ensureCollapseButtonView();
    method private void ensureContentInsets();
    method private void ensureLogoView();
    method private void ensureMenu();
    method private void ensureMenuView();
    method private void ensureNavButtonView();
    method private int getChildHorizontalGravity(int);
    method private int getChildTop(android.view.View!, int);
    method private int getChildVerticalGravity(int);
    method private int getHorizontalMargins(android.view.View!);
    method private android.view.MenuInflater! getMenuInflater();
    method androidx.appcompat.widget.ActionMenuPresenter! getOuterActionMenuPresenter();
    method android.content.Context! getPopupContext();
    method private int getVerticalMargins(android.view.View!);
    method private int getViewListMeasuredWidth(java.util.List<android.view.View>!, int[]!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.appcompat.widget.DecorToolbar! getWrapper();
    method private boolean isChildOrHidden(android.view.View!);
    method private static boolean isCustomView(android.view.View!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isOverflowMenuShowPending();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isTitleTruncated();
    method private int layoutChildLeft(android.view.View!, int, int[]!, int);
    method private int layoutChildRight(android.view.View!, int, int[]!, int);
    method private int measureChildCollapseMargins(android.view.View!, int, int, int, int, int[]!);
    method private void measureChildConstrained(android.view.View!, int, int, int, int, int);
    method private void postShowOverflowMenu();
    method void removeChildrenForExpandedActionView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setCollapsible(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setMenu(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.widget.ActionMenuPresenter!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method private boolean shouldCollapse();
    method private boolean shouldLayout(android.view.View!);
    field private static final String TAG = "Toolbar";
    field private androidx.appcompat.view.menu.MenuPresenter.Callback! mActionMenuPresenterCallback;
    field int mButtonGravity;
    field android.widget.ImageButton! mCollapseButtonView;
    field private CharSequence! mCollapseDescription;
    field private android.graphics.drawable.Drawable! mCollapseIcon;
    field private boolean mCollapsible;
    field private int mContentInsetEndWithActions;
    field private int mContentInsetStartWithNavigation;
    field private androidx.appcompat.widget.RtlSpacingHelper! mContentInsets;
    field private boolean mEatingHover;
    field private boolean mEatingTouch;
    field android.view.View! mExpandedActionView;
    field private androidx.appcompat.widget.Toolbar.ExpandedActionViewMenuPresenter! mExpandedMenuPresenter;
    field private int mGravity;
    field private final java.util.ArrayList<android.view.View>! mHiddenViews;
    field private android.widget.ImageView! mLogoView;
    field private int mMaxButtonHeight;
    field private androidx.appcompat.view.menu.MenuBuilder.Callback! mMenuBuilderCallback;
    field private androidx.appcompat.widget.ActionMenuView! mMenuView;
    field private final androidx.appcompat.widget.ActionMenuView.OnMenuItemClickListener! mMenuViewItemClickListener;
    field private android.widget.ImageButton! mNavButtonView;
    field androidx.appcompat.widget.Toolbar.OnMenuItemClickListener! mOnMenuItemClickListener;
    field private androidx.appcompat.widget.ActionMenuPresenter! mOuterActionMenuPresenter;
    field private android.content.Context! mPopupContext;
    field private int mPopupTheme;
    field private final Runnable! mShowOverflowMenuRunnable;
    field private CharSequence! mSubtitleText;
    field private int mSubtitleTextAppearance;
    field private int mSubtitleTextColor;
    field private android.widget.TextView! mSubtitleTextView;
    field private final int[]! mTempMargins;
    field private final java.util.ArrayList<android.view.View>! mTempViews;
    field private int mTitleMarginBottom;
    field private int mTitleMarginEnd;
    field private int mTitleMarginStart;
    field private int mTitleMarginTop;
    field private CharSequence! mTitleText;
    field private int mTitleTextAppearance;
    field private int mTitleTextColor;
    field private android.widget.TextView! mTitleTextView;
    field private androidx.appcompat.widget.ToolbarWidgetWrapper! mWrapper;
  }

  private class Toolbar.ExpandedActionViewMenuPresenter implements androidx.appcompat.view.menu.MenuPresenter {
    ctor Toolbar.ExpandedActionViewMenuPresenter();
    method public boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder!, androidx.appcompat.view.menu.MenuItemImpl!);
    method public boolean flagActionItems();
    method public int getId();
    method public androidx.appcompat.view.menu.MenuView! getMenuView(android.view.ViewGroup!);
    method public void initForMenu(android.content.Context!, androidx.appcompat.view.menu.MenuBuilder!);
    method public void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder!, boolean);
    method public void onRestoreInstanceState(android.os.Parcelable!);
    method public android.os.Parcelable! onSaveInstanceState();
    method public boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder!);
    method public void setCallback(androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void updateMenuView(boolean);
    field androidx.appcompat.view.menu.MenuItemImpl! mCurrentExpandedItem;
    field androidx.appcompat.view.menu.MenuBuilder! mMenu;
  }

  public static class Toolbar.LayoutParams extends androidx.appcompat.app.ActionBar.LayoutParams {
    method void copyMarginsFromCompat(android.view.ViewGroup.MarginLayoutParams!);
    field static final int CUSTOM = 0; // 0x0
    field static final int EXPANDED = 2; // 0x2
    field static final int SYSTEM = 1; // 0x1
    field int mViewType;
  }

  public static class Toolbar.SavedState extends androidx.customview.view.AbsSavedState {
    field int expandedMenuItemId;
    field boolean isOverflowOpen;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ToolbarWidgetWrapper implements androidx.appcompat.widget.DecorToolbar {
    ctor public ToolbarWidgetWrapper(androidx.appcompat.widget.Toolbar!, boolean);
    ctor public ToolbarWidgetWrapper(androidx.appcompat.widget.Toolbar!, boolean, int, int);
    method public void animateToVisibility(int);
    method public boolean canShowOverflowMenu();
    method public void collapseActionView();
    method private int detectDisplayOptions();
    method public void dismissPopupMenus();
    method private void ensureSpinner();
    method public android.content.Context! getContext();
    method public android.view.View! getCustomView();
    method public int getDisplayOptions();
    method public int getDropdownItemCount();
    method public int getDropdownSelectedPosition();
    method public int getHeight();
    method public android.view.Menu! getMenu();
    method public int getNavigationMode();
    method public CharSequence! getSubtitle();
    method public CharSequence! getTitle();
    method public android.view.ViewGroup! getViewGroup();
    method public int getVisibility();
    method public boolean hasEmbeddedTabs();
    method public boolean hasExpandedActionView();
    method public boolean hasIcon();
    method public boolean hasLogo();
    method public boolean hideOverflowMenu();
    method public void initIndeterminateProgress();
    method public void initProgress();
    method public boolean isOverflowMenuShowPending();
    method public boolean isOverflowMenuShowing();
    method public boolean isTitleTruncated();
    method public void restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void saveHierarchyState(android.util.SparseArray<android.os.Parcelable>!);
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable!);
    method public void setCollapsible(boolean);
    method public void setCustomView(android.view.View!);
    method public void setDefaultNavigationContentDescription(int);
    method public void setDefaultNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setDisplayOptions(int);
    method public void setDropdownParams(android.widget.SpinnerAdapter!, android.widget.AdapterView.OnItemSelectedListener!);
    method public void setDropdownSelectedPosition(int);
    method public void setEmbeddedTabView(androidx.appcompat.widget.ScrollingTabContainerView!);
    method public void setHomeButtonEnabled(boolean);
    method public void setIcon(int);
    method public void setIcon(android.graphics.drawable.Drawable!);
    method public void setLogo(int);
    method public void setLogo(android.graphics.drawable.Drawable!);
    method public void setMenu(android.view.Menu!, androidx.appcompat.view.menu.MenuPresenter.Callback!);
    method public void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter.Callback!, androidx.appcompat.view.menu.MenuBuilder.Callback!);
    method public void setMenuPrepared();
    method public void setNavigationContentDescription(CharSequence!);
    method public void setNavigationContentDescription(int);
    method public void setNavigationIcon(android.graphics.drawable.Drawable!);
    method public void setNavigationIcon(int);
    method public void setNavigationMode(int);
    method public void setSubtitle(CharSequence!);
    method public void setTitle(CharSequence!);
    method private void setTitleInt(CharSequence!);
    method public void setVisibility(int);
    method public void setWindowCallback(android.view.Window.Callback!);
    method public void setWindowTitle(CharSequence!);
    method public androidx.core.view.ViewPropertyAnimatorCompat! setupAnimatorToVisibility(int, long);
    method public boolean showOverflowMenu();
    method private void updateHomeAccessibility();
    method private void updateNavigationIcon();
    method private void updateToolbarLogo();
    field private static final int AFFECTS_LOGO_MASK = 3; // 0x3
    field private static final long DEFAULT_FADE_DURATION_MS = 200L; // 0xc8L
    field private static final String TAG = "ToolbarWidgetWrapper";
    field private androidx.appcompat.widget.ActionMenuPresenter! mActionMenuPresenter;
    field private android.view.View! mCustomView;
    field private int mDefaultNavigationContentDescription;
    field private android.graphics.drawable.Drawable! mDefaultNavigationIcon;
    field private int mDisplayOpts;
    field private CharSequence! mHomeDescription;
    field private android.graphics.drawable.Drawable! mIcon;
    field private android.graphics.drawable.Drawable! mLogo;
    field boolean mMenuPrepared;
    field private android.graphics.drawable.Drawable! mNavIcon;
    field private int mNavigationMode;
    field private android.widget.Spinner! mSpinner;
    field private CharSequence! mSubtitle;
    field private android.view.View! mTabView;
    field CharSequence! mTitle;
    field private boolean mTitleSet;
    field androidx.appcompat.widget.Toolbar! mToolbar;
    field android.view.Window.Callback! mWindowCallback;
  }

  public class TooltipCompat {
    ctor private TooltipCompat();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class TooltipCompatHandler implements android.view.View.OnAttachStateChangeListener android.view.View.OnHoverListener android.view.View.OnLongClickListener {
    ctor private TooltipCompatHandler(android.view.View!, CharSequence!);
    method private void cancelPendingShow();
    method private void clearAnchorPos();
    method void hide();
    method private void scheduleShow();
    method private static void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler!);
    method public static void setTooltipText(android.view.View!, CharSequence!);
    method void show(boolean);
    method private boolean updateAnchorPos(android.view.MotionEvent!);
    field private static final long HOVER_HIDE_TIMEOUT_MS = 15000L; // 0x3a98L
    field private static final long HOVER_HIDE_TIMEOUT_SHORT_MS = 3000L; // 0xbb8L
    field private static final long LONG_CLICK_HIDE_TIMEOUT_MS = 2500L; // 0x9c4L
    field private static final String TAG = "TooltipCompatHandler";
    field private final android.view.View! mAnchor;
    field private int mAnchorX;
    field private int mAnchorY;
    field private boolean mFromTouch;
    field private final Runnable! mHideRunnable;
    field private final int mHoverSlop;
    field private androidx.appcompat.widget.TooltipPopup! mPopup;
    field private final Runnable! mShowRunnable;
    field private final CharSequence! mTooltipText;
    field private static androidx.appcompat.widget.TooltipCompatHandler! sActiveHandler;
    field private static androidx.appcompat.widget.TooltipCompatHandler! sPendingHandler;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class TooltipPopup {
    ctor TooltipPopup(android.content.Context!);
    method private void computePosition(android.view.View!, int, int, boolean, android.view.WindowManager.LayoutParams!);
    method private static android.view.View! getAppRootView(android.view.View!);
    method void hide();
    method boolean isShowing();
    method void show(android.view.View!, int, int, boolean, CharSequence!);
    field private static final String TAG = "TooltipPopup";
    field private final android.view.View! mContentView;
    field private final android.content.Context! mContext;
    field private final android.view.WindowManager.LayoutParams! mLayoutParams;
    field private final android.widget.TextView! mMessageView;
    field private final int[]! mTmpAnchorPos;
    field private final int[]! mTmpAppPos;
    field private final android.graphics.Rect! mTmpDisplayFrame;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class VectorEnabledTintResources extends android.content.res.Resources {
    ctor public VectorEnabledTintResources(android.content.Context, android.content.res.Resources);
    method public static boolean isCompatVectorFromResourcesEnabled();
    method public static void setCompatVectorFromResourcesEnabled(boolean);
    method public static boolean shouldBeUsed();
    method final android.graphics.drawable.Drawable! superGetDrawable(int);
    field public static final int MAX_SDK_WHERE_REQUIRED = 20; // 0x14
    field private final java.lang.ref.WeakReference<android.content.Context>! mContextRef;
    field private static boolean sCompatVectorFromResourcesEnabled;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class ViewStubCompat extends android.view.View {
    ctor public ViewStubCompat(android.content.Context!, android.util.AttributeSet!);
    ctor public ViewStubCompat(android.content.Context!, android.util.AttributeSet!, int);
    method public int getInflatedId();
    method public android.view.LayoutInflater! getLayoutInflater();
    method public int getLayoutResource();
    method public android.view.View! inflate();
    method public void setInflatedId(int);
    method public void setLayoutInflater(android.view.LayoutInflater!);
    method public void setLayoutResource(int);
    method public void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat.OnInflateListener!);
    field private androidx.appcompat.widget.ViewStubCompat.OnInflateListener! mInflateListener;
    field private int mInflatedId;
    field private java.lang.ref.WeakReference<android.view.View>! mInflatedViewRef;
    field private android.view.LayoutInflater! mInflater;
    field private int mLayoutResource;
  }

  public static interface ViewStubCompat.OnInflateListener {
    method public void onInflate(androidx.appcompat.widget.ViewStubCompat!, android.view.View!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ViewUtils {
    ctor private ViewUtils();
    method public static void computeFitSystemWindows(android.view.View!, android.graphics.Rect!, android.graphics.Rect!);
    method public static boolean isLayoutRtl(android.view.View!);
    method public static void makeOptionalFitsSystemWindows(android.view.View!);
    field private static final String TAG = "ViewUtils";
    field private static java.lang.reflect.Method! sComputeFitSystemWindowsMethod;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface WithHint {
    method public CharSequence? getHint();
  }

}

