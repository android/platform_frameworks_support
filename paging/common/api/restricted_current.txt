// Signature format: 3.0
package androidx.paging {


  public abstract class DataSource<Key, Value> {
  }




  public abstract class ListenableItemKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
  }

  public abstract class ListenablePageKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
  }

  public abstract class ListenablePositionalDataSource<T> extends androidx.paging.DataSource<java.lang.Integer,T> {
  }

  public abstract class PagedList<T> extends java.util.AbstractList<T> {
  }




}

package androidx.paging.futures {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DirectExecutor implements java.util.concurrent.Executor {
    method public void execute(Runnable runnable);
    field public static final androidx.paging.futures.DirectExecutor.Companion! Companion;
  }

  public static final class DirectExecutor.Companion {
    method public androidx.paging.futures.DirectExecutor getINSTANCE();
    property public final androidx.paging.futures.DirectExecutor INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface FutureCallback<V> {
    method public void onError(Throwable throwable);
    method public void onSuccess(V? value);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Futures {
    method public static <V> void addCallback(com.google.common.util.concurrent.ListenableFuture<? extends V> future, androidx.paging.futures.FutureCallback<? super V> callback, java.util.concurrent.Executor executor);
    method public <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<? extends I> input, androidx.arch.core.util.Function<? super I,? extends O> function, java.util.concurrent.Executor executor);
  }

}

