// Signature format: 3.0
package androidx.paging {

  public abstract class DataSource<Key, Value> {
    method @AnyThread public void addInvalidatedCallback(androidx.paging.DataSource.InvalidatedCallback onInvalidatedCallback);
    method protected final java.util.concurrent.Executor getExecutor();
    method @AnyThread public void invalidate();
    method @WorkerThread public boolean isInvalid();
    method public boolean isRetryableError(Throwable error);
    method public <ToValue> androidx.paging.DataSource<Key,ToValue> map(androidx.arch.core.util.Function<Value,ToValue> function);
    method public <ToValue> androidx.paging.DataSource<Key,ToValue> mapByPage(androidx.arch.core.util.Function<java.util.List<Value>,java.util.List<ToValue>> function);
    method @AnyThread public void removeInvalidatedCallback(androidx.paging.DataSource.InvalidatedCallback onInvalidatedCallback);
    method protected final void setExecutor(java.util.concurrent.Executor value);
    property protected final java.util.concurrent.Executor executor;
  }

  public static class DataSource.BaseResult<Value> {
    ctor protected DataSource.BaseResult(java.util.List<? extends Value> data, Object? prevKey, Object? nextKey, int leadingNulls, int trailingNulls, int offset, boolean counted);
    method public final boolean getCounted();
    method public final int getLeadingNulls();
    method public final Object? getNextKey();
    method public final int getOffset();
    method public final Object? getPrevKey();
    method public final int getTrailingNulls();
    field public final java.util.List<Value> data;
  }

  public abstract static class DataSource.Factory<Key, Value> {
    ctor public DataSource.Factory();
    method public abstract androidx.paging.DataSource<Key,Value> create();
    method public <ToValue> androidx.paging.DataSource.Factory<Key,ToValue> map(androidx.arch.core.util.Function<Value,ToValue> function);
    method public <ToValue> androidx.paging.DataSource.Factory<Key,ToValue> mapByPage(androidx.arch.core.util.Function<java.util.List<Value>,java.util.List<ToValue>> function);
  }

  public static interface DataSource.InvalidatedCallback {
    method @AnyThread public void onInvalidated();
  }

  public static final class DataSource.Params<K> {
    method public int getInitialLoadSize();
    method public K? getKey();
    method public int getPageSize();
    method public boolean getPlaceholdersEnabled();
  }

  public abstract class ItemKeyedDataSource<Key, Value> extends androidx.paging.ListenableItemKeyedDataSource<Key,Value> {
    ctor public ItemKeyedDataSource();
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.Result<Value>> loadAfter(androidx.paging.ListenableItemKeyedDataSource.LoadParams<Key> params);
    method public abstract void loadAfter(androidx.paging.ItemKeyedDataSource.LoadParams<Key> params, androidx.paging.ItemKeyedDataSource.LoadCallback<Value> callback);
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.Result<Value>> loadBefore(androidx.paging.ListenableItemKeyedDataSource.LoadParams<Key> params);
    method public abstract void loadBefore(androidx.paging.ItemKeyedDataSource.LoadParams<Key> params, androidx.paging.ItemKeyedDataSource.LoadCallback<Value> callback);
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.InitialResult<Value>> loadInitial(androidx.paging.ListenableItemKeyedDataSource.LoadInitialParams<Key> params);
    method public abstract void loadInitial(androidx.paging.ItemKeyedDataSource.LoadInitialParams<Key> params, androidx.paging.ItemKeyedDataSource.LoadInitialCallback<Value> callback);
    method public final <ToValue> androidx.paging.ItemKeyedDataSource<Key,ToValue> map(androidx.arch.core.util.Function<Value,ToValue> function);
    method public final <ToValue> androidx.paging.ItemKeyedDataSource<Key,ToValue> mapByPage(androidx.arch.core.util.Function<java.util.List<Value>,java.util.List<ToValue>> function);
  }

  public abstract static class ItemKeyedDataSource.LoadCallback<Value> {
    ctor public ItemKeyedDataSource.LoadCallback();
    method public void onError(Throwable error);
    method public abstract void onResult(java.util.List<? extends Value> data);
  }

  public abstract static class ItemKeyedDataSource.LoadInitialCallback<Value> extends androidx.paging.ItemKeyedDataSource.LoadCallback<Value> {
    ctor public ItemKeyedDataSource.LoadInitialCallback();
    method public abstract void onResult(java.util.List<? extends Value> data, int position, int totalCount);
  }

  public static class ItemKeyedDataSource.LoadInitialParams<Key> extends androidx.paging.ListenableItemKeyedDataSource.LoadInitialParams<Key> {
    ctor public ItemKeyedDataSource.LoadInitialParams(Key? requestedInitialKey, int requestedLoadSize, boolean placeholdersEnabled);
  }

  public static class ItemKeyedDataSource.LoadParams<Key> extends androidx.paging.ListenableItemKeyedDataSource.LoadParams<Key> {
    ctor public ItemKeyedDataSource.LoadParams(Key key, int requestedLoadSize);
  }

  public abstract class ListenableItemKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
    ctor public ListenableItemKeyedDataSource();
    method public abstract Key? getKey(Value item);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.Result<Value>> loadAfter(androidx.paging.ListenableItemKeyedDataSource.LoadParams<Key> params);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.Result<Value>> loadBefore(androidx.paging.ListenableItemKeyedDataSource.LoadParams<Key> params);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenableItemKeyedDataSource.InitialResult<Value>> loadInitial(androidx.paging.ListenableItemKeyedDataSource.LoadInitialParams<Key> params);
  }

  public static class ListenableItemKeyedDataSource.InitialResult<V> extends androidx.paging.DataSource.BaseResult<V> {
    ctor public ListenableItemKeyedDataSource.InitialResult(java.util.List<? extends V> data, int position, int totalCount);
    ctor public ListenableItemKeyedDataSource.InitialResult(java.util.List<? extends V> data);
  }

  public static class ListenableItemKeyedDataSource.LoadInitialParams<Key> {
    ctor public ListenableItemKeyedDataSource.LoadInitialParams(Key? requestedInitialKey, int requestedLoadSize, boolean placeholdersEnabled);
    field public final boolean placeholdersEnabled;
    field public final Key? requestedInitialKey;
    field public final int requestedLoadSize;
  }

  public static class ListenableItemKeyedDataSource.LoadParams<Key> {
    ctor public ListenableItemKeyedDataSource.LoadParams(Key key, int requestedLoadSize);
    field public final Key key;
    field public final int requestedLoadSize;
  }

  public static class ListenableItemKeyedDataSource.Result<V> extends androidx.paging.DataSource.BaseResult<V> {
    ctor public ListenableItemKeyedDataSource.Result(java.util.List<? extends V> data);
  }

  public abstract class ListenablePageKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
    ctor public ListenablePageKeyedDataSource();
    method public Key? getKey$lintWithKotlin(Value item);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.Result<Key,Value>> loadAfter(androidx.paging.ListenablePageKeyedDataSource.LoadParams<Key> params);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.Result<Key,Value>> loadBefore(androidx.paging.ListenablePageKeyedDataSource.LoadParams<Key> params);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.InitialResult<Key,Value>> loadInitial(androidx.paging.ListenablePageKeyedDataSource.LoadInitialParams<Key> params);
    method public boolean supportsPageDropping$lintWithKotlin();
  }

  public static class ListenablePageKeyedDataSource.InitialResult<Key, Value> extends androidx.paging.DataSource.BaseResult<Value> {
    ctor public ListenablePageKeyedDataSource.InitialResult(java.util.List<? extends Value> data, int position, int totalCount, Key? previousPageKey, Key? nextPageKey);
    ctor public ListenablePageKeyedDataSource.InitialResult(java.util.List<? extends Value> data, Key? previousPageKey, Key? nextPageKey);
  }

  public static class ListenablePageKeyedDataSource.LoadInitialParams<Key> {
    ctor public ListenablePageKeyedDataSource.LoadInitialParams(int requestedLoadSize, boolean placeholdersEnabled);
    field public final boolean placeholdersEnabled;
    field public final int requestedLoadSize;
  }

  public static class ListenablePageKeyedDataSource.LoadParams<Key> {
    ctor public ListenablePageKeyedDataSource.LoadParams(Key key, int requestedLoadSize);
    field public final Key key;
    field public final int requestedLoadSize;
  }

  public static class ListenablePageKeyedDataSource.Result<Key, Value> extends androidx.paging.DataSource.BaseResult<Value> {
    ctor public ListenablePageKeyedDataSource.Result(java.util.List<? extends Value> data, Key? adjacentPageKey);
  }

  public abstract class ListenablePositionalDataSource<T> extends androidx.paging.DataSource<java.lang.Integer,T> {
    ctor public ListenablePositionalDataSource();
    method public static final int computeInitialLoadPosition(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params, int totalCount);
    method public static final int computeInitialLoadSize(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params, int initialLoadPosition, int totalCount);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePositionalDataSource.InitialResult<T>> loadInitial(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params);
    method public abstract com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePositionalDataSource.RangeResult<T>> loadRange(androidx.paging.ListenablePositionalDataSource.LoadRangeParams params);
    field public static final androidx.paging.ListenablePositionalDataSource.Companion! Companion;
  }

  public static final class ListenablePositionalDataSource.Companion {
    method public int computeInitialLoadPosition(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params, int totalCount);
    method public int computeInitialLoadSize(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params, int initialLoadPosition, int totalCount);
  }

  public static class ListenablePositionalDataSource.InitialResult<V> extends androidx.paging.DataSource.BaseResult<V> {
    ctor public ListenablePositionalDataSource.InitialResult(java.util.List<? extends V> data, int position, int totalCount);
    ctor public ListenablePositionalDataSource.InitialResult(java.util.List<? extends V> data, int position);
  }

  public static class ListenablePositionalDataSource.LoadInitialParams {
    ctor public ListenablePositionalDataSource.LoadInitialParams(int requestedStartPosition, int requestedLoadSize, int pageSize, boolean placeholdersEnabled);
    field public final int pageSize;
    field public final boolean placeholdersEnabled;
    field public final int requestedLoadSize;
    field public final int requestedStartPosition;
  }

  public static class ListenablePositionalDataSource.LoadRangeParams {
    ctor public ListenablePositionalDataSource.LoadRangeParams(int startPosition, int loadSize);
    field public final int loadSize;
    field public final int startPosition;
  }

  public static class ListenablePositionalDataSource.RangeResult<V> extends androidx.paging.DataSource.BaseResult<V> {
    ctor public ListenablePositionalDataSource.RangeResult(java.util.List<? extends V> data);
  }

  public abstract class PageKeyedDataSource<Key, Value> extends androidx.paging.ListenablePageKeyedDataSource<Key,Value> {
    ctor public PageKeyedDataSource();
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.Result<Key,Value>> loadAfter(androidx.paging.ListenablePageKeyedDataSource.LoadParams<Key> params);
    method public abstract void loadAfter(androidx.paging.PageKeyedDataSource.LoadParams<Key> params, androidx.paging.PageKeyedDataSource.LoadCallback<Key,Value> callback);
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.Result<Key,Value>> loadBefore(androidx.paging.ListenablePageKeyedDataSource.LoadParams<Key> params);
    method public abstract void loadBefore(androidx.paging.PageKeyedDataSource.LoadParams<Key> params, androidx.paging.PageKeyedDataSource.LoadCallback<Key,Value> callback);
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePageKeyedDataSource.InitialResult<Key,Value>> loadInitial(androidx.paging.ListenablePageKeyedDataSource.LoadInitialParams<Key> params);
    method public abstract void loadInitial(androidx.paging.PageKeyedDataSource.LoadInitialParams<Key> params, androidx.paging.PageKeyedDataSource.LoadInitialCallback<Key,Value> callback);
    method public final <ToValue> androidx.paging.PageKeyedDataSource<Key,ToValue> map(androidx.arch.core.util.Function<Value,ToValue> function);
    method public final <ToValue> androidx.paging.PageKeyedDataSource<Key,ToValue> mapByPage(androidx.arch.core.util.Function<java.util.List<Value>,java.util.List<ToValue>> function);
  }

  public abstract static class PageKeyedDataSource.LoadCallback<Key, Value> {
    ctor public PageKeyedDataSource.LoadCallback();
    method public void onError(Throwable error);
    method public abstract void onResult(java.util.List<? extends Value> data, Key? adjacentPageKey);
  }

  public abstract static class PageKeyedDataSource.LoadInitialCallback<Key, Value> {
    ctor public PageKeyedDataSource.LoadInitialCallback();
    method public void onError(Throwable error);
    method public abstract void onResult(java.util.List<? extends Value> data, int position, int totalCount, Key? previousPageKey, Key? nextPageKey);
    method public abstract void onResult(java.util.List<? extends Value> data, Key? previousPageKey, Key? nextPageKey);
  }

  public static class PageKeyedDataSource.LoadInitialParams<Key> extends androidx.paging.ListenablePageKeyedDataSource.LoadInitialParams<Key> {
    ctor public PageKeyedDataSource.LoadInitialParams(int requestedLoadSize, boolean placeholdersEnabled);
  }

  public static class PageKeyedDataSource.LoadParams<Key> extends androidx.paging.ListenablePageKeyedDataSource.LoadParams<Key> {
    ctor public PageKeyedDataSource.LoadParams(Key key, int requestedLoadSize);
  }

  public abstract class PagedList<T> extends java.util.AbstractList<T> {
    method public void addWeakCallback(java.util.List<? extends T>? previousSnapshot, androidx.paging.PagedList.Callback callback);
    method public final void addWeakLoadStateListener(androidx.paging.PagedList.LoadStateListener listener);
    method public abstract void detach();
    method public T? get(int index);
    method public androidx.paging.PagedList.Config getConfig();
    method public abstract androidx.paging.DataSource<?,T> getDataSource();
    method public abstract Object? getLastKey();
    method public int getLoadedCount();
    method public int getPositionOffset();
    method public int getSize();
    method public abstract boolean isContiguous();
    method public abstract boolean isDetached();
    method public boolean isImmutable();
    method public void loadAround(int index);
    method public void removeWeakCallback(androidx.paging.PagedList.Callback callback);
    method public final void removeWeakLoadStateListener(androidx.paging.PagedList.LoadStateListener listener);
    method public void retry();
    method public java.util.List<T> snapshot();
    property public abstract androidx.paging.DataSource<?,T> dataSource;
    property public abstract boolean isDetached;
    property public boolean isImmutable;
    property public abstract Object? lastKey;
    property public int loadedCount;
    property public int positionOffset;
    property public int size;
    field public static final androidx.paging.PagedList.Companion! Companion;
  }

  @MainThread public abstract static class PagedList.BoundaryCallback<T> {
    ctor public PagedList.BoundaryCallback();
    method public void onItemAtEndLoaded(T? itemAtEnd);
    method public void onItemAtFrontLoaded(T? itemAtFront);
    method public void onZeroItemsLoaded();
  }

  public static final class PagedList.Builder<Key, Value> {
    ctor public PagedList.Builder(androidx.paging.DataSource<Key,Value> dataSource, androidx.paging.PagedList.Config config);
    ctor public PagedList.Builder(androidx.paging.DataSource<Key,Value> dataSource, int pageSize);
    method @Deprecated @WorkerThread public androidx.paging.PagedList<Value> build();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.paging.PagedList<Value>> buildAsync();
    method public androidx.paging.PagedList.Builder<Key,Value> setBoundaryCallback(androidx.paging.PagedList.BoundaryCallback<Value>? boundaryCallback);
    method public androidx.paging.PagedList.Builder<Key,Value> setFetchExecutor(java.util.concurrent.Executor fetchExecutor);
    method public androidx.paging.PagedList.Builder<Key,Value> setInitialKey(Key? initialKey);
    method public androidx.paging.PagedList.Builder<Key,Value> setNotifyExecutor(java.util.concurrent.Executor notifyExecutor);
  }

  public abstract static class PagedList.Callback {
    ctor public PagedList.Callback();
    method public abstract void onChanged(int position, int count);
    method public abstract void onInserted(int position, int count);
    method public abstract void onRemoved(int position, int count);
  }

  public static final class PagedList.Companion {
  }

  public static final class PagedList.Config {
    method public boolean getEnablePlaceholders();
    method public int getInitialLoadSizeHint();
    method public int getMaxSize();
    method public int getPageSize();
    method public int getPrefetchDistance();
    field public static final androidx.paging.PagedList.Config.Companion! Companion;
    field public static final int MAX_SIZE_UNBOUNDED = 2147483647; // 0x7fffffff
  }

  public static final class PagedList.Config.Builder {
    ctor public PagedList.Config.Builder();
    method public androidx.paging.PagedList.Config build();
    method public androidx.paging.PagedList.Config.Builder setEnablePlaceholders(boolean enablePlaceholders);
    method public androidx.paging.PagedList.Config.Builder setInitialLoadSizeHint(@IntRange(from=1) int initialLoadSizeHint);
    method public androidx.paging.PagedList.Config.Builder setMaxSize(@IntRange(from=2) int maxSize);
    method public androidx.paging.PagedList.Config.Builder setPageSize(@IntRange(from=1) int pageSize);
    method public androidx.paging.PagedList.Config.Builder setPrefetchDistance(@IntRange(from=0) int prefetchDistance);
    field public static final androidx.paging.PagedList.Config.Builder.Companion! Companion;
  }

  public static final class PagedList.Config.Builder.Companion {
  }

  public static final class PagedList.Config.Companion {
  }

  public enum PagedList.LoadState {
    enum_constant public static final androidx.paging.PagedList.LoadState DONE;
    enum_constant public static final androidx.paging.PagedList.LoadState ERROR;
    enum_constant public static final androidx.paging.PagedList.LoadState IDLE;
    enum_constant public static final androidx.paging.PagedList.LoadState LOADING;
    enum_constant public static final androidx.paging.PagedList.LoadState RETRYABLE_ERROR;
  }

  public static interface PagedList.LoadStateListener {
    method public void onLoadStateChanged(androidx.paging.PagedList.LoadType type, androidx.paging.PagedList.LoadState state, Throwable? error);
  }

  public enum PagedList.LoadType {
    enum_constant public static final androidx.paging.PagedList.LoadType END;
    enum_constant public static final androidx.paging.PagedList.LoadType REFRESH;
    enum_constant public static final androidx.paging.PagedList.LoadType START;
  }

  public final class PagedStorage<T> extends java.util.AbstractList<T> {
    ctor public PagedStorage();
    ctor public PagedStorage(int leadingNulls, java.util.List<? extends T> page, int trailingNulls);
    method public void allocatePageRange(int minimumPage, int maximumPage);
    method public int computeLeadingNulls();
    method public int computeTrailingNulls();
    method public T? get(int index);
    method public T? getFirstLoadedItem();
    method public int getFirstLoadedItemIndex();
    method public T? getLastLoadedItem();
    method public int getLastLoadedItemIndex();
    method public int getLeadingNullCount();
    method public int getLoadedCount();
    method public int getMiddleOfLoadedRange();
    method public int getNumberAppended();
    method public int getNumberPrepended();
    method public int getPageCount();
    method public int getPositionOffset();
    method public int getSize();
    method public int getStorageCount();
    method public int getTrailingNullCount();
    method public boolean hasPage(int pageSize, int index);
    method public boolean isTiled();
    method public boolean needsTrimFromEnd(int maxSize, int requiredRemaining);
    method public boolean needsTrimFromFront(int maxSize, int requiredRemaining);
    method public void onPageResultResolution(androidx.paging.PagedList.LoadType type, androidx.paging.DataSource.BaseResult<T> result);
    method public boolean pageWouldBeBoundary(int positionOfPage, boolean trimFromFront);
    method public boolean shouldPreTrimNewPage(int maxSize, int requiredRemaining, int countToBeAdded);
    method public androidx.paging.PagedStorage<T> snapshot();
    property public T? firstLoadedItem;
    property public int firstLoadedItemIndex;
    property public final boolean isTiled;
    property public T? lastLoadedItem;
    property public int lastLoadedItemIndex;
    property public final int leadingNullCount;
    property public final int loadedCount;
    property public final int middleOfLoadedRange;
    property public final int numberAppended;
    property public final int numberPrepended;
    property public final int pageCount;
    property public final int positionOffset;
    property public int size;
    property public final int storageCount;
    property public final int trailingNullCount;
  }

  public abstract class PositionalDataSource<T> extends androidx.paging.ListenablePositionalDataSource<T> {
    ctor public PositionalDataSource();
    method public static final int computeInitialLoadPosition(androidx.paging.PositionalDataSource.LoadInitialParams params, int totalCount);
    method public static final int computeInitialLoadSize(androidx.paging.PositionalDataSource.LoadInitialParams params, int initialLoadPosition, int totalCount);
    method public boolean isContiguous$lintWithKotlin();
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePositionalDataSource.InitialResult<T>> loadInitial(androidx.paging.ListenablePositionalDataSource.LoadInitialParams params);
    method @WorkerThread public abstract void loadInitial(androidx.paging.PositionalDataSource.LoadInitialParams params, androidx.paging.PositionalDataSource.LoadInitialCallback<T> callback);
    method public final com.google.common.util.concurrent.ListenableFuture<androidx.paging.ListenablePositionalDataSource.RangeResult<T>> loadRange(androidx.paging.ListenablePositionalDataSource.LoadRangeParams params);
    method @WorkerThread public abstract void loadRange(androidx.paging.PositionalDataSource.LoadRangeParams params, androidx.paging.PositionalDataSource.LoadRangeCallback<T> callback);
    method public final <V> androidx.paging.PositionalDataSource<V> map(androidx.arch.core.util.Function<T,V> function);
    method public final <V> androidx.paging.PositionalDataSource<V> mapByPage(androidx.arch.core.util.Function<java.util.List<T>,java.util.List<V>> function);
    field public static final androidx.paging.PositionalDataSource.Companion! Companion;
  }

  public static final class PositionalDataSource.Companion {
    method public int computeInitialLoadPosition(androidx.paging.PositionalDataSource.LoadInitialParams params, int totalCount);
    method public int computeInitialLoadSize(androidx.paging.PositionalDataSource.LoadInitialParams params, int initialLoadPosition, int totalCount);
  }

  public abstract static class PositionalDataSource.LoadInitialCallback<T> {
    ctor public PositionalDataSource.LoadInitialCallback();
    method public void onError(Throwable error);
    method public abstract void onResult(java.util.List<? extends T> data, int position, int totalCount);
    method public abstract void onResult(java.util.List<? extends T> data, int position);
  }

  public static class PositionalDataSource.LoadInitialParams extends androidx.paging.ListenablePositionalDataSource.LoadInitialParams {
    ctor public PositionalDataSource.LoadInitialParams(int requestedStartPosition, int requestedLoadSize, int pageSize, boolean placeholdersEnabled);
  }

  public abstract static class PositionalDataSource.LoadRangeCallback<T> {
    ctor public PositionalDataSource.LoadRangeCallback();
    method public void onError(Throwable error);
    method public abstract void onResult(java.util.List<? extends T> data);
  }

  public static class PositionalDataSource.LoadRangeParams extends androidx.paging.ListenablePositionalDataSource.LoadRangeParams {
    ctor public PositionalDataSource.LoadRangeParams(int startPosition, int loadSize);
  }

}

