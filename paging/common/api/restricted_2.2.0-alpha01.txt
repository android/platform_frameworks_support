// Signature format: 3.0
package androidx.paging {


  public static final class ContiguousPagedList.Companion {
    method public int getAppendItemsRequested(int prefetchDistance, int index, int itemsBeforeTrailingNulls);
    method public int getPrependItemsRequested(int prefetchDistance, int index, int leadingNulls);
  }

  public abstract class DataSource<Key, Value> {
  }



  public abstract class PagedList<T> extends java.util.AbstractList<T> {
  }

  public final class PagedStorage<T> extends java.util.AbstractList<T> {
  }


  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public abstract class TiledDataSource<T> extends androidx.paging.PositionalDataSource<T> {
    ctor @Deprecated public TiledDataSource();
    method @Deprecated @WorkerThread public abstract int countItems();
    method @Deprecated public void loadInitial(androidx.paging.PositionalDataSource.LoadInitialParams params, androidx.paging.PositionalDataSource.LoadInitialCallback<T> callback);
    method @Deprecated @WorkerThread public abstract java.util.List<T>? loadRange(int startPosition, int count);
    method @Deprecated public void loadRange(androidx.paging.PositionalDataSource.LoadRangeParams params, androidx.paging.PositionalDataSource.LoadRangeCallback<T> callback);
  }

}

package androidx.paging.futures {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DirectExecutor implements java.util.concurrent.Executor {
    method public void execute(Runnable runnable);
    field public static final androidx.paging.futures.DirectExecutor.Companion! Companion;
  }

  public static final class DirectExecutor.Companion {
    method public androidx.paging.futures.DirectExecutor getINSTANCE();
    method public void setINSTANCE(androidx.paging.futures.DirectExecutor p);
    property public final androidx.paging.futures.DirectExecutor INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface FutureCallback<V> {
    method public void onError(Throwable throwable);
    method public void onSuccess(V? value);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Futures {
    method public <V> void addCallback(com.google.common.util.concurrent.ListenableFuture<? extends V> future, androidx.paging.futures.FutureCallback<? super V> callback, java.util.concurrent.Executor executor);
    method public <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<? extends I> input, androidx.arch.core.util.Function<? super I,? extends O> function, java.util.concurrent.Executor executor);
  }

}

