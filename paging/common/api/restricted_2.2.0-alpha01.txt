// Signature format: 3.0
package androidx.paging {


  public abstract class DataSource<Key, Value> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final void initExecutor(java.util.concurrent.Executor executor);
  }




  public abstract class ListenableItemKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final Key! getKeyInternal$lintWithKotlin(Value? item);
  }

  public abstract class ListenablePageKeyedDataSource<Key, Value> extends androidx.paging.DataSource<Key,Value> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public Key! getKeyInternal$lintWithKotlin(Value? item);
  }

  public abstract class ListenablePositionalDataSource<T> extends androidx.paging.DataSource<java.lang.Integer,T> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final Integer! getKeyInternal$lintWithKotlin(T? item);
  }

  public abstract class PagedList<T> extends java.util.AbstractList<T> {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final <K, T> com.google.common.util.concurrent.ListenableFuture<androidx.paging.PagedList<T>> create(androidx.paging.DataSource<K,T> dataSource, java.util.concurrent.Executor notifyExecutor, java.util.concurrent.Executor fetchExecutor, java.util.concurrent.Executor initialLoadExecutor, androidx.paging.PagedList.BoundaryCallback<T>? boundaryCallback, androidx.paging.PagedList.Config config, K? key);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final androidx.paging.PagedStorage<T> getStorage();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract boolean isContiguous();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setInitialLoadState(androidx.paging.PagedList.LoadState loadState, Throwable? error);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final class PagedList.Companion {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public <K, T> com.google.common.util.concurrent.ListenableFuture<androidx.paging.PagedList<T>> create(androidx.paging.DataSource<K,T> dataSource, java.util.concurrent.Executor notifyExecutor, java.util.concurrent.Executor fetchExecutor, java.util.concurrent.Executor initialLoadExecutor, androidx.paging.PagedList.BoundaryCallback<T>? boundaryCallback, androidx.paging.PagedList.Config config, K? key);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract static class PagedList.LoadStateManager {
    method public final void dispatchCurrentLoadState(androidx.paging.PagedList.LoadStateListener listener);
    method public final androidx.paging.PagedList.LoadState getEnd();
    method public final androidx.paging.PagedList.LoadState getRefresh();
    method public final androidx.paging.PagedList.LoadState getStart();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract void onStateChanged(androidx.paging.PagedList.LoadType type, androidx.paging.PagedList.LoadState state, Throwable? error);
    method public final void setState(androidx.paging.PagedList.LoadType type, androidx.paging.PagedList.LoadState state, Throwable? error);
    property public final androidx.paging.PagedList.LoadState end;
    property public final androidx.paging.PagedList.LoadState refresh;
    property public final androidx.paging.PagedList.LoadState start;
  }




}

package androidx.paging.futures {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DirectExecutor implements java.util.concurrent.Executor {
    method public void execute(Runnable runnable);
    field public static final androidx.paging.futures.DirectExecutor.Companion! Companion;
  }

  public static final class DirectExecutor.Companion {
    method public androidx.paging.futures.DirectExecutor getINSTANCE();
    property public final androidx.paging.futures.DirectExecutor INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface FutureCallback<V> {
    method public void onError(Throwable throwable);
    method public void onSuccess(V? value);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Futures {
    method public static <V> void addCallback(com.google.common.util.concurrent.ListenableFuture<? extends V> future, androidx.paging.futures.FutureCallback<? super V> callback, java.util.concurrent.Executor executor);
    method public <I, O> com.google.common.util.concurrent.ListenableFuture<O> transform(com.google.common.util.concurrent.ListenableFuture<? extends I> input, androidx.arch.core.util.Function<? super I,? extends O> function, java.util.concurrent.Executor executor);
  }

}

