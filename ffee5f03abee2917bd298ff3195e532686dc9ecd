{
  "comments": [
    {
      "key": {
        "uuid": "9fb10655_6c216dc8",
        "filename": "ui/core/src/main/java/androidx/ui/core/Constraints.kt",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1292888
      },
      "writtenOn": "2019-07-03T11:08:26Z",
      "side": 1,
      "message": "This will try to produce invalid constraints (and crash) if maxWidth or maxHeight are infinite. I think you should check for this, and use the min constraint if that happens. Also update the test.",
      "range": {
        "startLine": 177,
        "startChar": 29,
        "endLine": 177,
        "endChar": 81
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34e29fc1_dc8b8d4e",
        "filename": "ui/core/src/main/java/androidx/ui/core/Constraints.kt",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1521727
      },
      "writtenOn": "2019-07-03T17:15:12Z",
      "side": 1,
      "message": "Done. I now check if the constraint is bounded before tightening it.",
      "parentUuid": "9fb10655_6c216dc8",
      "range": {
        "startLine": 177,
        "startChar": 29,
        "endLine": 177,
        "endChar": 81
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d15fc1a4_154d704a",
        "filename": "ui/core/src/test/java/androidx/ui/core/ConstraintsTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1292888
      },
      "writtenOn": "2019-07-03T11:08:26Z",
      "side": 1,
      "message": "nit: I see loose() uses these values as well, but if I were to write that test again, I would use 4 different values here, just to make sure\nfun Constraints.tightMax() \u003d this.withTight(width \u003d maxWidth, height \u003d maxWidth)\nwould fail :) would you mind changing this and loose() as well?",
      "range": {
        "startLine": 135,
        "startChar": 38,
        "endLine": 135,
        "endChar": 64
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2374d70b_a01ba2c3",
        "filename": "ui/core/src/test/java/androidx/ui/core/ConstraintsTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1521727
      },
      "writtenOn": "2019-07-03T17:15:12Z",
      "side": 1,
      "message": "Done. I added tests to check that loose and tight behave correctly on unbounded constraints.",
      "parentUuid": "d15fc1a4_154d704a",
      "range": {
        "startLine": 135,
        "startChar": 38,
        "endLine": 135,
        "endChar": 64
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d308b77_a94e8d71",
        "filename": "ui/core/src/test/java/androidx/ui/core/ConstraintsTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1292888
      },
      "writtenOn": "2019-07-03T17:29:49Z",
      "side": 1,
      "message": "I think you should keep this test and add the @Test annotation to it.. not sure why the annotation is missing, but it means the test is currently not ran.",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 18
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd7be7f_a4a27540",
        "filename": "ui/core/src/test/java/androidx/ui/core/ConstraintsTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 140,
      "author": {
        "id": 1521727
      },
      "writtenOn": "2019-07-03T18:14:23Z",
      "side": 1,
      "message": "Not sure how that hapenned, but it\u0027s all fixed now.",
      "parentUuid": "6d308b77_a94e8d71",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 18
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c51bfc1d_02f33105",
        "filename": "ui/layout/src/androidTest/java/androidx/ui/layout/test/StackTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1292888
      },
      "writtenOn": "2019-07-03T11:08:26Z",
      "side": 1,
      "message": "I don\u0027t think testing the WithConstraints layout behavior brings much value to the test - this is the responsibility of WithConstraintsTest. In StackTest I think making sure that the children are measured with the right constraints according to the fit (which you already do) is enough. So I would remove these SaveLayoutInfos and the checks below which are based on them.",
      "range": {
        "startLine": 284,
        "startChar": 36,
        "endLine": 288,
        "endChar": 37
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3665c3a7_f2899108",
        "filename": "ui/layout/src/androidTest/java/androidx/ui/layout/test/StackTest.kt",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1521727
      },
      "writtenOn": "2019-07-03T17:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c51bfc1d_02f33105",
      "range": {
        "startLine": 284,
        "startChar": 36,
        "endLine": 288,
        "endChar": 37
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cd59453_5856af92",
        "filename": "ui/layout/src/main/java/androidx/ui/layout/Stack.kt",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-07-03T11:36:31Z",
      "side": 1,
      "message": "looks like the combination of StackFit.Expand and alignment never makes sense. if you expand you fill all the space which means top_left alignment even if you specified the other alignment. \nI guess it is worth to introduce separate \"fun expanded(children: @Composable() () -\u003e Unit)\" and keep only two options in StackFit: Loose and PassThrough",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 66,
        "endChar": 39
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0882fda_9f5dc523",
        "filename": "ui/layout/src/main/java/androidx/ui/layout/Stack.kt",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1521727
      },
      "writtenOn": "2019-07-03T17:15:12Z",
      "side": 1,
      "message": "Done. I implemented expanded children as suggested and replaced the fit property with a boolean called \u0027loose\u0027 (where true corresponds to StackFit.Loose and false to StackFit.PassThrough). I kept the StackFit enum because it makes the implementation easier but it is no longer public.",
      "parentUuid": "2cd59453_5856af92",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 66,
        "endChar": 39
      },
      "revId": "ffee5f03abee2917bd298ff3195e532686dc9ecd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}