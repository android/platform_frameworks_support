{
  "comments": [
    {
      "key": {
        "uuid": "23d91583_b388aa95",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-09-28T17:24:53Z",
      "side": 1,
      "message": "Usage:\nclass VM: ViewModel(), ViewModelCoroutineScope { ... }\n\nNot Cool: \n- Can be applied to any class, but will fail in runtime if it is not ViewModel\n- Exposing coroutineScope publicly on ViewModel\n\nCool: \n- Fluent",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3285a678_2f70d76e",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-09-28T23:29:26Z",
      "side": 1,
      "message": "If the idiomatic way to use this is being able to `launch` inside any VM function, then I would go for this implementation since it provides a smooth transition to a world where VM itself can be in Kotlin.\n(seems like this is the desired one based on \nhttps://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#structured-concurrency-lifecycle-and-coroutine-parent-child-hierarchy but idk if that guide is well thought or just a sample)\n\nI\u0027m not worried about being applied to any class since it is called VMCoroutineScope and it crashes fairly ealry. We can even have a lint if you really really want to prevent it faster.",
      "parentUuid": "23d91583_b388aa95",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b57baed_17e4241d",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-01T09:33:32Z",
      "side": 1,
      "message": "Yeah, I\u0027m no sure, what idiomatic should be..it us to define..I tend to this solution as well. Jake, Adam which way in your opinion should be idiomatic? (Jake, I saw your proposal, you defined scope as private val, so we better hide scope from public and define it more explicitly?)",
      "parentUuid": "3285a678_2f70d76e",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49e3fd0f_1e618957",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-05T16:33:05Z",
      "side": 1,
      "message": "Do you want code that grabs a ViewModel to be able to launch jobs in the scope of the ViewModel? If a ViewModel subclass implements CoroutineScope and its real type leaks out to Activity or Fragment code that will be possible, which means we\u0027ll have a new generation of bugs where people accidentally close over their Activity context in a launch lambda that won\u0027t be cancelled when the activity is destroyed. Keeping a private or protected viewModelScope property on the ViewModel itself seems like a safer approach, and leads to very clear code to read:\n\n    viewModelScope.launch {\n        // ...\n    }",
      "parentUuid": "0b57baed_17e4241d",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76a4f58_2bf3389d",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-05T17:51:16Z",
      "side": 1,
      "message": "yea that is concerining. Though i think the best way to avoid it is to make sure to have the same extensions for ComponentActivity and Fragment.\n\nWe can also add a lint check to avoid possible error.\n\nUsing VM scope to launch while you are in an actiivty sounds wrong, definitely. \nBut I also don\u0027t like providing a sub-optimal API to the intended use case because of possible unintended use cases. Lint can help mitigate the concerns.",
      "parentUuid": "49e3fd0f_1e618957",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d19f2b74_35acb3ec",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-05T17:59:39Z",
      "side": 1,
      "message": "I think it is better to start with safest option (#3),  because it is the only one that creates scope object  (in contrast to all other solutions that makes viewmodel to implement CoroutineScope).",
      "parentUuid": "b76a4f58_2bf3389d",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ca41c9d_68ba494f",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-05T18:15:33Z",
      "side": 1,
      "message": "but other options are the ones that look like the JB examples.\nI don\u0027t want to look at this problem as \"what is the cheapest\" instead \"what is the best API\"\nI don\u0027t anticipate apps launching hundreds of coroutines form a VM so allocations shouldnt be a concern unless these objects are really expensive (idk).",
      "parentUuid": "d19f2b74_35acb3ec",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8f5277d_dadee2b8",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-09-29T01:19:44Z",
      "side": 1,
      "message": "Every single one of these options allocates on every access which seems far from ideal",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0706d64_c3028f05",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-09-28T17:24:53Z",
      "side": 1,
      "message": "class VM: ViewModel() {\n   fun foo() \u003d coroutineScope().launch { ... }\n}\n\nNot Cool: \n- Less fluent than #1\n- Exposing coroutineScope publicly on ViewModel\n\nCool: \n- in compare to #1, no runtime failures",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2540f4f5_32f3ffb4",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-09-28T23:29:26Z",
      "side": 1,
      "message": "i think i\u0027d rather this be an extension properly.\n\nso if the idiomatic way is having the scope has a field, then this is good.",
      "parentUuid": "f0706d64_c3028f05",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d79a6a4_adb20a40",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-09-29T01:19:44Z",
      "side": 1,
      "message": "Two allocations per access here!",
      "parentUuid": "2540f4f5_32f3ffb4",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c563b49f_9e559dc1",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-09-28T17:24:53Z",
      "side": 1,
      "message": "class AVM: ViewModel(), ViewModelCoroutineScope {\n    private val scope by ViewModelCoroutineScopeDelegate()\n    fun foo() \u003d scope.launch { ... }\n}\n\nNot cool:\n- Less fluent than #1 and #2\n\nCool:\n- no runtime failure\n- can be private",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03da1ea8_ee3d3580",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-09-28T23:29:26Z",
      "side": 1,
      "message": "this is too much code. but I think we don\u0027t need `ViewModelCoroutineScope` to implement this, do we ?\nif it can be a \"just delegate\" scope than it would be fine. \nIn a world where VM can be in kotlin, this is probably not what we want though.",
      "parentUuid": "c563b49f_9e559dc1",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0c1d610_51ad1dc9",
        "filename": "lifecycle/viewmodel/ktx/src/main/java/androidx/lifecycle/ViewModelCoroutineScope.kt",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-09-29T01:19:44Z",
      "side": 1,
      "message": "Remove `get()` to prevent allocating on every invocation",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d18282a4_80e6e98d",
        "filename": "lifecycle/viewmodel/src/main/java/androidx/lifecycle/ViewModel.java",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-05T16:33:05Z",
      "side": 1,
      "message": "Should this be AutoCloseable?",
      "revId": "a93ac8a1cbd51b941933edbfb694464cc47c6b48",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}