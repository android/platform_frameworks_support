package androidx.collection {

  public final class ArrayMapKt {
    ctor public ArrayMapKt();
    method public static <K, V> androidx.collection.ArrayMap<K, V> arrayMapOf();
    method public static <K, V> androidx.collection.ArrayMap<K, V> arrayMapOf(kotlin.Pair<? extends K, ? extends V>...);
  }

  public final class ArraySetKt {
    ctor public ArraySetKt();
    method public static <T> androidx.collection.ArraySet<T> arraySetOf();
    method public static <T> androidx.collection.ArraySet<T> arraySetOf(T...);
  }

  public final class LongSparseArrayKt {
    ctor public LongSparseArrayKt();
    method public static <T> boolean contains(androidx.collection.LongSparseArray<T>, long);
    method public static <T> void forEach(androidx.collection.LongSparseArray<T>, kotlin.jvm.functions.Function2<? super java.lang.Long, ? super T, kotlin.Unit>);
    method public static <T> T getOrDefault(androidx.collection.LongSparseArray<T>, long, T);
    method public static <T> T getOrElse(androidx.collection.LongSparseArray<T>, long, kotlin.jvm.functions.Function0<? extends T>);
    method public static <T> int getSize(androidx.collection.LongSparseArray<T>);
    method public static <T> boolean isNotEmpty(androidx.collection.LongSparseArray<T>);
    method public static <T> kotlin.collections.LongIterator keyIterator(androidx.collection.LongSparseArray<T>);
    method public static <T> androidx.collection.LongSparseArray<T> plus(androidx.collection.LongSparseArray<T>, androidx.collection.LongSparseArray<T>);
    method public static <T> boolean remove(androidx.collection.LongSparseArray<T>, long, T);
    method public static <T> void set(androidx.collection.LongSparseArray<T>, long, T);
    method public static <T> java.util.Iterator<T> valueIterator(androidx.collection.LongSparseArray<T>);
  }

  public final class LruCacheKt {
    ctor public LruCacheKt();
    method public static <K, V> androidx.collection.LruCache<K, V> lruCache(int, kotlin.jvm.functions.Function2<? super K, ? super V, java.lang.Integer>, kotlin.jvm.functions.Function1<? super K, ? extends V>, kotlin.jvm.functions.Function4<? super java.lang.Boolean, ? super K, ? super V, ? super V, kotlin.Unit>);
  }

  public final class SparseArrayKt {
    ctor public SparseArrayKt();
    method public static <T> boolean contains(androidx.collection.SparseArrayCompat<T>, int);
    method public static <T> void forEach(androidx.collection.SparseArrayCompat<T>, kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, kotlin.Unit>);
    method public static <T> T getOrDefault(androidx.collection.SparseArrayCompat<T>, int, T);
    method public static <T> T getOrElse(androidx.collection.SparseArrayCompat<T>, int, kotlin.jvm.functions.Function0<? extends T>);
    method public static <T> int getSize(androidx.collection.SparseArrayCompat<T>);
    method public static <T> boolean isNotEmpty(androidx.collection.SparseArrayCompat<T>);
    method public static <T> kotlin.collections.IntIterator keyIterator(androidx.collection.SparseArrayCompat<T>);
    method public static <T> androidx.collection.SparseArrayCompat<T> plus(androidx.collection.SparseArrayCompat<T>, androidx.collection.SparseArrayCompat<T>);
    method public static <T> boolean remove(androidx.collection.SparseArrayCompat<T>, int, T);
    method public static <T> void set(androidx.collection.SparseArrayCompat<T>, int, T);
    method public static <T> java.util.Iterator<T> valueIterator(androidx.collection.SparseArrayCompat<T>);
  }

}

