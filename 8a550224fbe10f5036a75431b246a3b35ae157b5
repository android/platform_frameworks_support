{
  "comments": [
    {
      "key": {
        "uuid": "521deac3_5bfa24b3",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 292,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-20T23:42:42Z",
      "side": 1,
      "message": "Can we have a test with one of the @Embedded having a prefix but no alias in the query.\n\nI can\u0027t tell if the table alias needs to match the prefix for this to work of this is just a coincidence.",
      "range": {
        "startLine": 292,
        "startChar": 51,
        "endLine": 292,
        "endChar": 56
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29584871_d9521155",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 292,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2019-06-21T05:56:00Z",
      "side": 1,
      "message": "They have to match. Otherwise we cannot tell which table in the SQL corresponds to which @Embedded.",
      "parentUuid": "521deac3_5bfa24b3",
      "range": {
        "startLine": 292,
        "startChar": 51,
        "endLine": 292,
        "endChar": 56
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221e4da6_ed2b3ba8",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 292,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-21T21:12:07Z",
      "side": 1,
      "message": "Then we need to add documentation to @Embedded and this (new?) ability to alias a table name with an embedded prefix to redirect the embedded to that table. Otherwise @Embedded prefix up to this change has only affected column names.",
      "parentUuid": "29584871_d9521155",
      "range": {
        "startLine": 292,
        "startChar": 51,
        "endLine": 292,
        "endChar": 56
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8677c5f0_40956a51",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 292,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2019-06-26T06:43:50Z",
      "side": 1,
      "message": "I\u0027m still wondering what is the best way to document this feature, but for now, I added a gate flag \"room.expandProjection\".",
      "parentUuid": "221e4da6_ed2b3ba8",
      "range": {
        "startLine": 292,
        "startChar": 51,
        "endLine": 292,
        "endChar": 56
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f2a529e_f4dddfae",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 353,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-20T23:42:42Z",
      "side": 1,
      "message": "When do we decide to add the table name?\n\nCan we have a test where the method returns User but the query is a JOIN with a conflicting column, like \"SELECT * FROM user JOIN employee ON (user.id \u003d\u003d employee.id)\", both tables having id.",
      "range": {
        "startLine": 353,
        "startChar": 32,
        "endLine": 353,
        "endChar": 38
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56b1cc35_fe18820e",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 353,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2019-06-21T05:56:00Z",
      "side": 1,
      "message": "When @Embedded does not have prefix.\n\nWe can add that test, and QueryInterpreter can write projection for that, but that SQL is useless. SQLite never gives us the second `id` column. The same is true if you spell out the columns yourself.",
      "parentUuid": "3f2a529e_f4dddfae",
      "range": {
        "startLine": 353,
        "startChar": 32,
        "endLine": 353,
        "endChar": 38
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b5256b_7c42abc1",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 353,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-21T21:12:07Z",
      "side": 1,
      "message": "Then the SQL transformation fails with in this change where it didn\u0027t used to before. By expanding the start projection on a not embedded POJO you end up not using the table name and the column \u0027id\u0027 will be ambiguous. The use-case here doesn\u0027t care about the 2nd \u0027id\u0027 column, but wants to JOIN on it.\n\nTo repro add to ToyDao:\n```\n@Query(\"SELECT * FROM user JOIN toy ON (user.mId \u003d\u003d toy.mId)\")\nList\u003cUser\u003e getUserWithMatchingToyId();\n```",
      "parentUuid": "56b1cc35_fe18820e",
      "range": {
        "startLine": 353,
        "startChar": 32,
        "endLine": 353,
        "endChar": 38
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4390c092_677d4bfd",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 353,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2019-06-25T08:23:28Z",
      "side": 1,
      "message": "Hmm, you\u0027re right.\n\nThere are some patterns where we need to prefix table names, but there are some patterns we should not.\n\nIn that example, the columns should be prefixed with \"User.\", or otherwise it fails. However, that\u0027s not enough. On JB and below, doing \"SELECT `User`.`mId`...\" gives us back \"`User`.`mId`\" in the cursor, as opposed to \"mId\" on newer platforms.\n\nIt\u0027s getting very complicated, and I don\u0027t know what to do about this.",
      "parentUuid": "39b5256b_7c42abc1",
      "range": {
        "startLine": 353,
        "startChar": 32,
        "endLine": 353,
        "endChar": 38
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38ca47d2_7794d9f9",
        "filename": "room/compiler/src/test/kotlin/androidx/room/processor/QueryInterpreterTest.kt",
        "patchSetId": 11
      },
      "lineNbr": 353,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2019-06-26T06:43:50Z",
      "side": 1,
      "message": "Done. Added QueryInterpreterTest#joinAndAbandon() for this pattern.",
      "parentUuid": "4390c092_677d4bfd",
      "range": {
        "startLine": 353,
        "startChar": 32,
        "endLine": 353,
        "endChar": 38
      },
      "revId": "8a550224fbe10f5036a75431b246a3b35ae157b5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}