// Signature format: 2.0
package androidx.media2 {

  @VisibleForTesting(otherwise=androidx.annotation.VisibleForTesting.PACKAGE_PRIVATE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public class AudioFocusHandler {
    ctor AudioFocusHandler(android.content.Context!, androidx.media2.MediaPlayer!);
    method public void close();
    method public void onPause();
    method public boolean onPlay();
    method public void onReset();
    method public void sendIntent(android.content.Intent!);
    field private static final boolean DEBUG = true;
    field private static final String TAG = "AudioFocusHandler";
    field private final androidx.media2.AudioFocusHandler.AudioFocusHandlerImpl! mImpl;
  }

  static interface AudioFocusHandler.AudioFocusHandlerImpl {
    method public void close();
    method public void onPause();
    method public boolean onPlay();
    method public void onReset();
    method public void sendIntent(android.content.Intent!);
  }

  private static class AudioFocusHandler.AudioFocusHandlerImplBase implements androidx.media2.AudioFocusHandler.AudioFocusHandlerImpl {
    ctor AudioFocusHandler.AudioFocusHandlerImplBase(android.content.Context!, androidx.media2.MediaPlayer!);
    method @GuardedBy("mLock") private void abandonAudioFocusLocked();
    method public void close();
    method private static int convertAudioAttributesToFocusGain(androidx.media.AudioAttributesCompat!);
    method public void onPause();
    method public boolean onPlay();
    method public void onReset();
    method @GuardedBy("mLock") private void registerBecomingNoisyReceiverLocked();
    method @GuardedBy("mLock") private boolean requestAudioFocusLocked();
    method public void sendIntent(android.content.Intent!);
    method @GuardedBy("mLock") private void unregisterBecomingNoisyReceiverLocked();
    field private static final float VOLUME_DUCK_FACTOR = 0.2f;
    field @GuardedBy("mLock") androidx.media.AudioAttributesCompat! mAudioAttributes;
    field private final android.media.AudioManager.OnAudioFocusChangeListener! mAudioFocusListener;
    field private final android.media.AudioManager! mAudioManager;
    field private final android.content.BroadcastReceiver! mBecomingNoisyReceiver;
    field @GuardedBy("mLock") boolean mBecomingNoisyReceiverRegistered;
    field private final android.content.Context! mContext;
    field @GuardedBy("mLock") private int mCurrentFocusGainType;
    field private final android.content.IntentFilter! mIntentFilter;
    field final Object! mLock;
    field final androidx.media2.MediaPlayer! mPlayer;
    field @GuardedBy("mLock") boolean mResumeWhenAudioFocusGain;
  }

  private class AudioFocusHandler.AudioFocusHandlerImplBase.AudioFocusListener implements android.media.AudioManager.OnAudioFocusChangeListener {
    ctor AudioFocusHandler.AudioFocusHandlerImplBase.AudioFocusListener();
    field private float mPlayerDuckingVolume;
    field private float mPlayerVolumeBeforeDucking;
  }

  private class AudioFocusHandler.AudioFocusHandlerImplBase.BecomingNoisyReceiver extends android.content.BroadcastReceiver {
    ctor AudioFocusHandler.AudioFocusHandlerImplBase.BecomingNoisyReceiver();
  }

  interface BaseResult2 {
    method public long getCompletionTime();
    method public androidx.media2.MediaItem2? getMediaItem();
    method public int getResultCode();
    field public static final int RESULT_CODE_BAD_VALUE = -3; // 0xfffffffd
    field public static final int RESULT_CODE_INVALID_STATE = -2; // 0xfffffffe
    field public static final int RESULT_CODE_IO_ERROR = -5; // 0xfffffffb
    field public static final int RESULT_CODE_NOT_SUPPORTED = -6; // 0xfffffffa
    field public static final int RESULT_CODE_PERMISSION_DENIED = -4; // 0xfffffffc
    field public static final int RESULT_CODE_SKIPPED = 1; // 0x1
    field public static final int RESULT_CODE_SUCCESS = 0; // 0x0
    field public static final int RESULT_CODE_UNKNOWN_ERROR = -1; // 0xffffffff
  }

  public class CallbackMediaItem2 extends androidx.media2.MediaItem2 {
    ctor CallbackMediaItem2();
    ctor CallbackMediaItem2(androidx.media2.CallbackMediaItem2.Builder!);
    field androidx.media2.DataSourceCallback2! mDataSourceCallback2;
  }

  public static final class CallbackMediaItem2.Builder extends androidx.media2.MediaItem2.BuilderBase<androidx.media2.CallbackMediaItem2.Builder> {
    field androidx.media2.DataSourceCallback2! mDataSourceCallback2;
  }

  class ConnectedControllersManager<T> {
    ctor ConnectedControllersManager(androidx.media2.MediaSession2.MediaSession2Impl!);
    method public void addController(T!, androidx.media2.MediaSession2.ControllerInfo!, androidx.media2.SessionCommandGroup2!);
    method public java.util.List<androidx.media2.MediaSession2.ControllerInfo>! getConnectedControllers();
    method public androidx.media2.MediaSession2.ControllerInfo! getController(T!);
    method public androidx.media2.SequencedFutureManager? getSequencedFutureManager(androidx.media2.MediaSession2.ControllerInfo?);
    method public androidx.media2.SequencedFutureManager? getSequencedFutureManager(T?);
    method public boolean isAllowedCommand(androidx.media2.MediaSession2.ControllerInfo!, androidx.media2.SessionCommand2!);
    method public boolean isAllowedCommand(androidx.media2.MediaSession2.ControllerInfo!, int);
    method public boolean isConnected(androidx.media2.MediaSession2.ControllerInfo!);
    method private void notifyDisconnected(androidx.media2.MediaSession2.ControllerInfo!);
    method public void removeController(T!);
    method public void removeController(androidx.media2.MediaSession2.ControllerInfo!);
    method public void updateAllowedCommands(androidx.media2.MediaSession2.ControllerInfo!, androidx.media2.SessionCommandGroup2!);
    field private static final boolean DEBUG;
    field private static final String TAG = "MS2ControllerMgr";
    field @GuardedBy("mLock") private final androidx.collection.ArrayMap<androidx.media2.MediaSession2.ControllerInfo,androidx.media2.SessionCommandGroup2>! mAllowedCommandGroupMap;
    field @GuardedBy("mLock") private final androidx.collection.ArrayMap<androidx.media2.MediaSession2.ControllerInfo,androidx.media2.SequencedFutureManager>! mControllerToSequencedFutureManager;
    field @GuardedBy("mLock") private final androidx.collection.ArrayMap<T,androidx.media2.MediaSession2.ControllerInfo>! mControllers;
    field @GuardedBy("mLock") private final androidx.collection.ArrayMap<androidx.media2.MediaSession2.ControllerInfo,T>! mKeys;
    field private final Object! mLock;
    field final androidx.media2.MediaSession2.MediaSession2Impl! mSessionImpl;
  }

  public class FileMediaItem2 extends androidx.media2.MediaItem2 {
    ctor FileMediaItem2();
    ctor FileMediaItem2(androidx.media2.FileMediaItem2.Builder!);
    field java.io.FileDescriptor! mFD;
    field long mFDLength;
    field long mFDOffset;
  }

  public static final class FileMediaItem2.Builder extends androidx.media2.MediaItem2.BuilderBase<androidx.media2.FileMediaItem2.Builder> {
    field java.io.FileDescriptor! mFD;
    field long mFDLength;
    field long mFDOffset;
  }

  public final class HeartRating2 implements androidx.media2.Rating2 {
    field boolean mHasHeart;
    field boolean mIsRated;
  }

  public class MediaBrowser2 extends androidx.media2.MediaController2 {
    method private static com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! createDisconnectedFuture();
    method androidx.media2.MediaBrowser2.MediaBrowser2Impl! createImpl(android.content.Context, androidx.media2.SessionToken2, java.util.concurrent.Executor, androidx.media2.MediaController2.ControllerCallback);
    method androidx.media2.MediaBrowser2.BrowserCallback! getCallback();
    method androidx.media2.MediaBrowser2.MediaBrowser2Impl! getImpl();
    field static final boolean DEBUG;
    field static final String TAG = "MediaBrowser2";
  }

  public static class MediaBrowser2.BrowserResult extends androidx.versionedparcelable.CustomVersionedParcelable implements androidx.media2.RemoteResult2 {
    ctor MediaBrowser2.BrowserResult();
    ctor MediaBrowser2.BrowserResult(int);
    ctor MediaBrowser2.BrowserResult(int, androidx.media2.MediaItem2?, androidx.media2.MediaLibraryService2.LibraryParams?);
    ctor MediaBrowser2.BrowserResult(int, java.util.List<androidx.media2.MediaItem2>?, androidx.media2.MediaLibraryService2.LibraryParams?);
    ctor MediaBrowser2.BrowserResult(int, androidx.media2.MediaItem2?, java.util.List<androidx.media2.MediaItem2>?, androidx.media2.MediaLibraryService2.LibraryParams?);
    ctor MediaBrowser2.BrowserResult(int, androidx.media2.MediaItem2?, java.util.List<androidx.media2.MediaItem2>?, androidx.media2.MediaLibraryService2.LibraryParams?, long);
    method static com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! createFutureWithResult(int);
    method static androidx.media2.MediaBrowser2.BrowserResult! from(androidx.media2.MediaLibraryService2.LibraryResult?);
    field long mCompletionTime;
    field androidx.media2.MediaItem2! mItem;
    field java.util.List<androidx.media2.MediaItem2>! mItemList;
    field androidx.media2.ParcelImplListSlice! mItemListSlice;
    field androidx.media2.MediaLibraryService2.LibraryParams! mParams;
    field int mResultCode;
  }

  @IntDef(flag=false, value={androidx.media2.BaseResult2.RESULT_CODE_SUCCESS, androidx.media2.BaseResult2.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult2.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult2.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult2.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult2.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult2.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult2.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult2.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult2.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult2.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult2.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult2.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult2.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult2.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult2.RESULT_CODE_SETUP_REQUIRED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaBrowser2.BrowserResult.ResultCode {
  }

  static interface MediaBrowser2.MediaBrowser2Impl extends androidx.media2.MediaController2.MediaController2Impl {
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getChildren(String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getItem(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getLibraryRoot(androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getSearchResult(String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! search(String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! subscribe(String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! unsubscribe(String);
  }

  class MediaBrowser2ImplBase extends androidx.media2.MediaController2ImplBase implements androidx.media2.MediaBrowser2.MediaBrowser2Impl {
    ctor MediaBrowser2ImplBase(android.content.Context!, androidx.media2.MediaController2!, androidx.media2.SessionToken2!, java.util.concurrent.Executor!, androidx.media2.MediaBrowser2.BrowserCallback!);
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! dispatchRemoteLibrarySessionTask(int, androidx.media2.MediaBrowser2ImplBase.RemoteLibrarySessionTask!);
    method public androidx.media2.MediaBrowser2.BrowserCallback! getCallback();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getChildren(String!, int, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getItem(String!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getLibraryRoot(androidx.media2.MediaLibraryService2.LibraryParams!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getSearchResult(String!, int, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! search(String!, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! subscribe(String!, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! unsubscribe(String!);
    field private static final androidx.media2.MediaBrowser2.BrowserResult! RESULT_WHEN_CLOSED;
  }

  @java.lang.FunctionalInterface private static interface MediaBrowser2ImplBase.RemoteLibrarySessionTask {
    method public void run(IMediaSession2!, int) throws android.os.RemoteException;
  }

  class MediaBrowser2ImplLegacy extends androidx.media2.MediaController2ImplLegacy implements androidx.media2.MediaBrowser2.MediaBrowser2Impl {
    ctor MediaBrowser2ImplLegacy(android.content.Context, androidx.media2.MediaBrowser2!, androidx.media2.SessionToken2, java.util.concurrent.Executor, androidx.media2.MediaBrowser2.BrowserCallback);
    method private static android.os.Bundle! createBundle(androidx.media2.MediaLibraryService2.LibraryParams?);
    method androidx.media2.MediaItem2! createRootMediaItem(android.support.v4.media.MediaBrowserCompat);
    method private android.support.v4.media.MediaBrowserCompat! getBrowserCompat(androidx.media2.MediaLibraryService2.LibraryParams!);
    method public androidx.media2.MediaBrowser2.BrowserCallback! getCallback();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getChildren(String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method private static android.os.Bundle! getExtras(androidx.media2.MediaLibraryService2.LibraryParams?);
    method public androidx.media2.MediaBrowser2! getInstance();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getItem(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getLibraryRoot(androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! getSearchResult(String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! search(String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! subscribe(String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaBrowser2.BrowserResult>! unsubscribe(String);
    field private static final String TAG = "MB2ImplLegacy";
    field @GuardedBy("mLock") final java.util.HashMap<androidx.media2.MediaLibraryService2.LibraryParams,android.support.v4.media.MediaBrowserCompat>! mBrowserCompats;
    field @GuardedBy("mLock") private final java.util.HashMap<java.lang.String,java.util.List<androidx.media2.MediaBrowser2ImplLegacy.SubscribeCallback>>! mSubscribeCallbacks;
  }

  private class MediaBrowser2ImplLegacy.GetChildrenCallback extends android.support.v4.media.MediaBrowserCompat.SubscriptionCallback {
    ctor MediaBrowser2ImplLegacy.GetChildrenCallback(androidx.concurrent.futures.ResolvableFuture<androidx.media2.MediaBrowser2.BrowserResult>!, String!);
    field final androidx.concurrent.futures.ResolvableFuture<androidx.media2.MediaBrowser2.BrowserResult>! mFuture;
    field final String! mParentId;
  }

  private class MediaBrowser2ImplLegacy.GetLibraryRootCallback extends android.support.v4.media.MediaBrowserCompat.ConnectionCallback {
    ctor MediaBrowser2ImplLegacy.GetLibraryRootCallback(androidx.concurrent.futures.ResolvableFuture<androidx.media2.MediaBrowser2.BrowserResult>!, androidx.media2.MediaLibraryService2.LibraryParams!);
    field final androidx.media2.MediaLibraryService2.LibraryParams! mParams;
    field final androidx.concurrent.futures.ResolvableFuture<androidx.media2.MediaBrowser2.BrowserResult>! mResult;
  }

  private class MediaBrowser2ImplLegacy.SubscribeCallback extends android.support.v4.media.MediaBrowserCompat.SubscriptionCallback {
    ctor MediaBrowser2ImplLegacy.SubscribeCallback();
  }

  class MediaConstants2 {
    ctor private MediaConstants2();
    field static final String ARGUMENT_ALLOWED_COMMANDS = "androidx.media2.argument.ALLOWED_COMMANDS";
    field static final String ARGUMENT_ARGUMENTS = "androidx.media2.argument.ARGUMENTS";
    field static final String ARGUMENT_BUFFERING_STATE = "androidx.media2.argument.BUFFERING_STATE";
    field static final String ARGUMENT_COMMAND_BUTTONS = "androidx.media2.argument.COMMAND_BUTTONS";
    field static final String ARGUMENT_COMMAND_CODE = "androidx.media2.argument.COMMAND_CODE";
    field static final String ARGUMENT_CUSTOM_COMMAND = "androidx.media2.argument.CUSTOM_COMMAND";
    field static final String ARGUMENT_ERROR_CODE = "androidx.media2.argument.ERROR_CODE";
    field static final String ARGUMENT_EXTRAS = "androidx.media2.argument.EXTRAS";
    field static final String ARGUMENT_ICONTROLLER_CALLBACK = "androidx.media2.argument.ICONTROLLER_CALLBACK";
    field static final String ARGUMENT_ITEM_COUNT = "androidx.media2.argument.ITEM_COUNT";
    field static final String ARGUMENT_MEDIA_ID = "androidx.media2.argument.MEDIA_ID";
    field static final String ARGUMENT_MEDIA_ITEM = "androidx.media2.argument.MEDIA_ITEM";
    field static final String ARGUMENT_PACKAGE_NAME = "androidx.media2.argument.PACKAGE_NAME";
    field static final String ARGUMENT_PID = "androidx.media2.argument.PID";
    field static final String ARGUMENT_PLAYBACK_INFO = "androidx.media2.argument.PLAYBACK_INFO";
    field static final String ARGUMENT_PLAYBACK_SPEED = "androidx.media2.argument.PLAYBACK_SPEED";
    field static final String ARGUMENT_PLAYBACK_STATE_COMPAT = "androidx.media2.argument.PLAYBACK_STATE_COMPAT";
    field static final String ARGUMENT_PLAYER_STATE = "androidx.media2.argument.PLAYER_STATE";
    field static final String ARGUMENT_PLAYLIST = "androidx.media2.argument.PLAYLIST";
    field static final String ARGUMENT_PLAYLIST_INDEX = "androidx.media2.argument.PLAYLIST_INDEX";
    field static final String ARGUMENT_PLAYLIST_METADATA = "androidx.media2.argument.PLAYLIST_METADATA";
    field static final String ARGUMENT_QUERY = "androidx.media2.argument.QUERY";
    field static final String ARGUMENT_RATING = "androidx.media2.argument.RATING";
    field static final String ARGUMENT_REPEAT_MODE = "androidx.media2.argument.REPEAT_MODE";
    field static final String ARGUMENT_RESULT_RECEIVER = "androidx.media2.argument.RESULT_RECEIVER";
    field static final String ARGUMENT_ROUTE_BUNDLE = "androidx.media2.argument.ROUTE_BUNDLE";
    field static final String ARGUMENT_SEEK_POSITION = "androidx.media2.argument.SEEK_POSITION";
    field static final String ARGUMENT_SHUFFLE_MODE = "androidx.media2.argument.SHUFFLE_MODE";
    field static final String ARGUMENT_UID = "androidx.media2.argument.UID";
    field static final String ARGUMENT_URI = "androidx.media2.argument.URI";
    field static final String ARGUMENT_VOLUME = "androidx.media2.argument.VOLUME";
    field static final String ARGUMENT_VOLUME_DIRECTION = "androidx.media2.argument.VOLUME_DIRECTION";
    field static final String ARGUMENT_VOLUME_FLAGS = "androidx.media2.argument.VOLUME_FLAGS";
    field static final int CONNECT_RESULT_CONNECTED = 0; // 0x0
    field static final int CONNECT_RESULT_DISCONNECTED = -1; // 0xffffffff
    field static final String CONTROLLER_COMMAND_BY_COMMAND_CODE = "androidx.media2.controller.command.BY_COMMAND_CODE";
    field static final String CONTROLLER_COMMAND_BY_CUSTOM_COMMAND = "androidx.media2.controller.command.BY_CUSTOM_COMMAND";
    field static final String CONTROLLER_COMMAND_CONNECT = "androidx.media2.controller.command.CONNECT";
    field static final String CONTROLLER_COMMAND_DISCONNECT = "androidx.media2.controller.command.DISCONNECT";
    field static final String ROOT_EXTRA_DEFAULT = "androidx.media2.root_default_root";
    field static final String SESSION_EVENT_ON_ALLOWED_COMMANDS_CHANGED = "androidx.media2.session.event.ON_ALLOWED_COMMANDS_CHANGED";
    field static final String SESSION_EVENT_ON_BUFFERING_STATE_CHANGED = "androidx.media2.session.event.ON_BUFFERING_STATE_CHANGED";
    field static final String SESSION_EVENT_ON_CHILDREN_CHANGED = "androidx.media2.session.event.ON_CHILDREN_CHANGED";
    field static final String SESSION_EVENT_ON_CURRENT_MEDIA_ITEM_CHANGED = "androidx.media2.session.event.ON_CURRENT_MEDIA_ITEM_CHANGED";
    field static final String SESSION_EVENT_ON_ERROR = "androidx.media2.session.event.ON_ERROR";
    field static final String SESSION_EVENT_ON_PLAYBACK_INFO_CHANGED = "androidx.media2.session.event.ON_PLAYBACK_INFO_CHANGED";
    field static final String SESSION_EVENT_ON_PLAYBACK_SPEED_CHANGED = "androidx.media2.session.event.ON_PLAYBACK_SPEED_CHANGED";
    field static final String SESSION_EVENT_ON_PLAYER_STATE_CHANGED = "androidx.media2.session.event.ON_PLAYER_STATE_CHANGED";
    field static final String SESSION_EVENT_ON_PLAYLIST_CHANGED = "androidx.media2.session.event.ON_PLAYLIST_CHANGED";
    field static final String SESSION_EVENT_ON_PLAYLIST_METADATA_CHANGED = "androidx.media2.session.event.ON_PLAYLIST_METADATA_CHANGED";
    field static final String SESSION_EVENT_ON_REPEAT_MODE_CHANGED = "androidx.media2.session.event.ON_REPEAT_MODE_CHANGED";
    field static final String SESSION_EVENT_ON_ROUTES_INFO_CHANGED = "androidx.media2.session.event.ON_ROUTES_INFO_CHANGED";
    field static final String SESSION_EVENT_ON_SEARCH_RESULT_CHANGED = "androidx.media2.session.event.ON_SEARCH_RESULT_CHANGED";
    field static final String SESSION_EVENT_ON_SEEK_COMPLETED = "androidx.media2.session.event.ON_SEEK_COMPLETED";
    field static final String SESSION_EVENT_ON_SHUFFLE_MODE_CHANGED = "androidx.media2.session.event.ON_SHUFFLE_MODE_CHANGED";
    field static final String SESSION_EVENT_SEND_CUSTOM_COMMAND = "androidx.media2.session.event.SEND_CUSTOM_COMMAND";
    field static final String SESSION_EVENT_SET_CUSTOM_LAYOUT = "androidx.media2.session.event.SET_CUSTOM_LAYOUT";
  }

  public class MediaController2 implements java.lang.AutoCloseable {
    method private static com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! createDisconnectedFuture();
    method androidx.media2.MediaController2.MediaController2Impl! createImpl(android.content.Context, androidx.media2.SessionToken2, java.util.concurrent.Executor, androidx.media2.MediaController2.ControllerCallback);
    method androidx.media2.MediaController2.ControllerCallback getCallback();
    method java.util.concurrent.Executor getCallbackExecutor();
    method androidx.media2.MediaController2.MediaController2Impl! getImpl();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromMediaId(String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromSearch(String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromUri(android.net.Uri, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromMediaId(String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromSearch(String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromUri(android.net.Uri, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! selectRoute(android.os.Bundle);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setTimeDiff(Long!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! subscribeRoutesInfo();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! unsubscribeRoutesInfo();
    field @GuardedBy("mLock") boolean mClosed;
    field @GuardedBy("mLock") androidx.media2.MediaController2.MediaController2Impl! mImpl;
    field final Object! mLock;
    field Long! mTimeDiff;
  }

  public abstract static class MediaController2.ControllerCallback {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onRoutesInfoChanged(androidx.media2.MediaController2, java.util.List<android.os.Bundle>?);
  }

  public static class MediaController2.ControllerResult implements androidx.media2.RemoteResult2 androidx.versionedparcelable.VersionedParcelable {
    ctor MediaController2.ControllerResult();
    ctor MediaController2.ControllerResult(int);
    ctor MediaController2.ControllerResult(int, android.os.Bundle?, androidx.media2.MediaItem2?);
    ctor MediaController2.ControllerResult(int, android.os.Bundle?, androidx.media2.MediaItem2?, long);
    method static com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! createFutureWithResult(int);
    method static androidx.media2.MediaController2.ControllerResult! from(androidx.media2.MediaSession2.SessionResult?);
    field long mCompletionTime;
    field android.os.Bundle! mCustomCommandResult;
    field androidx.media2.MediaItem2! mItem;
    field int mResultCode;
  }

  @IntDef(flag=false, value={androidx.media2.MediaController2.ControllerResult.RESULT_CODE_SUCCESS, androidx.media2.BaseResult2.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult2.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult2.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult2.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult2.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult2.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult2.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult2.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult2.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult2.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult2.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult2.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult2.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult2.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult2.RESULT_CODE_SETUP_REQUIRED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaController2.ControllerResult.ResultCode {
  }

  static interface MediaController2.MediaController2Impl extends java.lang.AutoCloseable {
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! addPlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! adjustVolume(int, int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! fastForward();
    method public android.support.v4.media.MediaBrowserCompat? getBrowserCompat();
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public androidx.media2.MediaController2.ControllerCallback getCallback();
    method public java.util.concurrent.Executor getCallbackExecutor();
    method public androidx.media2.SessionToken2? getConnectedSessionToken();
    method public android.content.Context getContext();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public long getCurrentPosition();
    method public long getDuration();
    method public androidx.media2.MediaController2 getInstance();
    method public androidx.media2.MediaController2.PlaybackInfo? getPlaybackInfo();
    method public float getPlaybackSpeed();
    method public int getPlayerState();
    method public java.util.List<androidx.media2.MediaItem2>? getPlaylist();
    method public androidx.media2.MediaMetadata2? getPlaylistMetadata();
    method public int getRepeatMode();
    method public android.app.PendingIntent? getSessionActivity();
    method public int getShuffleMode();
    method public boolean isConnected();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromUri(android.net.Uri, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromUri(android.net.Uri, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! replacePlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! rewind();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! selectRoute(android.os.Bundle);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! sendCustomCommand(androidx.media2.SessionCommand2, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setMediaItem(String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaybackSpeed(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaylist(java.util.List<java.lang.String>, androidx.media2.MediaMetadata2?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRating(String, androidx.media2.Rating2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setShuffleMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setVolumeTo(int, int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipBackward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipForward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToNextItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPreviousItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! subscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! unsubscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata2?);
  }

  public static final class MediaController2.PlaybackInfo implements androidx.versionedparcelable.VersionedParcelable {
    ctor MediaController2.PlaybackInfo();
    ctor MediaController2.PlaybackInfo(int, androidx.media.AudioAttributesCompat!, int, int, int);
    method static androidx.media2.MediaController2.PlaybackInfo! createPlaybackInfo(int, androidx.media.AudioAttributesCompat!, int, int, int);
    field androidx.media.AudioAttributesCompat! mAudioAttrsCompat;
    field int mControlType;
    field int mCurrentVolume;
    field int mMaxVolume;
    field int mPlaybackType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.media.AudioManager.ADJUST_LOWER, android.media.AudioManager.ADJUST_RAISE, android.media.AudioManager.ADJUST_SAME, android.media.AudioManager.ADJUST_MUTE, android.media.AudioManager.ADJUST_UNMUTE, android.media.AudioManager.ADJUST_TOGGLE_MUTE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaController2.VolumeDirection {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(value={android.media.AudioManager.FLAG_SHOW_UI, android.media.AudioManager.FLAG_ALLOW_RINGER_MODES, android.media.AudioManager.FLAG_PLAY_SOUND, android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, android.media.AudioManager.FLAG_VIBRATE}, flag=true) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaController2.VolumeFlags {
  }

  class MediaController2ImplBase implements androidx.media2.MediaController2.MediaController2Impl {
    ctor MediaController2ImplBase(android.content.Context!, androidx.media2.MediaController2!, androidx.media2.SessionToken2!, java.util.concurrent.Executor!, androidx.media2.MediaController2.ControllerCallback!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! addPlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! adjustVolume(int, int);
    method private void connectToService();
    method private void connectToSession();
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! dispatchRemoteSessionTask(int, androidx.media2.MediaController2ImplBase.RemoteSessionTask!);
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! dispatchRemoteSessionTask(androidx.media2.SessionCommand2!, androidx.media2.MediaController2ImplBase.RemoteSessionTask!);
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! dispatchRemoteSessionTaskInternal(int, androidx.media2.SessionCommand2!, androidx.media2.MediaController2ImplBase.RemoteSessionTask!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! fastForward();
    method public android.support.v4.media.MediaBrowserCompat? getBrowserCompat();
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public androidx.media2.MediaController2.ControllerCallback getCallback();
    method public java.util.concurrent.Executor getCallbackExecutor();
    method public androidx.media2.SessionToken2! getConnectedSessionToken();
    method public android.content.Context getContext();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public long getCurrentPosition();
    method public long getDuration();
    method public androidx.media2.MediaController2 getInstance();
    method public androidx.media2.MediaController2.PlaybackInfo! getPlaybackInfo();
    method public float getPlaybackSpeed();
    method public int getPlayerState();
    method public java.util.List<androidx.media2.MediaItem2>! getPlaylist();
    method public androidx.media2.MediaMetadata2! getPlaylistMetadata();
    method public int getRepeatMode();
    method public android.app.PendingIntent! getSessionActivity();
    method IMediaSession2! getSessionInterfaceIfAble(int);
    method IMediaSession2! getSessionInterfaceIfAble(androidx.media2.SessionCommand2!);
    method public int getShuffleMode();
    method public boolean isConnected();
    method void notifyBufferingStateChanged(androidx.media2.MediaItem2!, int, long);
    method void notifyCurrentMediaItemChanged(androidx.media2.MediaItem2!);
    method void notifyPlaybackCompleted();
    method void notifyPlaybackInfoChanges(androidx.media2.MediaController2.PlaybackInfo!);
    method void notifyPlaybackSpeedChanges(long, long, float);
    method void notifyPlayerStateChanges(long, long, int);
    method void notifyPlaylistChanges(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!);
    method void notifyPlaylistMetadataChanges(androidx.media2.MediaMetadata2!);
    method void notifyRepeatModeChanges(int);
    method void notifyRoutesInfoChanged(java.util.List<android.os.Bundle>!);
    method void notifySeekCompleted(long, long, long);
    method void notifyShuffleModeChanges(int);
    method void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2!);
    method void onConnectedNotLocked(IMediaSession2!, androidx.media2.SessionCommandGroup2!, int, androidx.media2.MediaItem2!, long, long, float, long, androidx.media2.MediaController2.PlaybackInfo!, int, int, java.util.List<androidx.media2.MediaItem2>!, android.app.PendingIntent!);
    method void onCustomCommand(int, androidx.media2.SessionCommand2!, android.os.Bundle!);
    method void onSetCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromUri(android.net.Uri, android.os.Bundle);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromUri(android.net.Uri, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! replacePlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! rewind();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! selectRoute(android.os.Bundle);
    method void sendControllerResult(int, androidx.media2.MediaController2.ControllerResult);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! sendCustomCommand(androidx.media2.SessionCommand2, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setMediaItem(String!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaybackSpeed(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaylist(java.util.List<java.lang.String>, androidx.media2.MediaMetadata2?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRating(String, androidx.media2.Rating2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setShuffleMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setVolumeTo(int, int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipBackward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipForward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToNextItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPreviousItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! subscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! unsubscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata2?);
    field static final boolean DEBUG = true;
    field private static final androidx.media2.MediaController2.ControllerResult! RESULT_WHEN_CLOSED;
    field static final String TAG = "MC2ImplBase";
    field private static final boolean THROW_EXCEPTION_FOR_NULL_RESULT = true;
    field @GuardedBy("mLock") private androidx.media2.SessionCommandGroup2! mAllowedCommands;
    field @GuardedBy("mLock") private long mBufferedPositionMs;
    field @GuardedBy("mLock") private int mBufferingState;
    field final androidx.media2.MediaController2.ControllerCallback! mCallback;
    field private final java.util.concurrent.Executor! mCallbackExecutor;
    field @GuardedBy("mLock") private androidx.media2.SessionToken2! mConnectedToken;
    field private final android.content.Context! mContext;
    field final androidx.media2.MediaController2Stub! mControllerStub;
    field @GuardedBy("mLock") private androidx.media2.MediaItem2! mCurrentMediaItem;
    field private final android.os.IBinder.DeathRecipient! mDeathRecipient;
    field @GuardedBy("mLock") private volatile IMediaSession2! mISession2;
    field final androidx.media2.MediaController2! mInstance;
    field @GuardedBy("mLock") private boolean mIsReleased;
    field private final Object! mLock;
    field @GuardedBy("mLock") private androidx.media2.MediaController2.PlaybackInfo! mPlaybackInfo;
    field @GuardedBy("mLock") private float mPlaybackSpeed;
    field @GuardedBy("mLock") private int mPlayerState;
    field @GuardedBy("mLock") private java.util.List<androidx.media2.MediaItem2>! mPlaylist;
    field @GuardedBy("mLock") private androidx.media2.MediaMetadata2! mPlaylistMetadata;
    field @GuardedBy("mLock") private long mPositionEventTimeMs;
    field @GuardedBy("mLock") private long mPositionMs;
    field @GuardedBy("mLock") private int mRepeatMode;
    field final androidx.media2.SequencedFutureManager! mSequencedFutureManager;
    field @GuardedBy("mLock") private androidx.media2.MediaController2ImplBase.SessionServiceConnection! mServiceConnection;
    field @GuardedBy("mLock") private android.app.PendingIntent! mSessionActivity;
    field @GuardedBy("mLock") private int mShuffleMode;
    field final androidx.media2.SessionToken2! mToken;
  }

  @java.lang.FunctionalInterface private static interface MediaController2ImplBase.RemoteSessionTask {
    method public void run(IMediaSession2!, int) throws android.os.RemoteException;
  }

  private class MediaController2ImplBase.SessionServiceConnection implements android.content.ServiceConnection {
    ctor MediaController2ImplBase.SessionServiceConnection();
  }

  class MediaController2ImplLegacy implements androidx.media2.MediaController2.MediaController2Impl {
    ctor MediaController2ImplLegacy(android.content.Context, androidx.media2.MediaController2, androidx.media2.SessionToken2, java.util.concurrent.Executor, androidx.media2.MediaController2.ControllerCallback);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! addPlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! adjustVolume(int, int);
    method private void connectToService();
    method void connectToSession(android.support.v4.media.session.MediaSessionCompat.Token!);
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! createFutureWithResult(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! fastForward();
    method public android.support.v4.media.MediaBrowserCompat? getBrowserCompat();
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public androidx.media2.MediaController2.ControllerCallback getCallback();
    method public java.util.concurrent.Executor getCallbackExecutor();
    method public androidx.media2.SessionToken2? getConnectedSessionToken();
    method public android.content.Context getContext();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public long getCurrentPosition();
    method public long getDuration();
    method public androidx.media2.MediaController2 getInstance();
    method public androidx.media2.MediaController2.PlaybackInfo? getPlaybackInfo();
    method public float getPlaybackSpeed();
    method public int getPlayerState();
    method public java.util.List<androidx.media2.MediaItem2>? getPlaylist();
    method public androidx.media2.MediaMetadata2? getPlaylistMetadata();
    method public int getRepeatMode();
    method public android.app.PendingIntent? getSessionActivity();
    method public int getShuffleMode();
    method public boolean isConnected();
    method void onConnectedNotLocked();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! playFromUri(android.net.Uri, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromMediaId(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromSearch(String, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! prepareFromUri(android.net.Uri, android.os.Bundle?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! replacePlaylistItem(int, String);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! rewind();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! selectRoute(android.os.Bundle);
    method private void sendCommand(int);
    method private void sendCommand(int, android.os.Bundle!);
    method private void sendCommand(String!);
    method void sendCommand(String!, android.os.ResultReceiver!);
    method private void sendCommand(String!, android.os.Bundle!, android.os.ResultReceiver!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! sendCustomCommand(androidx.media2.SessionCommand2, android.os.Bundle?);
    method void setCurrentMediaItemLocked(android.support.v4.media.MediaMetadataCompat!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setMediaItem(String!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaybackSpeed(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setPlaylist(java.util.List<java.lang.String>, androidx.media2.MediaMetadata2?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRating(String, androidx.media2.Rating2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setShuffleMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! setVolumeTo(int, int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipBackward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipForward();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToNextItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! skipToPreviousItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! subscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! unsubscribeRoutesInfo();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaController2.ControllerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata2?);
    field static final boolean DEBUG;
    field private static final long POSITION_DIFF_TOLERANCE = 100L; // 0x64L
    field private static final String SESSION_COMMAND_ON_CAPTIONING_ENABLED_CHANGED = "android.media.session.command.ON_CAPTIONING_ENALBED_CHANGED";
    field private static final String SESSION_COMMAND_ON_EXTRA_CHANGED = "android.media.session.command.ON_EXTRA_CHANGED";
    field private static final String TAG = "MC2ImplLegacy";
    field @GuardedBy("mLock") androidx.media2.SessionCommandGroup2! mAllowedCommands;
    field @GuardedBy("mLock") android.support.v4.media.MediaBrowserCompat! mBrowserCompat;
    field @GuardedBy("mLock") long mBufferedPosition;
    field @GuardedBy("mLock") int mBufferingState;
    field final androidx.media2.MediaController2.ControllerCallback! mCallback;
    field final java.util.concurrent.Executor! mCallbackExecutor;
    field @GuardedBy("mLock") private volatile boolean mConnected;
    field final android.content.Context! mContext;
    field @GuardedBy("mLock") private android.support.v4.media.session.MediaControllerCompat! mControllerCompat;
    field @GuardedBy("mLock") private androidx.media2.MediaController2ImplLegacy.ControllerCompatCallback! mControllerCompatCallback;
    field @GuardedBy("mLock") androidx.media2.MediaItem2! mCurrentMediaItem;
    field int mCurrentMediaItemIndex;
    field final android.os.Handler! mHandler;
    field final android.os.HandlerThread! mHandlerThread;
    field androidx.media2.MediaController2! mInstance;
    field @GuardedBy("mLock") private boolean mIsReleased;
    field final Object! mLock;
    field @GuardedBy("mLock") android.support.v4.media.MediaMetadataCompat! mMediaMetadataCompat;
    field @GuardedBy("mLock") androidx.media2.MediaController2.PlaybackInfo! mPlaybackInfo;
    field @GuardedBy("mLock") android.support.v4.media.session.PlaybackStateCompat! mPlaybackStateCompat;
    field @GuardedBy("mLock") int mPlayerState;
    field @GuardedBy("mLock") java.util.List<androidx.media2.MediaItem2>! mPlaylist;
    field @GuardedBy("mLock") androidx.media2.MediaMetadata2! mPlaylistMetadata;
    field java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! mQueue;
    field @GuardedBy("mLock") int mRepeatMode;
    field @GuardedBy("mLock") int mShuffleMode;
    field @GuardedBy("mLock") int mSkipToPlaylistIndex;
    field final androidx.media2.SessionToken2! mToken;
    field static final android.os.Bundle! sDefaultRootExtras;
  }

  private class MediaController2ImplLegacy.ConnectionCallback extends android.support.v4.media.MediaBrowserCompat.ConnectionCallback {
    ctor MediaController2ImplLegacy.ConnectionCallback();
  }

  private final class MediaController2ImplLegacy.ControllerCompatCallback extends android.support.v4.media.session.MediaControllerCompat.Callback {
    ctor MediaController2ImplLegacy.ControllerCompatCallback();
  }

  class MediaController2Stub {
    ctor MediaController2Stub(androidx.media2.MediaController2ImplBase!, androidx.media2.SequencedFutureManager!);
    method public void destroy();
    method private androidx.media2.MediaBrowser2! getBrowser() throws java.lang.IllegalStateException;
    method private androidx.media2.MediaController2ImplBase! getController() throws java.lang.IllegalStateException;
    method public void onAllowedCommandsChanged(androidx.versionedparcelable.ParcelImpl!);
    method public void onBufferingStateChanged(androidx.versionedparcelable.ParcelImpl!, int, long);
    method public void onChildrenChanged(String!, int, androidx.versionedparcelable.ParcelImpl!);
    method public void onConnected(IMediaSession2!, androidx.versionedparcelable.ParcelImpl!, int, androidx.versionedparcelable.ParcelImpl!, long, long, float, long, androidx.versionedparcelable.ParcelImpl!, int, int, androidx.media2.ParcelImplListSlice!, android.app.PendingIntent!);
    method public void onCurrentMediaItemChanged(androidx.versionedparcelable.ParcelImpl!);
    method public void onCustomCommand(int, androidx.versionedparcelable.ParcelImpl!, android.os.Bundle!);
    method public void onDisconnected();
    method public void onLibraryResult(int, androidx.versionedparcelable.ParcelImpl!);
    method public void onPlaybackCompleted();
    method public void onPlaybackInfoChanged(androidx.versionedparcelable.ParcelImpl!) throws java.lang.RuntimeException;
    method public void onPlaybackSpeedChanged(long, long, float);
    method public void onPlayerStateChanged(long, long, int);
    method public void onPlaylistChanged(androidx.media2.ParcelImplListSlice!, androidx.versionedparcelable.ParcelImpl!);
    method public void onPlaylistMetadataChanged(androidx.versionedparcelable.ParcelImpl!) throws java.lang.RuntimeException;
    method public void onRepeatModeChanged(int);
    method public void onRoutesInfoChanged(java.util.List<android.os.Bundle>!);
    method public void onSearchResultChanged(String!, int, androidx.versionedparcelable.ParcelImpl!) throws java.lang.RuntimeException;
    method public void onSeekCompleted(long, long, long);
    method public void onSessionResult(int, androidx.versionedparcelable.ParcelImpl!);
    method public void onSetCustomLayout(int, java.util.List<androidx.versionedparcelable.ParcelImpl>!);
    method public void onShuffleModeChanged(int);
    field private static final boolean DEBUG = true;
    field private static final String TAG = "MediaController2Stub";
    field private final java.lang.ref.WeakReference<androidx.media2.MediaController2ImplBase>! mController;
    field private final androidx.media2.SequencedFutureManager! mSequencedFutureManager;
  }

  class MediaInterface2 {
    ctor private MediaInterface2();
  }

  static interface MediaInterface2.SessionPlaybackControl {
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public long getCurrentPosition();
    method public long getDuration();
    method public float getPlaybackSpeed();
    method public int getPlayerState();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setPlaybackSpeed(float);
  }

  static interface MediaInterface2.SessionPlayer extends androidx.media2.MediaInterface2.SessionPlaybackControl androidx.media2.MediaInterface2.SessionPlaylistControl {
  }

  static interface MediaInterface2.SessionPlaylistControl {
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! addPlaylistItem(int, androidx.media2.MediaItem2!);
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public java.util.List<androidx.media2.MediaItem2>! getPlaylist();
    method public androidx.media2.MediaMetadata2! getPlaylistMetadata();
    method public int getRepeatMode();
    method public int getShuffleMode();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! replacePlaylistItem(int, androidx.media2.MediaItem2!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setMediaItem(androidx.media2.MediaItem2!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setPlaylist(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setShuffleMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToNextItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToPreviousItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata2!);
  }

  public class MediaItem2 extends androidx.versionedparcelable.CustomVersionedParcelable {
    ctor MediaItem2();
    ctor MediaItem2(androidx.media2.MediaItem2.BuilderBase!);
    ctor MediaItem2(androidx.media2.MediaItem2!);
    ctor MediaItem2(androidx.media2.MediaMetadata2?, long, long);
    method void addOnMetadataChangedListener(java.util.concurrent.Executor!, androidx.media2.MediaItem2.OnMetadataChangedListener!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String? getMediaId();
    method void removeOnMetadataChangedListener(androidx.media2.MediaItem2.OnMetadataChangedListener!);
    field static final long LONG_MAX = 576460752303423487L; // 0x7ffffffffffffffL
    field private static final String TAG = "MediaItem2";
    field long mEndPositionMs;
    field @GuardedBy("mLock") private final java.util.List<androidx.core.util.Pair<androidx.media2.MediaItem2.OnMetadataChangedListener,java.util.concurrent.Executor>>! mListeners;
    field private final Object! mLock;
    field @GuardedBy("mLock") androidx.media2.MediaMetadata2! mMetadata;
    field long mStartPositionMs;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class MediaItem2.BuilderBase<T extends androidx.media2.MediaItem2.BuilderBase> {
    ctor public MediaItem2.BuilderBase();
    method public androidx.media2.MediaItem2 build();
    method public T setEndPosition(long);
    method public T setMetadata(androidx.media2.MediaMetadata2?);
    method public T setStartPosition(long);
    field long mEndPositionMs;
    field androidx.media2.MediaMetadata2! mMetadata;
    field long mStartPositionMs;
  }

  static interface MediaItem2.OnMetadataChangedListener {
    method public void onMetadataChanged(androidx.media2.MediaItem2!);
  }

  public abstract class MediaLibraryService2 extends androidx.media2.MediaSessionService2 {
    method androidx.media2.MediaSessionService2.MediaSessionService2Impl! createImpl();
  }

  public static final class MediaLibraryService2.LibraryParams implements androidx.versionedparcelable.VersionedParcelable {
    ctor MediaLibraryService2.LibraryParams();
    ctor MediaLibraryService2.LibraryParams(android.os.Bundle!, boolean, boolean, boolean);
    ctor private MediaLibraryService2.LibraryParams(android.os.Bundle!, int, int, int);
    method private static boolean convertToBoolean(int);
    method private static int convertToInteger(boolean);
    field android.os.Bundle! mBundle;
    field int mOffline;
    field int mRecent;
    field int mSuggested;
  }

  public static final class MediaLibraryService2.LibraryParams.Builder {
    field private android.os.Bundle! mBundle;
    field private boolean mOffline;
    field private boolean mRecent;
    field private boolean mSuggested;
  }

  public static class MediaLibraryService2.LibraryResult extends androidx.versionedparcelable.CustomVersionedParcelable implements androidx.media2.RemoteResult2 {
    ctor MediaLibraryService2.LibraryResult();
    ctor private MediaLibraryService2.LibraryResult(int, androidx.media2.MediaItem2?, java.util.List<androidx.media2.MediaItem2>?, androidx.media2.MediaLibraryService2.LibraryParams?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public long getCompletionTime();
    method androidx.media2.MediaLibraryService2.LibraryParams! getLibraryParams();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public androidx.media2.MediaItem2! getMediaItem();
    method java.util.List<androidx.media2.MediaItem2>! getMediaItems();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public int getResultCode();
    field long mCompletionTime;
    field androidx.media2.MediaItem2! mItem;
    field java.util.List<androidx.media2.MediaItem2>! mItemList;
    field androidx.media2.ParcelImplListSlice! mItemListSlice;
    field androidx.media2.MediaLibraryService2.LibraryParams! mParams;
    field int mResultCode;
  }

  @IntDef(flag=false, value={androidx.media2.BaseResult2.RESULT_CODE_SUCCESS, androidx.media2.BaseResult2.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult2.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult2.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult2.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult2.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult2.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult2.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult2.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult2.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult2.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult2.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult2.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult2.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult2.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult2.RESULT_CODE_SETUP_REQUIRED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaLibraryService2.LibraryResult.ResultCode {
  }

  public static final class MediaLibraryService2.MediaLibrarySession extends androidx.media2.MediaSession2 {
    ctor MediaLibraryService2.MediaLibrarySession(android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl! createImpl(android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionCallback! getCallback();
    method androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl! getImpl();
  }

  static interface MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl extends androidx.media2.MediaSession2.MediaSession2Impl {
    method public androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionCallback! getCallback();
    method public androidx.media2.MediaLibraryService2.MediaLibrarySession! getInstance();
    method public void notifyChildrenChanged(String, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public void notifyChildrenChanged(androidx.media2.MediaSession2.ControllerInfo, String, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public void notifySearchResultChanged(androidx.media2.MediaSession2.ControllerInfo, String, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetChildrenOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetItemOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetLibraryRootOnExecutor(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetSearchResultOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String, int, int, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public int onSearchOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public int onSubscribeOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String, androidx.media2.MediaLibraryService2.LibraryParams?);
    method public int onUnsubscribeOnExecutor(androidx.media2.MediaSession2.ControllerInfo, String);
  }

  class MediaLibraryService2ImplBase extends androidx.media2.MediaSessionService2ImplBase {
    method public android.os.IBinder! onBind(android.content.Intent!);
  }

  class MediaLibraryService2LegacyStub extends androidx.media2.MediaSessionService2LegacyStub {
    ctor MediaLibraryService2LegacyStub(android.content.Context!, androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl!, android.support.v4.media.session.MediaSessionCompat.Token!);
    method androidx.media2.MediaSession2.ControllerInfo! createControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method androidx.media2.MediaSession2.ControllerInfo! getControllersForAll();
    method private androidx.media2.MediaSession2.ControllerInfo! getCurrentController();
    field private static final boolean DEBUG = false;
    field private static final String TAG = "MLS2LegacyStub";
    field private final androidx.media2.MediaSession2.ControllerInfo! mControllersForAll;
    field final androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl! mLibrarySessionImpl;
  }

  private abstract static class MediaLibraryService2LegacyStub.BaseBrowserLegacyCb extends androidx.media2.MediaSession2.ControllerCb {
    ctor private MediaLibraryService2LegacyStub.BaseBrowserLegacyCb();
    method final void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2!) throws android.os.RemoteException;
    method final void onBufferingStateChanged(androidx.media2.MediaItem2!, int, long) throws android.os.RemoteException;
    method final void onCurrentMediaItemChanged(androidx.media2.MediaItem2!) throws android.os.RemoteException;
    method final void onDisconnected() throws android.os.RemoteException;
    method void onLibraryResult(int, androidx.media2.MediaLibraryService2.LibraryResult!) throws android.os.RemoteException;
    method final void onPlaybackCompleted() throws android.os.RemoteException;
    method final void onPlaybackInfoChanged(androidx.media2.MediaController2.PlaybackInfo!) throws android.os.RemoteException;
    method final void onPlaybackSpeedChanged(long, long, float) throws android.os.RemoteException;
    method void onPlayerResult(int, androidx.media2.SessionPlayer2.PlayerResult!) throws android.os.RemoteException;
    method final void onPlayerStateChanged(long, long, int) throws android.os.RemoteException;
    method final void onPlaylistChanged(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method final void onPlaylistMetadataChanged(androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method final void onRepeatModeChanged(int) throws android.os.RemoteException;
    method final void onRoutesInfoChanged(java.util.List<android.os.Bundle>!) throws android.os.RemoteException;
    method final void onSeekCompleted(long, long, long) throws android.os.RemoteException;
    method void onSessionResult(int, androidx.media2.MediaSession2.SessionResult!) throws android.os.RemoteException;
    method final void onShuffleModeChanged(int) throws android.os.RemoteException;
    method final void sendCustomCommand(int, androidx.media2.SessionCommand2!, android.os.Bundle!) throws android.os.RemoteException;
    method final void setCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>!) throws android.os.RemoteException;
  }

  private class MediaLibraryService2LegacyStub.BrowserLegacyCb extends androidx.media2.MediaLibraryService2LegacyStub.BaseBrowserLegacyCb {
    ctor MediaLibraryService2LegacyStub.BrowserLegacyCb(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method void onChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onSearchResultChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void registerSearchRequest(androidx.media2.MediaSession2.ControllerInfo!, String!, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.Result<java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>>!);
    field private final Object! mLock;
    field private final androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
    field @GuardedBy("mLock") private final java.util.List<androidx.media2.MediaLibraryService2LegacyStub.SearchRequest>! mSearchRequests;
  }

  private static class MediaLibraryService2LegacyStub.BrowserLegacyCbForAll extends androidx.media2.MediaLibraryService2LegacyStub.BaseBrowserLegacyCb {
    ctor MediaLibraryService2LegacyStub.BrowserLegacyCbForAll(androidx.media.MediaBrowserServiceCompat!);
    method void onChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onSearchResultChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    field private final androidx.media.MediaBrowserServiceCompat! mService;
  }

  private static class MediaLibraryService2LegacyStub.SearchRequest {
    ctor MediaLibraryService2LegacyStub.SearchRequest(androidx.media2.MediaSession2.ControllerInfo!, androidx.media.MediaSessionManager.RemoteUserInfo!, String!, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.Result<java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>>!);
    field public final androidx.media2.MediaSession2.ControllerInfo! mController;
    field public final android.os.Bundle! mExtras;
    field public final String! mQuery;
    field public final androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
    field public final androidx.media.MediaBrowserServiceCompat.Result<java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>>! mResult;
  }

  class MediaLibrarySessionImplBase extends androidx.media2.MediaSession2ImplBase implements androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl {
    ctor MediaLibrarySessionImplBase(androidx.media2.MediaSession2!, android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method androidx.media.MediaBrowserServiceCompat! createLegacyBrowserService(android.content.Context!, androidx.media2.SessionToken2!, android.support.v4.media.session.MediaSessionCompat.Token!);
    method void dispatchRemoteControllerCallbackTask(androidx.media2.MediaSession2ImplBase.RemoteControllerCallbackTask!);
    method void dumpSubscription();
    method private androidx.media2.MediaLibraryService2.LibraryResult! ensureNonNullResult(androidx.media2.MediaLibraryService2.LibraryResult!);
    method private androidx.media2.MediaLibraryService2.LibraryResult! ensureNonNullResultWithValidItem(androidx.media2.MediaLibraryService2.LibraryResult!);
    method private androidx.media2.MediaLibraryService2.LibraryResult! ensureNonNullResultWithValidList(androidx.media2.MediaLibraryService2.LibraryResult!, int);
    method public androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionCallback! getCallback();
    method public java.util.List<androidx.media2.MediaSession2.ControllerInfo>! getConnectedControllers();
    method public androidx.media2.MediaLibraryService2.MediaLibrarySession! getInstance();
    method androidx.media2.MediaLibraryService2LegacyStub! getLegacyBrowserService();
    method public boolean isConnected(androidx.media2.MediaSession2.ControllerInfo!);
    method boolean isSubscribed(androidx.media2.MediaSession2.ControllerCb!, String!);
    method private boolean isValidItem(androidx.media2.MediaItem2!);
    method public void notifyChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public void notifyChildrenChanged(androidx.media2.MediaSession2.ControllerInfo!, String!, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public void notifySearchResultChanged(androidx.media2.MediaSession2.ControllerInfo!, String!, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetChildrenOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!, int, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetItemOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetLibraryRootOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public androidx.media2.MediaLibraryService2.LibraryResult! onGetSearchResultOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!, int, int, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public int onSearchOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public int onSubscribeOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!, androidx.media2.MediaLibraryService2.LibraryParams!);
    method public int onUnsubscribeOnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String!);
    field @GuardedBy("mLock") private final androidx.collection.ArrayMap<androidx.media2.MediaSession2.ControllerCb,java.util.Set<java.lang.String>>! mSubscriptions;
  }

  public final class MediaMetadata2 extends androidx.versionedparcelable.CustomVersionedParcelable {
    ctor MediaMetadata2();
    ctor MediaMetadata2(android.os.Bundle!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public Object? getObject(String);
    field static final androidx.collection.ArrayMap<java.lang.String,java.lang.Integer>! METADATA_KEYS_TYPE;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String METADATA_KEY_RADIO_FREQUENCY = "android.media.metadata.RADIO_FREQUENCY";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String METADATA_KEY_RADIO_PROGRAM_NAME = "android.media.metadata.RADIO_PROGRAM_NAME";
    field static final int METADATA_TYPE_BITMAP = 2; // 0x2
    field static final int METADATA_TYPE_BUNDLE = 5; // 0x5
    field static final int METADATA_TYPE_FLOAT = 4; // 0x4
    field static final int METADATA_TYPE_LONG = 0; // 0x0
    field static final int METADATA_TYPE_RATING = 3; // 0x3
    field static final int METADATA_TYPE_TEXT = 1; // 0x1
    field private static final String[]! PREFERRED_BITMAP_ORDER;
    field private static final String[]! PREFERRED_DESCRIPTION_ORDER;
    field private static final String[]! PREFERRED_URI_ORDER;
    field private static final String TAG = "MediaMetadata2";
    field androidx.media2.ParcelImplListSlice! mBitmapListSlice;
    field android.os.Bundle! mBundle;
  }

  static final class MediaMetadata2.BitmapEntry implements androidx.versionedparcelable.VersionedParcelable {
    ctor MediaMetadata2.BitmapEntry();
    ctor MediaMetadata2.BitmapEntry(String, android.graphics.Bitmap);
    method android.graphics.Bitmap! getBitmap();
    method private int getBitmapSizeInBytes(android.graphics.Bitmap!);
    method String! getKey();
    field static final int BITMAP_SIZE_LIMIT_IN_BYTES = 262144; // 0x40000
    field android.graphics.Bitmap! mBitmap;
    field String! mKey;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({androidx.media2.MediaMetadata2.METADATA_KEY_ART, androidx.media2.MediaMetadata2.METADATA_KEY_ALBUM_ART, androidx.media2.MediaMetadata2.METADATA_KEY_DISPLAY_ICON}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.BitmapKey {
  }

  public static final class MediaMetadata2.Builder {
    ctor MediaMetadata2.Builder(android.os.Bundle!);
    field final android.os.Bundle! mBundle;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({androidx.media2.MediaMetadata2.METADATA_KEY_EXTRAS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.BundleKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({"android.media.metadata.RADIO_FREQUENCY"}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.FloatKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({androidx.media2.MediaMetadata2.METADATA_KEY_DURATION, androidx.media2.MediaMetadata2.METADATA_KEY_YEAR, androidx.media2.MediaMetadata2.METADATA_KEY_TRACK_NUMBER, androidx.media2.MediaMetadata2.METADATA_KEY_NUM_TRACKS, androidx.media2.MediaMetadata2.METADATA_KEY_DISC_NUMBER, androidx.media2.MediaMetadata2.METADATA_KEY_BROWSABLE, androidx.media2.MediaMetadata2.METADATA_KEY_PLAYABLE, androidx.media2.MediaMetadata2.METADATA_KEY_ADVERTISEMENT, androidx.media2.MediaMetadata2.METADATA_KEY_DOWNLOAD_STATUS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.LongKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({androidx.media2.MediaMetadata2.METADATA_KEY_USER_RATING, androidx.media2.MediaMetadata2.METADATA_KEY_RATING}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.RatingKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({androidx.media2.MediaMetadata2.METADATA_KEY_TITLE, androidx.media2.MediaMetadata2.METADATA_KEY_ARTIST, androidx.media2.MediaMetadata2.METADATA_KEY_ALBUM, androidx.media2.MediaMetadata2.METADATA_KEY_AUTHOR, androidx.media2.MediaMetadata2.METADATA_KEY_WRITER, androidx.media2.MediaMetadata2.METADATA_KEY_COMPOSER, androidx.media2.MediaMetadata2.METADATA_KEY_COMPILATION, androidx.media2.MediaMetadata2.METADATA_KEY_DATE, androidx.media2.MediaMetadata2.METADATA_KEY_GENRE, androidx.media2.MediaMetadata2.METADATA_KEY_ALBUM_ARTIST, androidx.media2.MediaMetadata2.METADATA_KEY_ART_URI, androidx.media2.MediaMetadata2.METADATA_KEY_ALBUM_ART_URI, androidx.media2.MediaMetadata2.METADATA_KEY_DISPLAY_TITLE, androidx.media2.MediaMetadata2.METADATA_KEY_DISPLAY_SUBTITLE, androidx.media2.MediaMetadata2.METADATA_KEY_DISPLAY_DESCRIPTION, androidx.media2.MediaMetadata2.METADATA_KEY_DISPLAY_ICON_URI, androidx.media2.MediaMetadata2.METADATA_KEY_MEDIA_ID, androidx.media2.MediaMetadata2.METADATA_KEY_MEDIA_URI, "android.media.metadata.RADIO_PROGRAM_NAME"}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadata2.TextKey {
  }

  @VisibleForTesting(otherwise=androidx.annotation.VisibleForTesting.PACKAGE_PRIVATE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public class MediaNotificationHandler extends androidx.media2.MediaSession2.SessionCallback.ForegroundServiceEventCallback {
    ctor public MediaNotificationHandler(androidx.media2.MediaSessionService2!);
    method private androidx.core.app.NotificationCompat.Action! createNotificationAction(int, int, long);
    method private android.app.PendingIntent! createPendingIntent(long);
    method private void ensureNotificationChannel();
    method private int getSmallIconResId();
    method static boolean isPlaybackStopped(int);
    method public void onPlayerStateChanged(androidx.media2.MediaSession2!, int);
    method public void onSessionClosed(androidx.media2.MediaSession2!);
    method public androidx.media2.MediaSessionService2.MediaNotification! onUpdateNotification(androidx.media2.MediaSession2!);
    method private void stopForegroundServiceIfNeeded();
    field private static final String NOTIFICATION_CHANNEL_ID = "default_channel_id";
    field private static final int NOTIFICATION_ID = 1001; // 0x3e9
    field private final String! mNotificationChannelName;
    field private final android.app.NotificationManager! mNotificationManager;
    field private final androidx.core.app.NotificationCompat.Action! mPauseAction;
    field private final androidx.core.app.NotificationCompat.Action! mPlayAction;
    field private final androidx.media2.MediaSessionService2! mServiceInstance;
    field private final androidx.core.app.NotificationCompat.Action! mSkipToNextAction;
    field private final androidx.core.app.NotificationCompat.Action! mSkipToPrevAction;
    field private final android.content.Intent! mStartSelfIntent;
  }

  public class MediaPlayer extends androidx.media2.SessionPlayer2 {
    method @GuardedBy("mPendingCommands") void addPendingCommandLocked(int, androidx.concurrent.futures.ResolvableFuture!, Object!);
    method private void addPendingFuture(androidx.media2.MediaPlayer.PendingFuture!);
    method void applyShuffleModeLocked();
    method static int clamp(int, int);
    method androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! createFutureForResultCode(int);
    method androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! createFutureForResultCode(int, androidx.media2.MediaItem2!);
    method java.util.List<androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>>! createFuturesForResultCode(int);
    method java.util.List<androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>>! createFuturesForResultCode(int, androidx.media2.MediaItem2!);
    method private void executePendingFutures();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @VisibleForTesting(otherwise=androidx.annotation.VisibleForTesting.PACKAGE_PRIVATE) public androidx.media2.AudioFocusHandler! getAudioFocusHandler();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.media2.MediaPlayer.DrmInfo? getDrmInfo();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.media.MediaDrm.KeyRequest getDrmKeyRequest(byte[]?, byte[]?, String?, int, java.util.Map<java.lang.String,java.lang.String>?) throws androidx.media2.MediaPlayer.NoDrmSchemeException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public String getDrmPropertyString(String) throws androidx.media2.MediaPlayer.NoDrmSchemeException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.os.PersistableBundle! getMetrics();
    method void handleCallComplete(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method void notifyMediaPlayerCallback(androidx.media2.MediaPlayer.MediaPlayerCallbackNotifier!);
    method void notifySessionPlayerCallback(androidx.media2.MediaPlayer.SessionPlayerCallbackNotifier!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaPlayer.DrmResult> prepareDrm(java.util.UUID);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public byte[]? provideDrmKeyResponse(byte[]?, byte[]) throws android.media.DeniedByServerException, androidx.media2.MediaPlayer.NoDrmSchemeException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void releaseDrm() throws androidx.media2.MediaPlayer.NoDrmSchemeException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void restoreDrmKeys(byte[]) throws androidx.media2.MediaPlayer.NoDrmSchemeException;
    method void setBufferingState(androidx.media2.MediaItem2!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setDrmPropertyString(String, String) throws androidx.media2.MediaPlayer.NoDrmSchemeException;
    method private androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setMediaItemInternal(androidx.media2.MediaItem2!);
    method java.util.List<androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>>! setMediaItemsInternal(androidx.media2.MediaItem2, androidx.media2.MediaItem2?);
    method androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setNextMediaItemInternal(androidx.media2.MediaItem2!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setOnDrmConfigHelper(androidx.media2.MediaPlayer.OnDrmConfigHelper?);
    method androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setPlayerVolumeInternal(float);
    method void setState(int);
    method androidx.concurrent.futures.ResolvableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToNextInternal();
    method androidx.core.util.Pair<androidx.media2.MediaItem2,androidx.media2.MediaItem2>! updateAndGetCurrentNextItemIfNeededLocked();
    field private static final int CALL_COMPLETE_PLAYLIST_BASE = -1000; // 0xfffffc18
    field private static final int END_OF_PLAYLIST = -1; // 0xffffffff
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_BUFFERING_END = 702; // 0x2be
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_BUFFERING_START = 701; // 0x2bd
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_EXTERNAL_METADATA_UPDATE = 803; // 0x323
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_MEDIA_ITEM_END = 5; // 0x5
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_MEDIA_ITEM_LIST_END = 6; // 0x6
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_MEDIA_ITEM_REPEAT = 7; // 0x7
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_MEDIA_ITEM_START = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_METADATA_UPDATE = 802; // 0x322
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_NETWORK_BANDWIDTH = 703; // 0x2bf
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT = 902; // 0x386
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_TIMED_TEXT_ERROR = 900; // 0x384
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_UNKNOWN = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE = 901; // 0x385
    field private static final int NO_MEDIA_ITEM = -2; // 0xfffffffe
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int PLAYER_ERROR_SYSTEM = -2147483648; // 0x80000000
    field private static final String TAG = "MediaPlayer";
    field final androidx.media2.AudioFocusHandler! mAudioFocusHandler;
    field @GuardedBy("mPlaylistLock") androidx.media2.MediaItem2! mCurPlaylistItem;
    field @GuardedBy("mPlaylistLock") int mCurrentShuffleIdx;
    field private java.util.concurrent.ExecutorService! mExecutor;
    field @GuardedBy("mStateLock") private java.util.Map<androidx.media2.MediaItem2,java.lang.Integer>! mMediaItemToBuffState;
    field @GuardedBy("mPlaylistLock") androidx.media2.MediaItem2! mNextPlaylistItem;
    field @GuardedBy("mPendingCommands") final java.util.ArrayDeque<androidx.media2.MediaPlayer.PendingCommand>! mPendingCommands;
    field @GuardedBy("mPendingFutures") final java.util.ArrayDeque<androidx.media2.MediaPlayer.PendingFuture<? super androidx.media2.SessionPlayer2.PlayerResult>>! mPendingFutures;
    field androidx.media2.MediaPlayer2! mPlayer;
    field @GuardedBy("mPlaylistLock") java.util.ArrayList<androidx.media2.MediaItem2>! mPlaylist;
    field final Object! mPlaylistLock;
    field @GuardedBy("mPlaylistLock") androidx.media2.MediaMetadata2! mPlaylistMetadata;
    field @GuardedBy("mPlaylistLock") int mRepeatMode;
    field @GuardedBy("mPlaylistLock") private boolean mSetMediaItemCalled;
    field @GuardedBy("mPlaylistLock") int mShuffleMode;
    field @GuardedBy("mPlaylistLock") java.util.ArrayList<androidx.media2.MediaItem2>! mShuffledList;
    field @GuardedBy("mStateLock") private int mState;
    field private final Object! mStateLock;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sErrorCodeMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sInfoCodeMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sPrepareDrmStatusMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sResultCodeMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sSeekModeMap;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final class MediaPlayer.DrmInfo {
    ctor MediaPlayer.DrmInfo(androidx.media2.MediaPlayer2.DrmInfo!);
    method public java.util.Map<java.util.UUID,byte[]> getPssh();
    method public java.util.List<java.util.UUID> getSupportedSchemes();
    field private final androidx.media2.MediaPlayer2.DrmInfo! mMp2DrmInfo;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class MediaPlayer.DrmResult extends androidx.media2.SessionPlayer2.PlayerResult {
    ctor public MediaPlayer.DrmResult(int, androidx.media2.MediaItem2);
    field public static final int RESULT_CODE_PREPARATION_ERROR = -1003; // 0xfffffc15
    field public static final int RESULT_CODE_PROVISIONING_NETWORK_ERROR = -1001; // 0xfffffc17
    field public static final int RESULT_CODE_PROVISIONING_SERVER_ERROR = -1002; // 0xfffffc16
    field public static final int RESULT_CODE_RESOURCE_BUSY = -1005; // 0xfffffc13
    field public static final int RESULT_CODE_UNSUPPORTED_SCHEME = -1004; // 0xfffffc14
  }

  @IntDef(flag=false, value={androidx.media2.BaseResult2.RESULT_CODE_SUCCESS, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PROVISIONING_NETWORK_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PROVISIONING_SERVER_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_PREPARATION_ERROR, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_UNSUPPORTED_SCHEME, androidx.media2.MediaPlayer.DrmResult.RESULT_CODE_RESOURCE_BUSY}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer.DrmResult.DrmResultCode {
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer.PLAYER_ERROR_UNKNOWN, androidx.media2.MediaPlayer.PLAYER_ERROR_IO, androidx.media2.MediaPlayer.PLAYER_ERROR_MALFORMED, androidx.media2.MediaPlayer.PLAYER_ERROR_UNSUPPORTED, androidx.media2.MediaPlayer.PLAYER_ERROR_TIMED_OUT, 0x80000000}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer.MediaError {
  }

  @IntDef(flag=false, value={0x1, 0x2, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START, 0x5, 0x6, 0x7, androidx.media2.MediaPlayer.MEDIA_INFO_PREPARED, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_TRACK_LAGGING, 0x2bd, 0x2be, 0x2bf, androidx.media2.MediaPlayer.MEDIA_INFO_BUFFERING_UPDATE, androidx.media2.MediaPlayer.MEDIA_INFO_BAD_INTERLEAVING, androidx.media2.MediaPlayer.MEDIA_INFO_NOT_SEEKABLE, 0x322, 0x323, androidx.media2.MediaPlayer.MEDIA_INFO_AUDIO_NOT_PLAYING, androidx.media2.MediaPlayer.MEDIA_INFO_VIDEO_NOT_PLAYING, 0x384, 0x385, 0x386}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer.MediaInfo {
  }

  private static interface MediaPlayer.MediaPlayerCallbackNotifier {
    method public void callCallback(androidx.media2.MediaPlayer.PlayerCallback!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final class MediaPlayer.MetricsConstants {
    ctor private MediaPlayer.MetricsConstants();
    field public static final String CODEC_AUDIO = "android.media.mediaplayer.audio.codec";
    field public static final String CODEC_VIDEO = "android.media.mediaplayer.video.codec";
    field public static final String DURATION = "android.media.mediaplayer.durationMs";
    field public static final String ERRORS = "android.media.mediaplayer.err";
    field public static final String ERROR_CODE = "android.media.mediaplayer.errcode";
    field public static final String FRAMES = "android.media.mediaplayer.frames";
    field public static final String FRAMES_DROPPED = "android.media.mediaplayer.dropped";
    field public static final String HEIGHT = "android.media.mediaplayer.height";
    field public static final String MIME_TYPE_AUDIO = "android.media.mediaplayer.audio.mime";
    field public static final String MIME_TYPE_VIDEO = "android.media.mediaplayer.video.mime";
    field public static final String PLAYING = "android.media.mediaplayer.playingMs";
    field public static final String WIDTH = "android.media.mediaplayer.width";
  }

  class MediaPlayer.Mp2Callback extends androidx.media2.MediaPlayer2.EventCallback {
    ctor MediaPlayer.Mp2Callback();
    method public void onCallCompleted(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onCommandLabelReached(androidx.media2.MediaPlayer2!, Object!);
    method public void onError(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onInfo(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onMediaTimeDiscontinuity(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.MediaTimestamp2!);
    method public void onSubtitleData(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.SubtitleData2!);
    method public void onTimedMetaDataAvailable(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.TimedMetaData2!);
    method public void onVideoSizeChanged(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
  }

  class MediaPlayer.Mp2DrmCallback extends androidx.media2.MediaPlayer2.DrmEventCallback {
    ctor MediaPlayer.Mp2DrmCallback();
    method public void onDrmInfo(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.MediaPlayer2.DrmInfo!);
    method public void onDrmPrepared(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class MediaPlayer.NoDrmSchemeException extends android.media.MediaDrmException {
    ctor public MediaPlayer.NoDrmSchemeException(String?);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface MediaPlayer.OnDrmConfigHelper {
    method public void onDrmConfig(androidx.media2.MediaPlayer, androidx.media2.MediaItem2);
  }

  static final class MediaPlayer.PendingCommand {
    ctor MediaPlayer.PendingCommand(int, androidx.concurrent.futures.ResolvableFuture!);
    field final int mCallType;
    field final androidx.concurrent.futures.ResolvableFuture! mFuture;
  }

  abstract static class MediaPlayer.PendingFuture<V extends androidx.media2.SessionPlayer2.PlayerResult> extends androidx.concurrent.futures.AbstractResolvableFuture<V> {
    ctor MediaPlayer.PendingFuture(java.util.concurrent.Executor!);
    ctor MediaPlayer.PendingFuture(java.util.concurrent.Executor!, boolean);
    method private void cancelFutures();
    method public boolean execute();
    method abstract java.util.List<androidx.concurrent.futures.ResolvableFuture<V>>! onExecute();
    method private void setResultIfFinished();
    field boolean mExecuteCalled;
    field java.util.List<androidx.concurrent.futures.ResolvableFuture<V>>! mFutures;
    field final boolean mIsSeekTo;
  }

  public abstract static class MediaPlayer.PlayerCallback extends androidx.media2.SessionPlayer2.PlayerCallback {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onDrmInfo(androidx.media2.MediaPlayer, androidx.media2.MediaItem2, androidx.media2.MediaPlayer.DrmInfo);
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer.SEEK_CLOSEST}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer.SeekMode {
  }

  private static interface MediaPlayer.SessionPlayerCallbackNotifier {
    method public void callCallback(androidx.media2.SessionPlayer2.PlayerCallback!);
  }

  public static final class MediaPlayer.TrackInfo {
    ctor MediaPlayer.TrackInfo(int, android.media.MediaFormat!);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_TRACK_TYPE_TIMEDTEXT = 3; // 0x3
    field private final android.media.MediaFormat! mFormat;
    field private final int mTrackType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public abstract class MediaPlayer2 {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public MediaPlayer2();
    method public abstract Object! attachAuxEffect(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract boolean cancel(Object!);
    method public abstract void clearDrmEventCallback();
    method public abstract void clearEventCallback();
    method public abstract void clearPendingCommands();
    method public abstract void close();
    method public static final androidx.media2.MediaPlayer2! create(android.content.Context);
    method public abstract Object! deselectTrack(int);
    method public abstract androidx.media.AudioAttributesCompat? getAudioAttributes();
    method public abstract int getAudioSessionId();
    method public abstract long getBufferedPosition();
    method public abstract androidx.media2.MediaItem2? getCurrentMediaItem();
    method public abstract long getCurrentPosition();
    method public abstract androidx.media2.MediaPlayer2.DrmInfo! getDrmInfo();
    method public abstract android.media.MediaDrm.KeyRequest getDrmKeyRequest(byte[]?, byte[]?, String?, int, java.util.Map<java.lang.String,java.lang.String>?) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public abstract String getDrmPropertyString(String) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public abstract long getDuration();
    method public float getMaxPlayerVolume();
    method public abstract android.os.PersistableBundle! getMetrics();
    method public abstract androidx.media2.PlaybackParams2 getPlaybackParams();
    method public abstract float getPlayerVolume();
    method public abstract int getSelectedTrack(int);
    method public abstract int getState();
    method public abstract androidx.media2.MediaTimestamp2? getTimestamp();
    method public abstract java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! getTrackInfo();
    method public abstract int getVideoHeight();
    method public abstract int getVideoWidth();
    method public abstract Object! loopCurrent(boolean);
    method public abstract Object! notifyWhenCommandLabelReached(Object);
    method public abstract Object! pause();
    method public abstract Object! play();
    method public abstract Object! prepare();
    method public abstract Object! prepareDrm(java.util.UUID);
    method public abstract byte[]! provideDrmKeyResponse(byte[]?, byte[]) throws android.media.DeniedByServerException, androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public abstract void releaseDrm() throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public abstract void reset();
    method public abstract void restoreDrmKeys(byte[]) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public Object! seekTo(long);
    method public abstract Object! seekTo(long, int);
    method public abstract Object! selectTrack(int);
    method public abstract Object! setAudioAttributes(androidx.media.AudioAttributesCompat);
    method public abstract Object! setAudioSessionId(int);
    method public abstract Object! setAuxEffectSendLevel(float);
    method public abstract void setDrmEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.DrmEventCallback);
    method public abstract void setDrmPropertyString(String, String) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public abstract void setEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.EventCallback);
    method public abstract Object! setMediaItem(androidx.media2.MediaItem2);
    method public abstract Object! setNextMediaItem(androidx.media2.MediaItem2);
    method public abstract Object! setNextMediaItems(java.util.List<androidx.media2.MediaItem2>);
    method public abstract void setOnDrmConfigHelper(androidx.media2.MediaPlayer2.OnDrmConfigHelper!);
    method public abstract Object! setPlaybackParams(androidx.media2.PlaybackParams2);
    method public abstract Object! setPlayerVolume(float);
    method public abstract Object! setSurface(android.view.Surface?);
    method public abstract Object! skipToNext();
    field public static final int CALL_COMPLETED_ATTACH_AUX_EFFECT = 1; // 0x1
    field public static final int CALL_COMPLETED_DESELECT_TRACK = 2; // 0x2
    field public static final int CALL_COMPLETED_LOOP_CURRENT = 3; // 0x3
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int CALL_COMPLETED_NOTIFY_WHEN_COMMAND_LABEL_REACHED = 1000; // 0x3e8
    field public static final int CALL_COMPLETED_PAUSE = 4; // 0x4
    field public static final int CALL_COMPLETED_PLAY = 5; // 0x5
    field public static final int CALL_COMPLETED_PREPARE = 6; // 0x6
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int CALL_COMPLETED_PREPARE_DRM = 1001; // 0x3e9
    field public static final int CALL_COMPLETED_SEEK_TO = 14; // 0xe
    field public static final int CALL_COMPLETED_SELECT_TRACK = 15; // 0xf
    field public static final int CALL_COMPLETED_SET_AUDIO_ATTRIBUTES = 16; // 0x10
    field public static final int CALL_COMPLETED_SET_AUDIO_SESSION_ID = 17; // 0x11
    field public static final int CALL_COMPLETED_SET_AUX_EFFECT_SEND_LEVEL = 18; // 0x12
    field public static final int CALL_COMPLETED_SET_DATA_SOURCE = 19; // 0x13
    field public static final int CALL_COMPLETED_SET_NEXT_DATA_SOURCE = 22; // 0x16
    field public static final int CALL_COMPLETED_SET_NEXT_DATA_SOURCES = 23; // 0x17
    field public static final int CALL_COMPLETED_SET_PLAYBACK_PARAMS = 24; // 0x18
    field public static final int CALL_COMPLETED_SET_PLAYER_VOLUME = 26; // 0x1a
    field public static final int CALL_COMPLETED_SET_SURFACE = 27; // 0x1b
    field public static final int CALL_COMPLETED_SKIP_TO_NEXT = 29; // 0x1d
    field public static final int CALL_STATUS_BAD_VALUE = 2; // 0x2
    field public static final int CALL_STATUS_ERROR_IO = 4; // 0x4
    field public static final int CALL_STATUS_ERROR_UNKNOWN = -2147483648; // 0x80000000
    field public static final int CALL_STATUS_INVALID_OPERATION = 1; // 0x1
    field public static final int CALL_STATUS_NO_ERROR = 0; // 0x0
    field public static final int CALL_STATUS_PERMISSION_DENIED = 3; // 0x3
    field public static final int CALL_STATUS_SKIPPED = 5; // 0x5
    field private static final boolean DEBUG_USE_EXOPLAYER = false;
    field public static final int MEDIA_ERROR_IO = -1004; // 0xfffffc14
    field public static final int MEDIA_ERROR_MALFORMED = -1007; // 0xfffffc11
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_ERROR_SYSTEM = -2147483648; // 0x80000000
    field public static final int MEDIA_ERROR_TIMED_OUT = -110; // 0xffffff92
    field public static final int MEDIA_ERROR_UNKNOWN = 1; // 0x1
    field public static final int MEDIA_ERROR_UNSUPPORTED = -1010; // 0xfffffc0e
    field public static final int MEDIA_INFO_AUDIO_NOT_PLAYING = 804; // 0x324
    field public static final int MEDIA_INFO_AUDIO_RENDERING_START = 4; // 0x4
    field public static final int MEDIA_INFO_BAD_INTERLEAVING = 800; // 0x320
    field public static final int MEDIA_INFO_BUFFERING_END = 702; // 0x2be
    field public static final int MEDIA_INFO_BUFFERING_START = 701; // 0x2bd
    field public static final int MEDIA_INFO_BUFFERING_UPDATE = 704; // 0x2c0
    field public static final int MEDIA_INFO_DATA_SOURCE_END = 5; // 0x5
    field public static final int MEDIA_INFO_DATA_SOURCE_LIST_END = 6; // 0x6
    field public static final int MEDIA_INFO_DATA_SOURCE_REPEAT = 7; // 0x7
    field public static final int MEDIA_INFO_DATA_SOURCE_START = 2; // 0x2
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_EXTERNAL_METADATA_UPDATE = 803; // 0x323
    field public static final int MEDIA_INFO_METADATA_UPDATE = 802; // 0x322
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_NETWORK_BANDWIDTH = 703; // 0x2bf
    field public static final int MEDIA_INFO_NOT_SEEKABLE = 801; // 0x321
    field public static final int MEDIA_INFO_PREPARED = 100; // 0x64
    field public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT = 902; // 0x386
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_INFO_TIMED_TEXT_ERROR = 900; // 0x384
    field public static final int MEDIA_INFO_UNKNOWN = 1; // 0x1
    field public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE = 901; // 0x385
    field public static final int MEDIA_INFO_VIDEO_NOT_PLAYING = 805; // 0x325
    field public static final int MEDIA_INFO_VIDEO_RENDERING_START = 3; // 0x3
    field public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING = 700; // 0x2bc
    field public static final int PLAYER_STATE_ERROR = 1005; // 0x3ed
    field public static final int PLAYER_STATE_IDLE = 1001; // 0x3e9
    field public static final int PLAYER_STATE_PAUSED = 1003; // 0x3eb
    field public static final int PLAYER_STATE_PLAYING = 1004; // 0x3ec
    field public static final int PLAYER_STATE_PREPARED = 1002; // 0x3ea
    field public static final int PREPARE_DRM_STATUS_PREPARATION_ERROR = 3; // 0x3
    field public static final int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR = 1; // 0x1
    field public static final int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR = 2; // 0x2
    field public static final int PREPARE_DRM_STATUS_RESOURCE_BUSY = 5; // 0x5
    field public static final int PREPARE_DRM_STATUS_SUCCESS = 0; // 0x0
    field public static final int PREPARE_DRM_STATUS_UNSUPPORTED_SCHEME = 4; // 0x4
    field public static final int SEEK_CLOSEST = 3; // 0x3
    field public static final int SEEK_CLOSEST_SYNC = 2; // 0x2
    field public static final int SEEK_NEXT_SYNC = 1; // 0x1
    field public static final int SEEK_PREVIOUS_SYNC = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int SEPARATE_CALL_COMPLETE_CALLBACK_START = 1000; // 0x3e8
    field public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT = 1; // 0x1
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.CALL_COMPLETED_ATTACH_AUX_EFFECT, androidx.media2.MediaPlayer2.CALL_COMPLETED_DESELECT_TRACK, androidx.media2.MediaPlayer2.CALL_COMPLETED_LOOP_CURRENT, androidx.media2.MediaPlayer2.CALL_COMPLETED_PAUSE, androidx.media2.MediaPlayer2.CALL_COMPLETED_PLAY, androidx.media2.MediaPlayer2.CALL_COMPLETED_PREPARE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SEEK_TO, androidx.media2.MediaPlayer2.CALL_COMPLETED_SELECT_TRACK, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUDIO_ATTRIBUTES, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUDIO_SESSION_ID, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_AUX_EFFECT_SEND_LEVEL, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_DATA_SOURCE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_NEXT_DATA_SOURCE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_NEXT_DATA_SOURCES, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_PLAYBACK_PARAMS, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_PLAYER_VOLUME, androidx.media2.MediaPlayer2.CALL_COMPLETED_SET_SURFACE, androidx.media2.MediaPlayer2.CALL_COMPLETED_SKIP_TO_NEXT, 0x3e8, 0x3e9}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.CallCompleted {
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.CALL_STATUS_NO_ERROR, androidx.media2.MediaPlayer2.CALL_STATUS_ERROR_UNKNOWN, androidx.media2.MediaPlayer2.CALL_STATUS_INVALID_OPERATION, androidx.media2.MediaPlayer2.CALL_STATUS_BAD_VALUE, androidx.media2.MediaPlayer2.CALL_STATUS_PERMISSION_DENIED, androidx.media2.MediaPlayer2.CALL_STATUS_ERROR_IO, androidx.media2.MediaPlayer2.CALL_STATUS_SKIPPED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.CallStatus {
  }

  public abstract static class MediaPlayer2.DrmEventCallback {
    ctor public MediaPlayer2.DrmEventCallback();
    method public void onDrmInfo(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.MediaPlayer2.DrmInfo!);
    method public void onDrmPrepared(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int);
  }

  public abstract static class MediaPlayer2.DrmInfo {
    ctor public MediaPlayer2.DrmInfo();
    method public abstract java.util.Map<java.util.UUID,byte[]>! getPssh();
    method public abstract java.util.List<java.util.UUID>! getSupportedSchemes();
  }

  public abstract static class MediaPlayer2.EventCallback {
    ctor public MediaPlayer2.EventCallback();
    method public void onCallCompleted(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onCommandLabelReached(androidx.media2.MediaPlayer2!, Object);
    method public void onError(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onInfo(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
    method public void onMediaTimeDiscontinuity(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.MediaTimestamp2!);
    method public void onSubtitleData(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.SubtitleData2);
    method public void onTimedMetaDataAvailable(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, androidx.media2.TimedMetaData2!);
    method public void onVideoSizeChanged(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!, int, int);
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.MEDIA_ERROR_UNKNOWN, androidx.media2.MediaPlayer2.MEDIA_ERROR_IO, androidx.media2.MediaPlayer2.MEDIA_ERROR_MALFORMED, androidx.media2.MediaPlayer2.MEDIA_ERROR_UNSUPPORTED, androidx.media2.MediaPlayer2.MEDIA_ERROR_TIMED_OUT, 0x80000000}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.MediaError {
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.MEDIA_INFO_UNKNOWN, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_START, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_RENDERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_AUDIO_RENDERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_END, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_LIST_END, androidx.media2.MediaPlayer2.MEDIA_INFO_DATA_SOURCE_REPEAT, androidx.media2.MediaPlayer2.MEDIA_INFO_PREPARED, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_TRACK_LAGGING, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_START, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_END, 0x2bf, androidx.media2.MediaPlayer2.MEDIA_INFO_BUFFERING_UPDATE, androidx.media2.MediaPlayer2.MEDIA_INFO_BAD_INTERLEAVING, androidx.media2.MediaPlayer2.MEDIA_INFO_NOT_SEEKABLE, androidx.media2.MediaPlayer2.MEDIA_INFO_METADATA_UPDATE, 0x323, androidx.media2.MediaPlayer2.MEDIA_INFO_AUDIO_NOT_PLAYING, androidx.media2.MediaPlayer2.MEDIA_INFO_VIDEO_NOT_PLAYING, 0x384, androidx.media2.MediaPlayer2.MEDIA_INFO_UNSUPPORTED_SUBTITLE, androidx.media2.MediaPlayer2.MEDIA_INFO_SUBTITLE_TIMED_OUT}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.MediaInfo {
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.PLAYER_STATE_IDLE, androidx.media2.MediaPlayer2.PLAYER_STATE_PREPARED, androidx.media2.MediaPlayer2.PLAYER_STATE_PAUSED, androidx.media2.MediaPlayer2.PLAYER_STATE_PLAYING, androidx.media2.MediaPlayer2.PLAYER_STATE_ERROR}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.MediaPlayer2State {
  }

  public static final class MediaPlayer2.MetricsConstants {
    ctor private MediaPlayer2.MetricsConstants();
    field public static final String CODEC_AUDIO = "android.media.mediaplayer.audio.codec";
    field public static final String CODEC_VIDEO = "android.media.mediaplayer.video.codec";
    field public static final String DURATION = "android.media.mediaplayer.durationMs";
    field public static final String ERRORS = "android.media.mediaplayer.err";
    field public static final String ERROR_CODE = "android.media.mediaplayer.errcode";
    field public static final String FRAMES = "android.media.mediaplayer.frames";
    field public static final String FRAMES_DROPPED = "android.media.mediaplayer.dropped";
    field public static final String HEIGHT = "android.media.mediaplayer.height";
    field public static final String MIME_TYPE_AUDIO = "android.media.mediaplayer.audio.mime";
    field public static final String MIME_TYPE_VIDEO = "android.media.mediaplayer.video.mime";
    field public static final String PLAYING = "android.media.mediaplayer.playingMs";
    field public static final String WIDTH = "android.media.mediaplayer.width";
  }

  public static class MediaPlayer2.NoDrmSchemeException extends android.media.MediaDrmException {
    ctor public MediaPlayer2.NoDrmSchemeException(String!);
  }

  public static interface MediaPlayer2.OnDrmConfigHelper {
    method public void onDrmConfig(androidx.media2.MediaPlayer2!, androidx.media2.MediaItem2!);
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_SUCCESS, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_PREPARATION_ERROR, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_UNSUPPORTED_SCHEME, androidx.media2.MediaPlayer2.PREPARE_DRM_STATUS_RESOURCE_BUSY}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.PrepareDrmStatusCode {
  }

  @IntDef(flag=false, value={androidx.media2.MediaPlayer2.SEEK_PREVIOUS_SYNC, androidx.media2.MediaPlayer2.SEEK_NEXT_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST_SYNC, androidx.media2.MediaPlayer2.SEEK_CLOSEST}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaPlayer2.SeekMode {
  }

  public abstract static class MediaPlayer2.TrackInfo {
    ctor public MediaPlayer2.TrackInfo();
    method public abstract android.media.MediaFormat! getFormat();
    method public abstract String! getLanguage();
    method public abstract int getTrackType();
    field public static final int MEDIA_TRACK_TYPE_AUDIO = 2; // 0x2
    field public static final int MEDIA_TRACK_TYPE_METADATA = 5; // 0x5
    field public static final int MEDIA_TRACK_TYPE_SUBTITLE = 4; // 0x4
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int MEDIA_TRACK_TYPE_TIMEDTEXT = 3; // 0x3
    field public static final int MEDIA_TRACK_TYPE_UNKNOWN = 0; // 0x0
    field public static final int MEDIA_TRACK_TYPE_VIDEO = 1; // 0x1
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class MediaPlayer2Impl extends androidx.media2.MediaPlayer2 {
    ctor public MediaPlayer2Impl();
    method private Object! addTask(androidx.media2.MediaPlayer2Impl.Task!);
    method public Object! attachAuxEffect(int);
    method public boolean cancel(Object!);
    method public void clearDrmEventCallback();
    method public void clearEventCallback();
    method void clearListeners(androidx.media2.MediaPlayer2Impl.MediaPlayerSource!);
    method public void clearPendingCommands();
    method public void close();
    method public Object! deselectTrack(int);
    method public androidx.media.AudioAttributesCompat? getAudioAttributes();
    method public int getAudioSessionId();
    method public long getBufferedPosition();
    method int getBufferingState();
    method public androidx.media2.MediaItem2? getCurrentMediaItem();
    method public long getCurrentPosition();
    method public androidx.media2.MediaPlayer2.DrmInfo! getDrmInfo();
    method public android.media.MediaDrm.KeyRequest getDrmKeyRequest(byte[]?, byte[]?, String?, int, java.util.Map<java.lang.String,java.lang.String>?) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public String getDrmPropertyString(String) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public long getDuration();
    method public float getMaxPlayerVolume();
    method public android.os.PersistableBundle! getMetrics();
    method public androidx.media2.PlaybackParams2 getPlaybackParams();
    method int getPlayerState();
    method public float getPlayerVolume();
    method public int getSelectedTrack(int);
    method public int getState();
    method public androidx.media2.MediaTimestamp2? getTimestamp();
    method public java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! getTrackInfo();
    method public int getVideoHeight();
    method public int getVideoWidth();
    method static void handleDataSource(androidx.media2.MediaPlayer2Impl.MediaPlayerSource!) throws java.io.IOException;
    method void handleDataSourceError(androidx.media2.MediaPlayer2Impl.DataSourceError!);
    method public Object! loopCurrent(boolean);
    method void notifyDrmEvent(androidx.media2.MediaPlayer2Impl.DrmEventNotifier!);
    method void notifyMediaPlayer2Event(androidx.media2.MediaPlayer2Impl.Mp2EventNotifier!);
    method public Object! notifyWhenCommandLabelReached(Object!);
    method public Object! pause();
    method public Object! play();
    method public Object! prepare();
    method public Object! prepareDrm(java.util.UUID);
    method @GuardedBy("mTaskLock") void processPendingTask_l();
    method public byte[]! provideDrmKeyResponse(byte[]?, byte[]) throws android.media.DeniedByServerException, androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public void releaseDrm() throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public void reset();
    method public void restoreDrmKeys(byte[]) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method public Object! seekTo(long, int);
    method public Object! selectTrack(int);
    method public Object! setAudioAttributes(androidx.media.AudioAttributesCompat);
    method public Object! setAudioSessionId(int);
    method public Object! setAuxEffectSendLevel(float);
    method public void setDrmEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.DrmEventCallback);
    method public void setDrmPropertyString(String, String) throws androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method void setEndPositionTimerIfNeeded(android.media.MediaPlayer.OnCompletionListener!, androidx.media2.MediaPlayer2Impl.MediaPlayerSource!, android.media.MediaTimestamp!);
    method public void setEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.EventCallback);
    method public Object! setMediaItem(androidx.media2.MediaItem2);
    method public Object! setNextMediaItem(androidx.media2.MediaItem2);
    method public Object! setNextMediaItems(java.util.List<androidx.media2.MediaItem2>);
    method public void setOnDrmConfigHelper(androidx.media2.MediaPlayer2.OnDrmConfigHelper!);
    method public Object! setPlaybackParams(androidx.media2.PlaybackParams2);
    method public Object! setPlayerVolume(float);
    method public Object! setSurface(android.view.Surface!);
    method void setUpListeners(androidx.media2.MediaPlayer2Impl.MediaPlayerSource!);
    method public Object! skipToNext();
    field static final android.media.PlaybackParams! DEFAULT_PLAYBACK_PARAMS;
    field private static final int SOURCE_STATE_ERROR = -1; // 0xffffffff
    field private static final int SOURCE_STATE_INIT = 0; // 0x0
    field private static final int SOURCE_STATE_PREPARED = 2; // 0x2
    field private static final int SOURCE_STATE_PREPARING = 1; // 0x1
    field private static final String TAG = "MediaPlayer2Impl";
    field @GuardedBy("mTaskLock") androidx.media2.MediaPlayer2Impl.Task! mCurrentTask;
    field private android.util.Pair<java.util.concurrent.Executor,androidx.media2.MediaPlayer2.DrmEventCallback>! mDrmEventCallbackRecord;
    field private final android.os.Handler! mEndPositionHandler;
    field private android.os.HandlerThread! mHandlerThread;
    field private final Object! mLock;
    field private android.util.Pair<java.util.concurrent.Executor,androidx.media2.MediaPlayer2.EventCallback>! mMp2EventCallbackRecord;
    field @GuardedBy("mTaskLock") final java.util.ArrayDeque<androidx.media2.MediaPlayer2Impl.Task>! mPendingTasks;
    field androidx.media2.MediaPlayer2Impl.MediaPlayerSourceQueue! mPlayer;
    field private final android.os.Handler! mTaskHandler;
    field final Object! mTaskLock;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sErrorEventExtraMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sInfoEventMap;
    field static androidx.collection.ArrayMap<java.lang.Integer,java.lang.Integer>! sStateMap;
  }

  private static class MediaPlayer2Impl.DataSourceError {
    ctor MediaPlayer2Impl.DataSourceError(androidx.media2.MediaItem2!, int, int);
    field final androidx.media2.MediaItem2! mDSD;
    field final int mExtra;
    field final int mWhat;
  }

  private static interface MediaPlayer2Impl.DrmEventNotifier {
    method public void notify(androidx.media2.MediaPlayer2.DrmEventCallback!);
  }

  public static final class MediaPlayer2Impl.DrmInfoImpl extends androidx.media2.MediaPlayer2.DrmInfo {
    ctor MediaPlayer2Impl.DrmInfoImpl(java.util.Map<java.util.UUID,byte[]>!, java.util.UUID[]!);
    ctor private MediaPlayer2Impl.DrmInfoImpl(android.os.Parcel!);
    method private String! arrToHex(byte[]!);
    method private java.util.UUID! bytesToUUID(byte[]!);
    method public java.util.Map<java.util.UUID,byte[]>! getPssh();
    method public java.util.List<java.util.UUID>! getSupportedSchemes();
    method private androidx.media2.MediaPlayer2Impl.DrmInfoImpl! makeCopy();
    method private java.util.Map<java.util.UUID,byte[]>! parsePSSH(byte[]!, int);
    field private java.util.Map<java.util.UUID,byte[]>! mMapPssh;
    field private java.util.UUID[]! mSupportedSchemes;
  }

  private class MediaPlayer2Impl.MediaPlayerSource {
    ctor MediaPlayer2Impl.MediaPlayerSource(androidx.media2.MediaItem2!);
    method androidx.media2.MediaItem2! getDSD();
    method android.media.MediaPlayer! getPlayer();
    method void release();
    field final java.util.concurrent.atomic.AtomicInteger! mBufferedPercentage;
    field int mBufferingState;
    field volatile androidx.media2.MediaItem2! mDSD;
    field int mMp2State;
    field boolean mPlayPending;
    field android.media.MediaPlayer! mPlayer;
    field int mPlayerState;
    field boolean mSetAsNextPlayer;
    field int mSourceState;
  }

  private class MediaPlayer2Impl.MediaPlayerSourceQueue {
    ctor MediaPlayer2Impl.MediaPlayerSourceQueue();
    method void applyProperties();
    method void attachAuxEffect(int);
    method void deselectTrack(int);
    method androidx.media.AudioAttributesCompat! getAudioAttributes();
    method int getAudioSessionId();
    method long getBufferedPosition();
    method int getBufferingState();
    method android.media.MediaPlayer! getCurrentPlayer();
    method long getCurrentPosition();
    method android.media.MediaPlayer.DrmInfo! getDrmInfo();
    method String! getDrmPropertyString(String!) throws android.media.MediaPlayer.NoDrmSchemeException;
    method long getDuration();
    method androidx.media2.MediaPlayer2Impl.MediaPlayerSource! getFirst();
    method android.media.MediaDrm.KeyRequest! getKeyRequest(byte[]!, byte[]!, String!, int, java.util.Map<java.lang.String,java.lang.String>!) throws android.media.MediaPlayer.NoDrmSchemeException;
    method int getMediaPlayer2State();
    method android.os.PersistableBundle! getMetrics();
    method android.media.PlaybackParams! getPlaybackParams();
    method int getPlayerState();
    method int getSelectedTrack(int);
    method androidx.media2.MediaPlayer2Impl.MediaPlayerSource! getSourceForPlayer(android.media.MediaPlayer!);
    method androidx.media2.MediaTimestamp2! getTimestamp();
    method android.media.MediaPlayer.TrackInfo[]! getTrackInfo();
    method int getVideoHeight();
    method int getVideoWidth();
    method float getVolume();
    method void moveToNext();
    method androidx.media2.MediaPlayer2Impl.DataSourceError! onCompletion(android.media.MediaPlayer!);
    method void onError(android.media.MediaPlayer!);
    method androidx.media2.MediaPlayer2Impl.DataSourceError! onPrepared(android.media.MediaPlayer!);
    method void onStartedAsNext(android.media.MediaPlayer!);
    method void pause();
    method void play();
    method androidx.media2.MediaPlayer2Impl.DataSourceError! playCurrent();
    method void prepareAsync();
    method androidx.media2.MediaPlayer2Impl.DataSourceError! prepareAt(int);
    method void prepareDrm(java.util.UUID!) throws android.media.MediaPlayer.ProvisioningNetworkErrorException, android.media.MediaPlayer.ProvisioningServerErrorException, android.media.ResourceBusyException, android.media.UnsupportedSchemeException;
    method byte[]! provideKeyResponse(byte[]!, byte[]!) throws android.media.DeniedByServerException, android.media.MediaPlayer.NoDrmSchemeException;
    method void release();
    method void releaseDrm() throws android.media.MediaPlayer.NoDrmSchemeException;
    method void reset();
    method void restoreKeys(byte[]!) throws android.media.MediaPlayer.NoDrmSchemeException;
    method void seekTo(long, int);
    method void selectTrack(int);
    method void setAudioAttributes(androidx.media.AudioAttributesCompat!);
    method void setAudioSessionId(int);
    method void setAuxEffectSendLevel(float);
    method void setBufferingState(android.media.MediaPlayer!, int);
    method void setDrmPropertyString(String!, String!) throws android.media.MediaPlayer.NoDrmSchemeException;
    method void setFirst(androidx.media2.MediaItem2!) throws java.io.IOException;
    method void setLooping(boolean);
    method void setMp2State(android.media.MediaPlayer!, int);
    method androidx.media2.MediaPlayer2Impl.DataSourceError! setNext(androidx.media2.MediaItem2!);
    method androidx.media2.MediaPlayer2Impl.DataSourceError! setNextMultiple(java.util.List<androidx.media2.MediaItem2>!);
    method void setOnDrmConfigHelper(android.media.MediaPlayer.OnDrmConfigHelper!);
    method void setPlaybackParams(android.media.PlaybackParams!);
    method void setSurface(android.view.Surface!);
    method void setVolume(float);
    method void skipToNext();
    field androidx.media.AudioAttributesCompat! mAudioAttributes;
    field Integer! mAudioSessionId;
    field Integer! mAuxEffect;
    field Float! mAuxEffectSendLevel;
    field boolean mLooping;
    field android.media.PlaybackParams! mPlaybackParams;
    field android.media.PlaybackParams! mPlaybackParamsToSetWhenStarting;
    field java.util.List<androidx.media2.MediaPlayer2Impl.MediaPlayerSource>! mQueue;
    field android.view.Surface! mSurface;
    field Float! mVolume;
  }

  private static interface MediaPlayer2Impl.Mp2EventNotifier {
    method public void notify(androidx.media2.MediaPlayer2.EventCallback!);
  }

  private abstract class MediaPlayer2Impl.Task implements java.lang.Runnable {
    ctor MediaPlayer2Impl.Task(int, boolean);
    method abstract void process() throws java.io.IOException, androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method void sendCompleteNotification(int);
    field androidx.media2.MediaItem2! mDSD;
    field @GuardedBy("this") boolean mDone;
    field final int mMediaCallType;
    field final boolean mNeedToWaitForEventToComplete;
  }

  public class MediaSession2 implements java.lang.AutoCloseable {
    ctor MediaSession2(android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method androidx.media2.MediaSession2.MediaSession2Impl! createImpl(android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method androidx.media2.MediaSession2.SessionCallback getCallback();
    method java.util.concurrent.Executor getCallbackExecutor();
    method android.content.Context getContext();
    method androidx.media2.MediaSession2.MediaSession2Impl! getImpl();
    method android.os.IBinder! getLegacyBrowerServiceBinder();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.support.v4.media.session.MediaSessionCompat! getSessionCompat();
    method void handleControllerConnectionFromService(IMediaController2!, String!, int, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isClosed();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void notifyRoutesInfoChanged(androidx.media2.MediaSession2.ControllerInfo, java.util.List<android.os.Bundle>?);
    field static final String TAG = "MediaSession2";
    field private final androidx.media2.MediaSession2.MediaSession2Impl! mImpl;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) abstract static class MediaSession2.BuilderBase<T extends androidx.media2.MediaSession2, U extends androidx.media2.MediaSession2.BuilderBase<T, U, C>, C extends androidx.media2.MediaSession2.SessionCallback> {
    ctor MediaSession2.BuilderBase(android.content.Context, androidx.media2.SessionPlayer2);
    method abstract T build();
    method U setId(String);
    method U setSessionActivity(android.app.PendingIntent?);
    method U setSessionCallback(java.util.concurrent.Executor, C);
    field C! mCallback;
    field java.util.concurrent.Executor! mCallbackExecutor;
    field final android.content.Context! mContext;
    field String! mId;
    field androidx.media2.SessionPlayer2! mPlayer;
    field android.app.PendingIntent! mSessionActivity;
  }

  public static final class MediaSession2.CommandButton implements androidx.versionedparcelable.VersionedParcelable {
    ctor MediaSession2.CommandButton();
    ctor MediaSession2.CommandButton(androidx.media2.SessionCommand2?, int, CharSequence?, android.os.Bundle!, boolean);
    field androidx.media2.SessionCommand2! mCommand;
    field CharSequence! mDisplayName;
    field boolean mEnabled;
    field android.os.Bundle! mExtras;
    field int mIconResId;
  }

  public static final class MediaSession2.CommandButton.Builder {
    field private androidx.media2.SessionCommand2! mCommand;
    field private CharSequence! mDisplayName;
    field private boolean mEnabled;
    field private android.os.Bundle! mExtras;
    field private int mIconResId;
  }

  abstract static class MediaSession2.ControllerCb {
    ctor MediaSession2.ControllerCb();
    method abstract void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2) throws android.os.RemoteException;
    method abstract void onBufferingStateChanged(androidx.media2.MediaItem2, int, long) throws android.os.RemoteException;
    method abstract void onChildrenChanged(String, int, androidx.media2.MediaLibraryService2.LibraryParams?) throws android.os.RemoteException;
    method abstract void onCurrentMediaItemChanged(androidx.media2.MediaItem2?) throws android.os.RemoteException;
    method abstract void onDisconnected() throws android.os.RemoteException;
    method abstract void onLibraryResult(int, androidx.media2.MediaLibraryService2.LibraryResult!) throws android.os.RemoteException;
    method abstract void onPlaybackCompleted() throws android.os.RemoteException;
    method abstract void onPlaybackInfoChanged(androidx.media2.MediaController2.PlaybackInfo) throws android.os.RemoteException;
    method abstract void onPlaybackSpeedChanged(long, long, float) throws android.os.RemoteException;
    method abstract void onPlayerResult(int, androidx.media2.SessionPlayer2.PlayerResult!) throws android.os.RemoteException;
    method abstract void onPlayerStateChanged(long, long, int) throws android.os.RemoteException;
    method abstract void onPlaylistChanged(java.util.List<androidx.media2.MediaItem2>, androidx.media2.MediaMetadata2?) throws android.os.RemoteException;
    method abstract void onPlaylistMetadataChanged(androidx.media2.MediaMetadata2?) throws android.os.RemoteException;
    method abstract void onRepeatModeChanged(int) throws android.os.RemoteException;
    method abstract void onRoutesInfoChanged(java.util.List<android.os.Bundle>?) throws android.os.RemoteException;
    method abstract void onSearchResultChanged(String, int, androidx.media2.MediaLibraryService2.LibraryParams?) throws android.os.RemoteException;
    method abstract void onSeekCompleted(long, long, long) throws android.os.RemoteException;
    method abstract void onSessionResult(int, androidx.media2.MediaSession2.SessionResult!) throws android.os.RemoteException;
    method abstract void onShuffleModeChanged(int) throws android.os.RemoteException;
    method abstract void sendCustomCommand(int, androidx.media2.SessionCommand2, android.os.Bundle?) throws android.os.RemoteException;
    method abstract void setCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>) throws android.os.RemoteException;
  }

  public static final class MediaSession2.ControllerInfo {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) MediaSession2.ControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo, boolean, androidx.media2.MediaSession2.ControllerCb?);
    method androidx.media2.MediaSession2.ControllerCb? getControllerCb();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.media.MediaSessionManager.RemoteUserInfo getRemoteUserInfo();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isTrusted();
    field private final androidx.media2.MediaSession2.ControllerCb! mControllerCb;
    field private final boolean mIsTrusted;
    field private final androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
  }

  static interface MediaSession2.MediaSession2Impl extends androidx.media2.MediaInterface2.SessionPlayer java.lang.AutoCloseable {
    method public void broadcastCustomCommand(androidx.media2.SessionCommand2, android.os.Bundle?);
    method public void connectFromService(IMediaController2!, String!, int, int);
    method public android.support.v4.media.session.PlaybackStateCompat! createPlaybackStateCompat();
    method public androidx.media2.MediaSession2.SessionCallback! getCallback();
    method public java.util.concurrent.Executor! getCallbackExecutor();
    method public java.util.List<androidx.media2.MediaSession2.ControllerInfo> getConnectedControllers();
    method public android.content.Context! getContext();
    method public String getId();
    method public androidx.media2.MediaSession2! getInstance();
    method public android.os.IBinder! getLegacyBrowserServiceBinder();
    method public androidx.media2.MediaController2.PlaybackInfo! getPlaybackInfo();
    method public androidx.media2.SessionPlayer2 getPlayer();
    method public android.app.PendingIntent! getSessionActivity();
    method public android.support.v4.media.session.MediaSessionCompat! getSessionCompat();
    method public androidx.media2.SessionToken2 getToken();
    method public boolean isClosed();
    method public boolean isConnected(androidx.media2.MediaSession2.ControllerInfo);
    method public void notifyRoutesInfoChanged(androidx.media2.MediaSession2.ControllerInfo, java.util.List<android.os.Bundle>?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! sendCustomCommand(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.SessionCommand2, android.os.Bundle?);
    method public void setAllowedCommands(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.SessionCommandGroup2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! setCustomLayout(androidx.media2.MediaSession2.ControllerInfo, java.util.List<androidx.media2.MediaSession2.CommandButton>);
    method public void updatePlayer(androidx.media2.SessionPlayer2, androidx.media2.SessionPlayer2?);
    method public void updatePlayer(androidx.media2.SessionPlayer2);
  }

  public abstract static class MediaSession2.SessionCallback {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPlayFromMediaId(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPlayFromSearch(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPlayFromUri(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, android.net.Uri, android.os.Bundle?);
    method final void onPlayerStateChanged(androidx.media2.MediaSession2!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPrepareFromMediaId(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPrepareFromSearch(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, String, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onPrepareFromUri(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, android.net.Uri, android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onSelectRoute(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo, android.os.Bundle);
    method final void onSessionClosed(androidx.media2.MediaSession2!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onSubscribeRoutesInfo(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int onUnsubscribeRoutesInfo(androidx.media2.MediaSession2, androidx.media2.MediaSession2.ControllerInfo);
    method void setForegroundServiceEventCallback(androidx.media2.MediaSession2.SessionCallback.ForegroundServiceEventCallback!);
    field androidx.media2.MediaSession2.SessionCallback.ForegroundServiceEventCallback! mForegroundServiceEventCallback;
  }

  abstract static class MediaSession2.SessionCallback.ForegroundServiceEventCallback {
    ctor MediaSession2.SessionCallback.ForegroundServiceEventCallback();
    method public void onPlayerStateChanged(androidx.media2.MediaSession2!, int);
    method public void onSessionClosed(androidx.media2.MediaSession2!);
  }

  public static class MediaSession2.SessionResult implements androidx.media2.RemoteResult2 androidx.versionedparcelable.VersionedParcelable {
    ctor MediaSession2.SessionResult();
    ctor MediaSession2.SessionResult(int);
    ctor MediaSession2.SessionResult(int, android.os.Bundle?, androidx.media2.MediaItem2?, long);
    method static com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! createFutureWithResult(int);
    method static androidx.media2.MediaSession2.SessionResult? from(androidx.media2.SessionPlayer2.PlayerResult?);
    method static androidx.media2.MediaSession2.SessionResult? from(androidx.media2.MediaController2.ControllerResult?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public androidx.media2.MediaItem2! getMediaItem();
    field long mCompletionTime;
    field android.os.Bundle! mCustomCommandResult;
    field androidx.media2.MediaItem2! mItem;
    field int mResultCode;
  }

  @IntDef(flag=false, value={androidx.media2.BaseResult2.RESULT_CODE_SUCCESS, androidx.media2.BaseResult2.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult2.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult2.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult2.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult2.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult2.RESULT_CODE_SKIPPED, androidx.media2.RemoteResult2.RESULT_CODE_DISCONNECTED, androidx.media2.BaseResult2.RESULT_CODE_NOT_SUPPORTED, androidx.media2.RemoteResult2.RESULT_CODE_AUTHENTICATION_EXPIRED, androidx.media2.RemoteResult2.RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED, androidx.media2.RemoteResult2.RESULT_CODE_CONCURRENT_STREAM_LIMIT, androidx.media2.RemoteResult2.RESULT_CODE_PARENTAL_CONTROL_RESTRICTED, androidx.media2.RemoteResult2.RESULT_CODE_NOT_AVAILABLE_IN_REGION, androidx.media2.RemoteResult2.RESULT_CODE_SKIP_LIMIT_REACHED, androidx.media2.RemoteResult2.RESULT_CODE_SETUP_REQUIRED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface MediaSession2.SessionResult.ResultCode {
  }

  class MediaSession2ImplBase implements androidx.media2.MediaSession2.MediaSession2Impl {
    ctor MediaSession2ImplBase(androidx.media2.MediaSession2!, android.content.Context!, String!, androidx.media2.SessionPlayer2!, android.app.PendingIntent!, java.util.concurrent.Executor!, androidx.media2.MediaSession2.SessionCallback!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! addPlaylistItem(int, androidx.media2.MediaItem2);
    method public void broadcastCustomCommand(androidx.media2.SessionCommand2, android.os.Bundle?);
    method public void connectFromService(IMediaController2!, String!, int, int);
    method androidx.media.MediaBrowserServiceCompat! createLegacyBrowserService(android.content.Context!, androidx.media2.SessionToken2!, android.support.v4.media.session.MediaSessionCompat.Token!);
    method androidx.media2.MediaController2.PlaybackInfo createPlaybackInfo(androidx.media2.SessionPlayer2, androidx.media.AudioAttributesCompat!);
    method public android.support.v4.media.session.PlaybackStateCompat! createPlaybackStateCompat();
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! dispatchPlayerTask(androidx.media2.MediaSession2ImplBase.PlayerTask<com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>>);
    method private <T> T! dispatchPlayerTask(androidx.media2.MediaSession2ImplBase.PlayerTask<T>, T!);
    method void dispatchRemoteControllerCallbackTask(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.MediaSession2ImplBase.RemoteControllerCallbackTask);
    method void dispatchRemoteControllerCallbackTask(androidx.media2.MediaSession2ImplBase.RemoteControllerCallbackTask);
    method private com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! dispatchRemoteControllerTask(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.MediaSession2ImplBase.RemoteControllerTask);
    method void dispatchRemoteControllerTask(androidx.media2.MediaSession2ImplBase.RemoteControllerTask);
    method public long getBufferedPosition();
    method public int getBufferingState();
    method public androidx.media2.MediaSession2.SessionCallback! getCallback();
    method public java.util.concurrent.Executor! getCallbackExecutor();
    method public java.util.List<androidx.media2.MediaSession2.ControllerInfo> getConnectedControllers();
    method public android.content.Context! getContext();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method private androidx.media2.MediaItem2? getCurrentMediaItemOrNull();
    method public long getCurrentPosition();
    method public long getDuration();
    method public String! getId();
    method public androidx.media2.MediaSession2 getInstance();
    method androidx.media.MediaBrowserServiceCompat! getLegacyBrowserService();
    method public android.os.IBinder! getLegacyBrowserServiceBinder();
    method private int getLegacyStreamType(androidx.media.AudioAttributesCompat?);
    method public androidx.media2.MediaController2.PlaybackInfo! getPlaybackInfo();
    method public float getPlaybackSpeed();
    method public androidx.media2.SessionPlayer2 getPlayer();
    method public int getPlayerState();
    method public java.util.List<androidx.media2.MediaItem2>! getPlaylist();
    method public androidx.media2.MediaMetadata2! getPlaylistMetadata();
    method private java.util.List<androidx.media2.MediaItem2>? getPlaylistOrNull();
    method public int getRepeatMode();
    method public android.app.PendingIntent! getSessionActivity();
    method public android.support.v4.media.session.MediaSessionCompat! getSessionCompat();
    method public int getShuffleMode();
    method public androidx.media2.SessionToken2 getToken();
    method public boolean isClosed();
    method public boolean isConnected(androidx.media2.MediaSession2.ControllerInfo!);
    method boolean isInPlaybackState(androidx.media2.SessionPlayer2);
    method void notifyPlaybackInfoChangedNotLocked(androidx.media2.MediaController2.PlaybackInfo!);
    method private void notifyPlayerUpdatedNotLocked(androidx.media2.SessionPlayer2!);
    method public void notifyRoutesInfoChanged(androidx.media2.MediaSession2.ControllerInfo, java.util.List<android.os.Bundle>?);
    method private void onDeadObjectException(androidx.media2.MediaSession2.ControllerInfo!, android.os.DeadObjectException!);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! pause();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! play();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! prepare();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! removePlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! replacePlaylistItem(int, androidx.media2.MediaItem2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! seekTo(long);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! sendCustomCommand(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.SessionCommand2, android.os.Bundle?);
    method public void setAllowedCommands(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.SessionCommandGroup2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.MediaSession2.SessionResult>! setCustomLayout(androidx.media2.MediaSession2.ControllerInfo, java.util.List<androidx.media2.MediaSession2.CommandButton>);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setMediaItem(androidx.media2.MediaItem2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setPlaybackSpeed(float);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setPlaylist(java.util.List<androidx.media2.MediaItem2>, androidx.media2.MediaMetadata2?);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setRepeatMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! setShuffleMode(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToNextItem();
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToPlaylistItem(int);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! skipToPreviousItem();
    method public void updatePlayer(androidx.media2.SessionPlayer2, androidx.media2.SessionPlayer2?);
    method public void updatePlayer(androidx.media2.SessionPlayer2);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! updatePlaylistMetadata(androidx.media2.MediaMetadata2?);
    field static final boolean DEBUG = true;
    field private static final String DEFAULT_MEDIA_SESSION_TAG_DELIM = ".";
    field private static final String DEFAULT_MEDIA_SESSION_TAG_PREFIX = "android.media.session2.id";
    field private static final androidx.media2.MediaSession2.SessionResult! RESULT_WHEN_CLOSED;
    field @GuardedBy("MediaSession2ImplBase.class") private static final java.util.List<java.lang.String>! SESSION_ID_LIST;
    field static final String TAG = "MS2ImplBase";
    field private final android.media.AudioManager! mAudioManager;
    field @GuardedBy("mLock") private androidx.media.MediaBrowserServiceCompat! mBrowserServiceLegacyStub;
    field final androidx.media2.MediaSession2.SessionCallback! mCallback;
    field final java.util.concurrent.Executor! mCallbackExecutor;
    field private final android.content.Context! mContext;
    field private final android.os.Handler! mHandler;
    field private final android.os.HandlerThread! mHandlerThread;
    field private final androidx.media2.MediaSession2! mInstance;
    field final Object! mLock;
    field @GuardedBy("mLock") androidx.media2.MediaController2.PlaybackInfo! mPlaybackInfo;
    field @GuardedBy("mLock") private androidx.media2.SessionPlayer2! mPlayer;
    field private final androidx.media2.SessionPlayer2.PlayerCallback! mPlayerCallback;
    field private final androidx.media2.MediaSession2Stub! mSession2Stub;
    field private final android.app.PendingIntent! mSessionActivity;
    field private final android.support.v4.media.session.MediaSessionCompat! mSessionCompat;
    field private final String! mSessionId;
    field private final androidx.media2.MediaSessionLegacyStub! mSessionLegacyStub;
    field private final androidx.media2.SessionToken2! mSessionToken;
  }

  static final class MediaSession2ImplBase.CombinedCommandResultFuture<T extends androidx.media2.BaseResult2> extends androidx.concurrent.futures.AbstractResolvableFuture<T> {
    ctor private MediaSession2ImplBase.CombinedCommandResultFuture(java.util.concurrent.Executor!, com.google.common.util.concurrent.ListenableFuture<T>[]!);
    method public static <U extends androidx.media2.BaseResult2> androidx.media2.MediaSession2ImplBase.CombinedCommandResultFuture! create(java.util.concurrent.Executor!, com.google.common.util.concurrent.ListenableFuture<U>...!);
    field final com.google.common.util.concurrent.ListenableFuture<T>[]! mFutures;
    field java.util.concurrent.atomic.AtomicInteger! mSuccessCount;
  }

  static class MediaSession2ImplBase.CurrentMediaItemListener implements androidx.media2.MediaItem2.OnMetadataChangedListener {
    ctor MediaSession2ImplBase.CurrentMediaItemListener(androidx.media2.MediaSession2ImplBase!);
    method public void onMetadataChanged(androidx.media2.MediaItem2!);
    field private final java.lang.ref.WeakReference<androidx.media2.MediaSession2ImplBase>! mSession;
  }

  @java.lang.FunctionalInterface static interface MediaSession2ImplBase.PlayerTask<T> {
    method public T! run(androidx.media2.SessionPlayer2) throws java.lang.Exception;
  }

  static class MediaSession2ImplBase.PlaylistItemListener implements androidx.media2.MediaItem2.OnMetadataChangedListener {
    ctor MediaSession2ImplBase.PlaylistItemListener(androidx.media2.MediaSession2ImplBase!);
    method public void onMetadataChanged(androidx.media2.MediaItem2!);
    field private final java.lang.ref.WeakReference<androidx.media2.MediaSession2ImplBase>! mSession;
  }

  @java.lang.FunctionalInterface static interface MediaSession2ImplBase.RemoteControllerCallbackTask {
    method public void run(androidx.media2.MediaSession2.ControllerCb!) throws android.os.RemoteException;
  }

  @java.lang.FunctionalInterface static interface MediaSession2ImplBase.RemoteControllerTask {
    method public void run(androidx.media2.MediaSession2.ControllerCb!, int) throws android.os.RemoteException;
  }

  private static class MediaSession2ImplBase.SessionPlayerCallback extends androidx.media2.SessionPlayer2.PlayerCallback {
    ctor MediaSession2ImplBase.SessionPlayerCallback(androidx.media2.MediaSession2ImplBase!);
    method private void dispatchRemoteControllerTask(androidx.media2.SessionPlayer2, androidx.media2.MediaSession2ImplBase.RemoteControllerCallbackTask);
    method private androidx.media2.MediaSession2ImplBase! getSession();
    method private void updateDurationIfNeeded(androidx.media2.SessionPlayer2, androidx.media2.MediaItem2?);
    field private final androidx.media2.MediaSession2ImplBase.CurrentMediaItemListener! mCurrentItemChangedListener;
    field private java.util.List<androidx.media2.MediaItem2>! mList;
    field private androidx.media2.MediaItem2! mMediaItem;
    field private final androidx.media2.MediaSession2ImplBase.PlaylistItemListener! mPlaylistItemChangedListener;
    field private final java.lang.ref.WeakReference<androidx.media2.MediaSession2ImplBase>! mSession;
  }

  class MediaSession2Stub {
    ctor MediaSession2Stub(androidx.media2.MediaSession2.MediaSession2Impl!);
    method public void addPlaylistItem(IMediaController2!, int, int, String!);
    method public void adjustVolume(IMediaController2!, int, int, int) throws java.lang.RuntimeException;
    method void connect(IMediaController2!, String!, int, int);
    method public void connect(IMediaController2!, int, String!) throws java.lang.RuntimeException;
    method androidx.media2.MediaItem2? convertMediaItem2OnExecutor(androidx.media2.MediaSession2.ControllerInfo!, String);
    method private void dispatchLibrarySessionTask(IMediaController2, int, int, androidx.media2.MediaSession2Stub.LibrarySessionCallbackTask);
    method private void dispatchSessionTask(IMediaController2, int, int, androidx.media2.MediaSession2Stub.SessionTask);
    method private void dispatchSessionTask(IMediaController2, int, androidx.media2.SessionCommand2, androidx.media2.MediaSession2Stub.SessionTask);
    method private void dispatchSessionTaskInternal(IMediaController2, int, androidx.media2.SessionCommand2?, int, androidx.media2.MediaSession2Stub.SessionTask);
    method public void fastForward(IMediaController2!, int);
    method public void getChildren(IMediaController2!, int, String!, int, int, androidx.versionedparcelable.ParcelImpl!) throws java.lang.RuntimeException;
    method androidx.media2.ConnectedControllersManager<android.os.IBinder>! getConnectedControllersManager();
    method public void getItem(IMediaController2!, int, String!) throws java.lang.RuntimeException;
    method public void getLibraryRoot(IMediaController2!, int, androidx.versionedparcelable.ParcelImpl!) throws java.lang.RuntimeException;
    method androidx.media2.MediaLibraryService2.MediaLibrarySession.MediaLibrarySessionImpl! getLibrarySession();
    method public void getSearchResult(IMediaController2!, int, String!, int, int, androidx.versionedparcelable.ParcelImpl!);
    method public void onControllerResult(IMediaController2!, int, androidx.versionedparcelable.ParcelImpl!);
    method public void onCustomCommand(IMediaController2!, int, androidx.versionedparcelable.ParcelImpl!, android.os.Bundle!);
    method public void pause(IMediaController2!, int) throws java.lang.RuntimeException;
    method public void play(IMediaController2!, int) throws java.lang.RuntimeException;
    method public void playFromMediaId(IMediaController2!, int, String!, android.os.Bundle!);
    method public void playFromSearch(IMediaController2!, int, String!, android.os.Bundle!);
    method public void playFromUri(IMediaController2!, int, android.net.Uri!, android.os.Bundle!);
    method public void prepare(IMediaController2!, int) throws java.lang.RuntimeException;
    method public void prepareFromMediaId(IMediaController2!, int, String!, android.os.Bundle!);
    method public void prepareFromSearch(IMediaController2!, int, String!, android.os.Bundle!);
    method public void prepareFromUri(IMediaController2!, int, android.net.Uri!, android.os.Bundle!);
    method public void release(IMediaController2!, int) throws android.os.RemoteException;
    method public void removePlaylistItem(IMediaController2!, int, int);
    method public void replacePlaylistItem(IMediaController2!, int, int, String!);
    method public void rewind(IMediaController2!, int);
    method public void search(IMediaController2!, int, String!, androidx.versionedparcelable.ParcelImpl!);
    method public void seekTo(IMediaController2!, int, long) throws java.lang.RuntimeException;
    method public void selectRoute(IMediaController2!, int, android.os.Bundle!);
    method static void sendLibraryResult(androidx.media2.MediaSession2.ControllerInfo, int, int);
    method static void sendLibraryResult(androidx.media2.MediaSession2.ControllerInfo, int, androidx.media2.MediaLibraryService2.LibraryResult);
    method static void sendPlayerResult(androidx.media2.MediaSession2.ControllerInfo, int, androidx.media2.SessionPlayer2.PlayerResult);
    method static void sendSessionResult(androidx.media2.MediaSession2.ControllerInfo, int, int);
    method static void sendSessionResult(androidx.media2.MediaSession2.ControllerInfo, int, androidx.media2.MediaSession2.SessionResult);
    method public void setMediaItem(IMediaController2!, int, String!);
    method public void setPlaybackSpeed(IMediaController2!, int, float);
    method public void setPlaylist(IMediaController2!, int, java.util.List<java.lang.String>!, androidx.versionedparcelable.ParcelImpl!);
    method public void setRating(IMediaController2!, int, String!, androidx.versionedparcelable.ParcelImpl!);
    method public void setRepeatMode(IMediaController2!, int, int);
    method public void setShuffleMode(IMediaController2!, int, int);
    method public void setVolumeTo(IMediaController2!, int, int, int) throws java.lang.RuntimeException;
    method public void skipBackward(IMediaController2!, int);
    method public void skipForward(IMediaController2!, int);
    method public void skipToNextItem(IMediaController2!, int);
    method public void skipToPlaylistItem(IMediaController2!, int, int);
    method public void skipToPreviousItem(IMediaController2!, int);
    method public void subscribe(IMediaController2!, int, String!, androidx.versionedparcelable.ParcelImpl!);
    method public void subscribeRoutesInfo(IMediaController2!, int);
    method public void unsubscribe(IMediaController2!, int, String!);
    method public void unsubscribeRoutesInfo(IMediaController2!, int);
    method public void updatePlaylistMetadata(IMediaController2!, int, androidx.versionedparcelable.ParcelImpl!);
    field private static final boolean DEBUG = true;
    field private static final boolean RETHROW_EXCEPTION = true;
    field private static final String TAG = "MediaSession2Stub";
    field final androidx.media2.ConnectedControllersManager<android.os.IBinder>! mConnectedControllersManager;
    field @GuardedBy("mLock") final java.util.Set<android.os.IBinder>! mConnectingControllers;
    field final android.content.Context! mContext;
    field final Object! mLock;
    field final androidx.media2.MediaSession2.MediaSession2Impl! mSessionImpl;
    field final androidx.media.MediaSessionManager! mSessionManager;
    field static final android.util.SparseArray<androidx.media2.SessionCommand2>! sCommandsForOnCommandRequest;
  }

  final class MediaSession2Stub.Controller2Cb extends androidx.media2.MediaSession2.ControllerCb {
    ctor MediaSession2Stub.Controller2Cb(IMediaController2);
    method android.os.IBinder getCallbackBinder();
    method void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2!) throws android.os.RemoteException;
    method void onBufferingStateChanged(androidx.media2.MediaItem2!, int, long) throws android.os.RemoteException;
    method void onChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onCurrentMediaItemChanged(androidx.media2.MediaItem2!) throws android.os.RemoteException;
    method void onDisconnected() throws android.os.RemoteException;
    method void onLibraryResult(int, androidx.media2.MediaLibraryService2.LibraryResult!) throws android.os.RemoteException;
    method void onPlaybackCompleted() throws android.os.RemoteException;
    method void onPlaybackInfoChanged(androidx.media2.MediaController2.PlaybackInfo!) throws android.os.RemoteException;
    method void onPlaybackSpeedChanged(long, long, float) throws android.os.RemoteException;
    method void onPlayerResult(int, androidx.media2.SessionPlayer2.PlayerResult?) throws android.os.RemoteException;
    method void onPlayerStateChanged(long, long, int) throws android.os.RemoteException;
    method void onPlaylistChanged(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onPlaylistMetadataChanged(androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onRepeatModeChanged(int) throws android.os.RemoteException;
    method void onRoutesInfoChanged(java.util.List<android.os.Bundle>!) throws android.os.RemoteException;
    method void onSearchResultChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onSeekCompleted(long, long, long) throws android.os.RemoteException;
    method void onSessionResult(int, androidx.media2.MediaSession2.SessionResult?) throws android.os.RemoteException;
    method void onShuffleModeChanged(int) throws android.os.RemoteException;
    method void sendCustomCommand(int, androidx.media2.SessionCommand2!, android.os.Bundle!) throws android.os.RemoteException;
    method void setCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>!) throws android.os.RemoteException;
    field private final IMediaController2! mIControllerCallback;
  }

  private static interface MediaSession2Stub.LibrarySessionCallbackTask<T> extends androidx.media2.MediaSession2Stub.SessionTask {
    method public T! run(androidx.media2.MediaSession2.ControllerInfo!) throws android.os.RemoteException;
  }

  private static interface MediaSession2Stub.SessionCallbackTask<T> extends androidx.media2.MediaSession2Stub.SessionTask {
    method public T! run(androidx.media2.MediaSession2.ControllerInfo!) throws android.os.RemoteException;
  }

  private static interface MediaSession2Stub.SessionPlayerTask extends androidx.media2.MediaSession2Stub.SessionTask {
    method public com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! run(androidx.media2.MediaSession2.ControllerInfo!) throws android.os.RemoteException;
  }

  private static interface MediaSession2Stub.SessionTask<T> {
  }

  class MediaSessionLegacyStub extends android.support.v4.media.session.MediaSessionCompat.Callback {
    ctor MediaSessionLegacyStub(androidx.media2.MediaSession2.MediaSession2Impl!);
    method private void dispatchSessionTask(int, androidx.media2.MediaSessionLegacyStub.SessionTask);
    method private void dispatchSessionTask(androidx.media2.SessionCommand2, androidx.media2.MediaSessionLegacyStub.SessionTask);
    method private void dispatchSessionTaskInternal(androidx.media2.SessionCommand2?, int, androidx.media2.MediaSessionLegacyStub.SessionTask);
    method androidx.media2.ConnectedControllersManager! getConnectedControllersManager();
    method androidx.media2.MediaSession2.ControllerInfo! getControllersForAll();
    method void handleTaskOnExecutor(androidx.media2.MediaSession2.ControllerInfo, androidx.media2.SessionCommand2?, int, androidx.media2.MediaSessionLegacyStub.SessionTask);
    field static final boolean DEBUG;
    field private static final String TAG = "MediaSessionLegacyStub";
    field final androidx.media2.ConnectedControllersManager<androidx.media.MediaSessionManager.RemoteUserInfo>! mConnectedControllersManager;
    field final android.content.Context! mContext;
    field final androidx.media2.MediaSession2.ControllerInfo! mControllerInfoForAll;
    field final Object! mLock;
    field final androidx.media2.MediaSession2.MediaSession2Impl! mSessionImpl;
    field final androidx.media.MediaSessionManager! mSessionManager;
    field static final android.util.SparseArray<androidx.media2.SessionCommand2>! sCommandsForOnCommandRequest;
  }

  final class MediaSessionLegacyStub.ControllerLegacyCb extends androidx.media2.MediaSession2.ControllerCb {
    ctor MediaSessionLegacyStub.ControllerLegacyCb(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2!) throws android.os.RemoteException;
    method void onBufferingStateChanged(androidx.media2.MediaItem2!, int, long) throws android.os.RemoteException;
    method void onChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onCurrentMediaItemChanged(androidx.media2.MediaItem2!) throws android.os.RemoteException;
    method void onDisconnected() throws android.os.RemoteException;
    method void onLibraryResult(int, androidx.media2.MediaLibraryService2.LibraryResult!) throws android.os.RemoteException;
    method void onPlaybackCompleted() throws android.os.RemoteException;
    method void onPlaybackInfoChanged(androidx.media2.MediaController2.PlaybackInfo!) throws android.os.RemoteException;
    method void onPlaybackSpeedChanged(long, long, float) throws android.os.RemoteException;
    method void onPlayerResult(int, androidx.media2.SessionPlayer2.PlayerResult!) throws android.os.RemoteException;
    method void onPlayerStateChanged(long, long, int) throws android.os.RemoteException;
    method void onPlaylistChanged(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onPlaylistMetadataChanged(androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onRepeatModeChanged(int) throws android.os.RemoteException;
    method void onRoutesInfoChanged(java.util.List<android.os.Bundle>!) throws android.os.RemoteException;
    method void onSearchResultChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onSeekCompleted(long, long, long) throws android.os.RemoteException;
    method void onSessionResult(int, androidx.media2.MediaSession2.SessionResult!) throws android.os.RemoteException;
    method void onShuffleModeChanged(int) throws android.os.RemoteException;
    method void sendCustomCommand(int, androidx.media2.SessionCommand2!, android.os.Bundle!) throws android.os.RemoteException;
    method void setCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>!) throws android.os.RemoteException;
    field private final androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
  }

  final class MediaSessionLegacyStub.ControllerLegacyCbForAll extends androidx.media2.MediaSession2.ControllerCb {
    ctor MediaSessionLegacyStub.ControllerLegacyCbForAll();
    method void onAllowedCommandsChanged(androidx.media2.SessionCommandGroup2!) throws android.os.RemoteException;
    method void onBufferingStateChanged(androidx.media2.MediaItem2!, int, long) throws android.os.RemoteException;
    method void onChildrenChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onCurrentMediaItemChanged(androidx.media2.MediaItem2!) throws android.os.RemoteException;
    method void onDisconnected() throws android.os.RemoteException;
    method void onLibraryResult(int, androidx.media2.MediaLibraryService2.LibraryResult!) throws android.os.RemoteException;
    method void onPlaybackCompleted() throws android.os.RemoteException;
    method void onPlaybackInfoChanged(androidx.media2.MediaController2.PlaybackInfo!) throws android.os.RemoteException;
    method void onPlaybackSpeedChanged(long, long, float) throws android.os.RemoteException;
    method void onPlayerResult(int, androidx.media2.SessionPlayer2.PlayerResult!) throws android.os.RemoteException;
    method void onPlayerStateChanged(long, long, int) throws android.os.RemoteException;
    method void onPlaylistChanged(java.util.List<androidx.media2.MediaItem2>!, androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onPlaylistMetadataChanged(androidx.media2.MediaMetadata2!) throws android.os.RemoteException;
    method void onRepeatModeChanged(int) throws android.os.RemoteException;
    method void onRoutesInfoChanged(java.util.List<android.os.Bundle>!) throws android.os.RemoteException;
    method void onSearchResultChanged(String!, int, androidx.media2.MediaLibraryService2.LibraryParams!) throws android.os.RemoteException;
    method void onSeekCompleted(long, long, long) throws android.os.RemoteException;
    method void onSessionResult(int, androidx.media2.MediaSession2.SessionResult!) throws android.os.RemoteException;
    method void onShuffleModeChanged(int) throws android.os.RemoteException;
    method void sendCustomCommand(int, androidx.media2.SessionCommand2!, android.os.Bundle!) throws android.os.RemoteException;
    method void setCustomLayout(int, java.util.List<androidx.media2.MediaSession2.CommandButton>!) throws android.os.RemoteException;
  }

  @java.lang.FunctionalInterface private static interface MediaSessionLegacyStub.SessionTask {
    method public void run(androidx.media2.MediaSession2.ControllerInfo!) throws android.os.RemoteException;
  }

  @RequiresApi(28) public final class MediaSessionManager2 {
    ctor private MediaSessionManager2(android.content.Context!);
    field static final boolean DEBUG;
    field static final String TAG = "MediaSessionManager2";
    field private final android.content.Context! mContext;
    field @GuardedBy("sLock") private static androidx.media2.MediaSessionManager2! sInstance;
    field private static final Object! sLock;
  }

  public abstract class MediaSessionService2 extends android.app.Service {
    method androidx.media2.MediaSessionService2.MediaSessionService2Impl! createImpl();
    field private final androidx.media2.MediaSessionService2.MediaSessionService2Impl! mImpl;
  }

  public static class MediaSessionService2.MediaNotification {
    field private final android.app.Notification! mNotification;
    field private final int mNotificationId;
  }

  static interface MediaSessionService2.MediaSessionService2Impl {
    method public void addSession(androidx.media2.MediaSession2!);
    method public java.util.List<androidx.media2.MediaSession2>! getSessions();
    method public android.os.IBinder! onBind(android.content.Intent!);
    method public void onCreate(androidx.media2.MediaSessionService2!);
    method public void onDestroy();
    method public int onStartCommand(android.content.Intent!, int, int);
    method public androidx.media2.MediaSessionService2.MediaNotification! onUpdateNotification(androidx.media2.MediaSession2!);
    method public void removeSession(androidx.media2.MediaSession2!);
  }

  class MediaSessionService2ImplBase implements androidx.media2.MediaSessionService2.MediaSessionService2Impl {
    ctor MediaSessionService2ImplBase();
    method public void addSession(androidx.media2.MediaSession2!);
    method androidx.media2.MediaSessionService2! getInstance();
    method android.os.IBinder! getServiceBinder();
    method public java.util.List<androidx.media2.MediaSession2>! getSessions();
    method public android.os.IBinder! onBind(android.content.Intent!);
    method public void onCreate(androidx.media2.MediaSessionService2!);
    method public void onDestroy();
    method public int onStartCommand(android.content.Intent!, int, int);
    method public androidx.media2.MediaSessionService2.MediaNotification! onUpdateNotification(androidx.media2.MediaSession2!);
    method public void removeSession(androidx.media2.MediaSession2!);
    field private static final boolean DEBUG = true;
    field private static final String TAG = "MSS2ImplBase";
    field @GuardedBy("mLock") androidx.media2.MediaSessionService2! mInstance;
    field private final Object! mLock;
    field @GuardedBy("mLock") private androidx.media2.MediaNotificationHandler! mNotificationHandler;
    field @GuardedBy("mLock") private java.util.Map<java.lang.String,androidx.media2.MediaSession2>! mSessions;
    field @GuardedBy("mLock") androidx.media2.MediaSessionService2ImplBase.MediaSessionService2Stub! mStub;
  }

  private static final class MediaSessionService2ImplBase.MediaSessionService2Stub implements java.lang.AutoCloseable {
    ctor MediaSessionService2ImplBase.MediaSessionService2Stub(androidx.media2.MediaSessionService2ImplBase!);
    method public void connect(IMediaController2!, String!);
    field final android.os.Handler! mHandler;
    field final java.lang.ref.WeakReference<androidx.media2.MediaSessionService2ImplBase>! mServiceImpl;
  }

  class MediaSessionService2LegacyStub extends androidx.media.MediaBrowserServiceCompat {
    ctor MediaSessionService2LegacyStub(android.content.Context!, androidx.media2.MediaSession2.MediaSession2Impl!, android.support.v4.media.session.MediaSessionCompat.Token!);
    method androidx.media2.MediaSession2.ControllerInfo! createControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method androidx.media2.ConnectedControllersManager<androidx.media.MediaSessionManager.RemoteUserInfo>! getConnectedControllersManager();
    field private final androidx.media2.ConnectedControllersManager<androidx.media.MediaSessionManager.RemoteUserInfo>! mConnectedControllersManager;
    field final androidx.media.MediaSessionManager! mManager;
    field private final androidx.media2.MediaSession2.MediaSession2Impl! mSessionImpl;
  }

  public final class MediaTimestamp2 {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public MediaTimestamp2(long, long, float);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) MediaTimestamp2(android.media.MediaTimestamp!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) MediaTimestamp2();
    field private final float mClockRate;
    field private final long mMediaTimeUs;
    field private final long mNanoTime;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @VisibleForTesting(otherwise=androidx.annotation.VisibleForTesting.PACKAGE_PRIVATE) public class MediaUtils2 {
    ctor private MediaUtils2();
    method public static java.util.List<androidx.versionedparcelable.ParcelImpl>! convertCommandButtonListToParcelImplList(java.util.List<androidx.media2.MediaSession2.CommandButton>!);
    method public static androidx.media2.ParcelImplListSlice! convertMediaItem2ListToParcelImplListSlice(java.util.List<androidx.media2.MediaItem2>!);
    method public static java.util.List<androidx.media2.MediaItem2>! convertMediaItemListToMediaItem2List(java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>!);
    method public static java.util.List<androidx.media2.MediaItem2>! convertParcelImplListSliceToMediaItem2List(androidx.media2.ParcelImplListSlice!);
    method public static java.util.List<androidx.media2.MediaItem2>! convertQueueItemListToMediaItem2List(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!);
    method public static androidx.media2.MediaLibraryService2.LibraryParams! convertToLibraryParams(android.content.Context!, android.os.Bundle!);
    method public static android.support.v4.media.MediaBrowserCompat.MediaItem! convertToMediaItem(androidx.media2.MediaItem2!);
    method public static androidx.media2.MediaItem2! convertToMediaItem2(android.support.v4.media.MediaBrowserCompat.MediaItem!);
    method public static androidx.media2.MediaItem2! convertToMediaItem2(android.support.v4.media.session.MediaSessionCompat.QueueItem!);
    method public static androidx.media2.MediaItem2! convertToMediaItem2(android.support.v4.media.MediaMetadataCompat!);
    method public static androidx.media2.MediaItem2! convertToMediaItem2(android.support.v4.media.MediaDescriptionCompat!);
    method public static java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>! convertToMediaItemList(java.util.List<androidx.media2.MediaItem2>!);
    method private static androidx.media2.MediaMetadata2! convertToMediaMetadata2(android.support.v4.media.MediaDescriptionCompat!, boolean, boolean);
    method public static androidx.media2.MediaMetadata2! convertToMediaMetadata2(CharSequence!);
    method public static android.support.v4.media.MediaMetadataCompat! convertToMediaMetadataCompat(androidx.media2.MediaMetadata2!);
    method public static int convertToPlaybackStateCompatState(int, int);
    method public static int convertToPlayerState(android.support.v4.media.session.PlaybackStateCompat!);
    method public static java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! convertToQueueItemList(java.util.List<androidx.media2.MediaItem2>!);
    method public static androidx.media2.Rating2! convertToRating2(android.support.v4.media.RatingCompat!);
    method public static android.support.v4.media.RatingCompat! convertToRatingCompat(androidx.media2.Rating2!);
    method public static android.os.Bundle! convertToRootHints(androidx.media2.MediaLibraryService2.LibraryParams!);
    method public static android.support.v4.media.MediaDescriptionCompat! createMediaDescriptionCompat(String!);
    method public static <T extends androidx.versionedparcelable.VersionedParcelable> T! fromParcelable(androidx.versionedparcelable.ParcelImpl!);
    method private static int getRatingCompatStyle(androidx.media2.Rating2!);
    method public static boolean isUnparcelableBundle(android.os.Bundle!);
    method public static void keepUnparcelableBundlesOnly(java.util.List<android.os.Bundle>!);
    method public static <T> java.util.List<T>! removeNullElements(java.util.List<T>?);
    method public static int toBufferingState(int);
    method public static androidx.versionedparcelable.ParcelImpl! toParcelable(androidx.versionedparcelable.VersionedParcelable!);
    method public static androidx.media2.MediaController2.PlaybackInfo! toPlaybackInfo2(android.support.v4.media.session.MediaControllerCompat.PlaybackInfo!);
    method public static <T extends android.os.Parcelable> java.util.List<T>! truncateListBySize(java.util.List<T>!, int);
    field public static final java.util.concurrent.Executor! DIRECT_EXECUTOR;
    field public static final String TAG = "MediaUtils2";
    field public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 262144; // 0x40000
    field public static final androidx.media.MediaBrowserServiceCompat.BrowserRoot! sDefaultBrowserRoot;
  }

  private static class MediaUtils2.MediaItemParcelImpl extends androidx.versionedparcelable.ParcelImpl {
    ctor MediaUtils2.MediaItemParcelImpl(androidx.media2.MediaItem2!);
    field private final androidx.media2.MediaItem2! mItem;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ParcelImplListSlice implements android.os.Parcelable {
    ctor public ParcelImplListSlice(java.util.List<androidx.versionedparcelable.ParcelImpl>);
    ctor ParcelImplListSlice(android.os.Parcel!);
    method public java.util.List<androidx.versionedparcelable.ParcelImpl> getList();
    field public static final android.os.Parcelable.Creator<androidx.media2.ParcelImplListSlice>! CREATOR;
    field private static final boolean DEBUG = false;
    field private static final int MAX_IPC_SIZE = 65536; // 0x10000
    field private static final String TAG = "ParcelImplListSlice";
    field final java.util.List<androidx.versionedparcelable.ParcelImpl>! mList;
  }

  public final class PercentageRating2 implements androidx.media2.Rating2 {
    field private static final float RATING_NOT_RATED = -1.0f;
    field float mPercent;
  }

  public final class PlaybackParams2 {
    ctor PlaybackParams2(Integer!, Float!, Float!);
    ctor @RequiresApi(android.os.Build.VERSION_CODES.M) PlaybackParams2(android.media.PlaybackParams!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(android.os.Build.VERSION_CODES.M) public android.media.PlaybackParams! getPlaybackParams();
    field private Integer! mAudioFallbackMode;
    field private Float! mPitch;
    field private android.media.PlaybackParams! mPlaybackParams;
    field private Float! mSpeed;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.PlaybackParams2.AUDIO_FALLBACK_MODE_DEFAULT, androidx.media2.PlaybackParams2.AUDIO_FALLBACK_MODE_MUTE, androidx.media2.PlaybackParams2.AUDIO_FALLBACK_MODE_FAIL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackParams2.AudioFallbackMode {
  }

  public static final class PlaybackParams2.Builder {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(android.os.Build.VERSION_CODES.M) public PlaybackParams2.Builder(android.media.PlaybackParams!);
    field private Integer! mAudioFallbackMode;
    field private Float! mPitch;
    field private android.media.PlaybackParams! mPlaybackParams;
    field private Float! mSpeed;
  }

  interface RemoteResult2 extends androidx.media2.BaseResult2 {
    field public static final int RESULT_CODE_AUTHENTICATION_EXPIRED = -102; // 0xffffff9a
    field public static final int RESULT_CODE_CONCURRENT_STREAM_LIMIT = -104; // 0xffffff98
    field public static final int RESULT_CODE_DISCONNECTED = -100; // 0xffffff9c
    field public static final int RESULT_CODE_NOT_AVAILABLE_IN_REGION = -106; // 0xffffff96
    field public static final int RESULT_CODE_PARENTAL_CONTROL_RESTRICTED = -105; // 0xffffff97
    field public static final int RESULT_CODE_PREMIUM_ACCOUNT_REQUIRED = -103; // 0xffffff99
    field public static final int RESULT_CODE_SETUP_REQUIRED = -108; // 0xffffff94
    field public static final int RESULT_CODE_SKIP_LIMIT_REACHED = -107; // 0xffffff95
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class RemoteSessionPlayer2 extends androidx.media2.SessionPlayer2 {
    ctor public RemoteSessionPlayer2();
    method public abstract java.util.concurrent.Future<androidx.media2.SessionPlayer2.PlayerResult>! adjustVolume(int);
    method public abstract int getMaxVolume();
    method public abstract int getVolume();
    method public abstract int getVolumeControlType();
    method public abstract java.util.concurrent.Future<androidx.media2.SessionPlayer2.PlayerResult>! setVolume(int);
    field public static final int VOLUME_CONTROL_ABSOLUTE = 2; // 0x2
    field public static final int VOLUME_CONTROL_FIXED = 0; // 0x0
    field public static final int VOLUME_CONTROL_RELATIVE = 1; // 0x1
  }

  public static class RemoteSessionPlayer2.Callback extends androidx.media2.SessionPlayer2.PlayerCallback {
    ctor public RemoteSessionPlayer2.Callback();
    method public void onVolumeChanged(androidx.media2.RemoteSessionPlayer2, int);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.RemoteSessionPlayer2.VOLUME_CONTROL_FIXED, androidx.media2.RemoteSessionPlayer2.VOLUME_CONTROL_RELATIVE, androidx.media2.RemoteSessionPlayer2.VOLUME_CONTROL_ABSOLUTE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface RemoteSessionPlayer2.VolumeControlType {
  }

  class SequencedFutureManager implements java.lang.AutoCloseable {
    ctor SequencedFutureManager();
    method public <T> androidx.media2.SequencedFutureManager.SequencedFuture<T>! createSequencedFuture(T!);
    method public int obtainNextSequenceNumber();
    method public <T> void setFutureResult(int, T!);
    field private static final boolean DEBUG = false;
    field private static final String TAG = "SequencedFutureManager";
    field private final Object! mLock;
    field @GuardedBy("mLock") private int mNextSequenceNumber;
    field @GuardedBy("mLock") private androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SequencedFutureManager.SequencedFuture>! mSeqToFutureMap;
  }

  static final class SequencedFutureManager.SequencedFuture<T> extends androidx.concurrent.futures.AbstractResolvableFuture<T> {
    ctor private SequencedFutureManager.SequencedFuture(int, T);
    method static <T> androidx.media2.SequencedFutureManager.SequencedFuture<T>! create(int, T);
    method public T getResultWhenClosed();
    method public int getSequenceNumber();
    field private final T! mResultWhenClosed;
    field private final int mSequenceNumber;
  }

  public final class SessionCommand2 implements androidx.versionedparcelable.VersionedParcelable {
    ctor SessionCommand2();
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PLAY_FROM_MEDIA_ID = 40004; // 0x9c44
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PLAY_FROM_SEARCH = 40005; // 0x9c45
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PLAY_FROM_URI = 40006; // 0x9c46
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PREPARE_FROM_MEDIA_ID = 40007; // 0x9c47
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PREPARE_FROM_SEARCH = 40008; // 0x9c48
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_PREPARE_FROM_URI = 40009; // 0x9c49
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_SELECT_ROUTE = 40013; // 0x9c4d
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_SUBSCRIBE_ROUTES_INFO = 40011; // 0x9c4b
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int COMMAND_CODE_SESSION_UNSUBSCRIBE_ROUTES_INFO = 40012; // 0x9c4c
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final int COMMAND_VERSION_CURRENT = 1; // 0x1
    field static final androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>! VERSION_LIBRARY_COMMANDS_MAP;
    field static final androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>! VERSION_PLAYER_COMMANDS_MAP;
    field static final androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>! VERSION_PLAYER_PLAYLIST_COMMANDS_MAP;
    field static final androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>! VERSION_SESSION_COMMANDS_MAP;
    field static final androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>! VERSION_VOLUME_COMMANDS_MAP;
    field int mCommandCode;
    field String! mCustomCommand;
    field android.os.Bundle! mExtras;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionCommand2.COMMAND_CODE_CUSTOM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_PLAY, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_PAUSE, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_PREPARE, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SEEK_TO, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SET_SPEED, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_GET_PLAYLIST, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SET_PLAYLIST, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SKIP_TO_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SKIP_TO_PREVIOUS_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SKIP_TO_NEXT_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SET_SHUFFLE_MODE, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SET_REPEAT_MODE, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_ADD_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_REMOVE_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_REPLACE_PLAYLIST_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_GET_CURRENT_MEDIA_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_UPDATE_LIST_METADATA, androidx.media2.SessionCommand2.COMMAND_CODE_PLAYER_SET_MEDIA_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_VOLUME_SET_VOLUME, androidx.media2.SessionCommand2.COMMAND_CODE_VOLUME_ADJUST_VOLUME, androidx.media2.SessionCommand2.COMMAND_CODE_SESSION_FAST_FORWARD, androidx.media2.SessionCommand2.COMMAND_CODE_SESSION_REWIND, androidx.media2.SessionCommand2.COMMAND_CODE_SESSION_SKIP_FORWARD, androidx.media2.SessionCommand2.COMMAND_CODE_SESSION_SKIP_BACKWARD, 0x9c44, 0x9c45, 0x9c46, 0x9c47, 0x9c48, 0x9c49, androidx.media2.SessionCommand2.COMMAND_CODE_SESSION_SET_RATING, 0x9c4b, 0x9c4c, 0x9c4d, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_GET_LIBRARY_ROOT, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_SUBSCRIBE, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_UNSUBSCRIBE, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_GET_CHILDREN, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_GET_ITEM, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_SEARCH, androidx.media2.SessionCommand2.COMMAND_CODE_LIBRARY_GET_SEARCH_RESULT}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionCommand2.CommandCode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionCommand2.COMMAND_VERSION_1}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionCommand2.CommandVersion {
  }

  static final class SessionCommand2.Range {
    ctor SessionCommand2.Range(int, int);
    field public final int lower;
    field public final int upper;
  }

  public final class SessionCommandGroup2 implements androidx.versionedparcelable.VersionedParcelable {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addCommand(androidx.media2.SessionCommand2);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addCommand(int);
    field private static final String TAG = "SessionCommandGroup2";
    field java.util.Set<androidx.media2.SessionCommand2>! mCommands;
  }

  public static final class SessionCommandGroup2.Builder {
    method androidx.media2.SessionCommandGroup2.Builder addAllLibraryCommands(int);
    method androidx.media2.SessionCommandGroup2.Builder addAllPlayerCommands(int);
    method androidx.media2.SessionCommandGroup2.Builder addAllPlayerCommands(int, boolean);
    method androidx.media2.SessionCommandGroup2.Builder addAllSessionCommands(int);
    method androidx.media2.SessionCommandGroup2.Builder addAllVolumeCommands(int);
    method private void addCommands(int, androidx.collection.ArrayMap<java.lang.Integer,androidx.media2.SessionCommand2.Range>!);
    field private java.util.Set<androidx.media2.SessionCommand2>! mCommands;
  }

  public abstract class SessionPlayer2 implements java.lang.AutoCloseable {
    field private static final String TAG = "SessionPlayer2";
    field @GuardedBy("mLock") private final java.util.List<androidx.core.util.Pair<androidx.media2.SessionPlayer2.PlayerCallback,java.util.concurrent.Executor>>! mCallbacks;
    field private final Object! mLock;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionPlayer2.BUFFERING_STATE_UNKNOWN, androidx.media2.SessionPlayer2.BUFFERING_STATE_BUFFERING_AND_PLAYABLE, androidx.media2.SessionPlayer2.BUFFERING_STATE_BUFFERING_AND_STARVED, androidx.media2.SessionPlayer2.BUFFERING_STATE_COMPLETE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer2.BuffState {
  }

  public static class SessionPlayer2.PlayerResult implements androidx.media2.BaseResult2 {
    ctor private SessionPlayer2.PlayerResult(int, androidx.media2.MediaItem2?, long);
    method static com.google.common.util.concurrent.ListenableFuture<androidx.media2.SessionPlayer2.PlayerResult>! createFuture(int);
    field private final long mCompletionTime;
    field private final androidx.media2.MediaItem2! mItem;
    field private final int mResultCode;
  }

  @IntDef(flag=false, value={androidx.media2.BaseResult2.RESULT_CODE_SUCCESS, androidx.media2.BaseResult2.RESULT_CODE_UNKNOWN_ERROR, androidx.media2.BaseResult2.RESULT_CODE_INVALID_STATE, androidx.media2.BaseResult2.RESULT_CODE_BAD_VALUE, androidx.media2.BaseResult2.RESULT_CODE_PERMISSION_DENIED, androidx.media2.BaseResult2.RESULT_CODE_IO_ERROR, androidx.media2.BaseResult2.RESULT_CODE_SKIPPED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface SessionPlayer2.PlayerResult.ResultCode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionPlayer2.PLAYER_STATE_IDLE, androidx.media2.SessionPlayer2.PLAYER_STATE_PAUSED, androidx.media2.SessionPlayer2.PLAYER_STATE_PLAYING, androidx.media2.SessionPlayer2.PLAYER_STATE_ERROR}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer2.PlayerState {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionPlayer2.REPEAT_MODE_NONE, androidx.media2.SessionPlayer2.REPEAT_MODE_ONE, androidx.media2.SessionPlayer2.REPEAT_MODE_ALL, androidx.media2.SessionPlayer2.REPEAT_MODE_GROUP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer2.RepeatMode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media2.SessionPlayer2.SHUFFLE_MODE_NONE, androidx.media2.SessionPlayer2.SHUFFLE_MODE_ALL, androidx.media2.SessionPlayer2.SHUFFLE_MODE_GROUP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SessionPlayer2.ShuffleMode {
  }

  public final class SessionToken2 implements androidx.versionedparcelable.VersionedParcelable {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) SessionToken2(androidx.media2.SessionToken2.SessionToken2Impl!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) SessionToken2();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void createSessionToken2(android.content.Context, android.support.v4.media.session.MediaSessionCompat.Token, java.util.concurrent.Executor, androidx.media2.SessionToken2.OnSessionToken2CreatedListener);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public Object! getBinder();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.content.ComponentName! getComponentName();
    method private static int getUid(android.content.pm.PackageManager!, String!);
    method private static boolean isInterfaceDeclared(android.content.pm.PackageManager!, String!, android.content.ComponentName!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean isLegacySession();
    method static void notifySessionToken2Created(java.util.concurrent.Executor!, androidx.media2.SessionToken2.OnSessionToken2CreatedListener!, android.support.v4.media.session.MediaSessionCompat.Token!, androidx.media2.SessionToken2!);
    field private static final int MSG_SEND_TOKEN2_FOR_LEGACY_SESSION = 1000; // 0x3e8
    field private static final String TAG = "SessionToken2";
    field static final int TYPE_BROWSER_SERVICE_LEGACY = 101; // 0x65
    field static final int TYPE_SESSION_LEGACY = 100; // 0x64
    field private static final long WAIT_TIME_MS_FOR_SESSION_READY = 300L; // 0x12cL
    field androidx.media2.SessionToken2.SessionToken2Impl! mImpl;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface SessionToken2.OnSessionToken2CreatedListener {
    method public void onSessionToken2Created(android.support.v4.media.session.MediaSessionCompat.Token!, androidx.media2.SessionToken2!);
  }

  static interface SessionToken2.SessionToken2Impl extends androidx.versionedparcelable.VersionedParcelable {
    method public Object! getBinder();
    method public android.content.ComponentName? getComponentName();
    method public String getPackageName();
    method public String? getServiceName();
    method public int getType();
    method public int getUid();
    method public boolean isLegacySession();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.media2.SessionToken2.TYPE_SESSION, androidx.media2.SessionToken2.TYPE_SESSION_SERVICE, androidx.media2.SessionToken2.TYPE_LIBRARY_SERVICE}) public static @interface SessionToken2.TokenType {
  }

  final class SessionToken2ImplBase implements androidx.media2.SessionToken2.SessionToken2Impl {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) SessionToken2ImplBase(android.content.ComponentName, int, int);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) SessionToken2ImplBase(int, int, String!, IMediaSession2!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) SessionToken2ImplBase();
    method public Object! getBinder();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.content.ComponentName! getComponentName();
    method public String getPackageName();
    method public String? getServiceName();
    method public int getType();
    method public int getUid();
    method public boolean isLegacySession();
    field android.content.ComponentName! mComponentName;
    field android.os.IBinder! mISession2;
    field String! mPackageName;
    field String! mServiceName;
    field int mType;
    field int mUid;
  }

  final class SessionToken2ImplLegacy extends androidx.versionedparcelable.CustomVersionedParcelable implements androidx.media2.SessionToken2.SessionToken2Impl {
    ctor SessionToken2ImplLegacy(android.support.v4.media.session.MediaSessionCompat.Token!, String!, int);
    ctor SessionToken2ImplLegacy(android.content.ComponentName!, int);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) SessionToken2ImplLegacy();
    method public Object! getBinder();
    method public android.content.ComponentName! getComponentName();
    method public String getPackageName();
    method public String? getServiceName();
    method public int getType();
    method public int getUid();
    method public boolean isLegacySession();
    field android.content.ComponentName! mComponentName;
    field private android.support.v4.media.session.MediaSessionCompat.Token! mLegacyToken;
    field android.os.Bundle! mLegacyTokenBundle;
    field String! mPackageName;
    field int mType;
    field int mUid;
  }

  public final class StarRating2 implements androidx.media2.Rating2 {
    ctor StarRating2();
    field private static final float RATING_NOT_RATED = -1.0f;
    field int mMaxStars;
    field float mStarRating;
  }

  public final class SubtitleData2 {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SubtitleData2(android.media.SubtitleData!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SubtitleData2(int, long, long, byte[]!);
    field private static final String TAG = "SubtitleData2";
    field private byte[]! mData;
    field private long mDurationUs;
    field private long mStartTimeUs;
    field private int mTrackIndex;
  }

  public final class ThumbRating2 implements androidx.media2.Rating2 {
    field boolean mIsRated;
    field boolean mThumbUp;
  }

  public class TimedMetaData2 {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public TimedMetaData2(android.media.TimedMetaData!);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public TimedMetaData2(long, byte[]!);
    field private static final String TAG = "TimedMetaData";
    field private byte[]! mMetaData;
    field private long mTimestampUs;
  }

  public class UriMediaItem2 extends androidx.media2.MediaItem2 {
    ctor UriMediaItem2();
    ctor UriMediaItem2(androidx.media2.UriMediaItem2.Builder!);
    field android.net.Uri! mUri;
    field android.content.Context! mUriContext;
    field java.util.List<java.net.HttpCookie>! mUriCookies;
    field java.util.Map<java.lang.String,java.lang.String>! mUriHeader;
  }

  public static final class UriMediaItem2.Builder extends androidx.media2.MediaItem2.BuilderBase<androidx.media2.UriMediaItem2.Builder> {
    field android.net.Uri! mUri;
    field android.content.Context! mUriContext;
    field java.util.List<java.net.HttpCookie>! mUriCookies;
    field java.util.Map<java.lang.String,java.lang.String>! mUriHeader;
  }

}

package androidx.media2.common {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class TrackInfoImpl extends androidx.media2.MediaPlayer2.TrackInfo {
    ctor public TrackInfoImpl(int, android.media.MediaFormat!);
    method public android.media.MediaFormat! getFormat();
    method public String! getLanguage();
    method public int getTrackType();
    field private final android.media.MediaFormat! mFormat;
    field private final int mTrackType;
  }

}

package androidx.media2.exoplayer {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DataSourceCallback2DataSource extends androidx.media2.exoplayer.external.upstream.BaseDataSource {
    ctor public DataSourceCallback2DataSource(androidx.media2.DataSourceCallback2!);
    method static androidx.media2.exoplayer.external.upstream.DataSource.Factory! getFactory(androidx.media2.DataSourceCallback2!);
    field private long mBytesRemaining;
    field private final androidx.media2.DataSourceCallback2! mDataSourceCallback2;
    field private long mOffset;
    field private boolean mOpened;
    field private android.net.Uri? mUri;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class DurationProvidingMediaSource extends androidx.media2.exoplayer.external.source.CompositeMediaSource<java.lang.Void> {
    ctor DurationProvidingMediaSource(androidx.media2.exoplayer.external.source.MediaSource!);
    method public long getDurationMs();
    field private androidx.media2.exoplayer.external.Timeline! mCurrentTimeline;
    field private final androidx.media2.exoplayer.external.source.MediaSource! mMediaSource;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class ExoPlayerMediaPlayer2Impl extends androidx.media2.MediaPlayer2 implements androidx.media2.exoplayer.ExoPlayerWrapper.Listener {
    ctor public ExoPlayerMediaPlayer2Impl(android.content.Context);
    method private Object! addTask(androidx.media2.exoplayer.ExoPlayerMediaPlayer2Impl.Task!);
    method public Object! attachAuxEffect(int);
    method public boolean cancel(Object!);
    method public void clearDrmEventCallback();
    method public void clearEventCallback();
    method public void clearPendingCommands();
    method public void close();
    method public Object! deselectTrack(int);
    method public androidx.media.AudioAttributesCompat! getAudioAttributes();
    method public int getAudioSessionId();
    method public long getBufferedPosition();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public long getCurrentPosition();
    method public androidx.media2.MediaPlayer2.DrmInfo! getDrmInfo();
    method public android.media.MediaDrm.KeyRequest getDrmKeyRequest(byte[]!, byte[]!, String!, int, java.util.Map<java.lang.String,java.lang.String>!);
    method public String getDrmPropertyString(String);
    method public long getDuration();
    method public android.os.PersistableBundle! getMetrics();
    method public androidx.media2.PlaybackParams2 getPlaybackParams();
    method public float getPlayerVolume();
    method public int getSelectedTrack(int);
    method public int getState();
    method public androidx.media2.MediaTimestamp2! getTimestamp();
    method public java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! getTrackInfo();
    method public int getVideoHeight();
    method public int getVideoWidth();
    method public Object! loopCurrent(boolean);
    method void notifyMediaPlayer2Event(androidx.media2.exoplayer.ExoPlayerMediaPlayer2Impl.Mp2EventNotifier!);
    method private void notifyOnInfo(androidx.media2.MediaItem2!, int);
    method private void notifyOnInfo(androidx.media2.MediaItem2!, int, int);
    method public Object! notifyWhenCommandLabelReached(Object);
    method public void onBufferingEnded(androidx.media2.MediaItem2!);
    method public void onBufferingStarted(androidx.media2.MediaItem2!);
    method public void onError(androidx.media2.MediaItem2!, int);
    method public void onLoop(androidx.media2.MediaItem2!);
    method public void onMediaItem2Ended(androidx.media2.MediaItem2!);
    method public void onMediaItem2StartedAsNext(androidx.media2.MediaItem2!);
    method public void onMediaTimeDiscontinuity(androidx.media2.MediaItem2!, androidx.media2.MediaTimestamp2!);
    method public void onMetadataChanged(androidx.media2.MediaItem2!);
    method public void onPlaybackEnded(androidx.media2.MediaItem2!);
    method public void onPrepared(androidx.media2.MediaItem2!);
    method public void onSeekCompleted(long);
    method public void onSubtitleData2(androidx.media2.MediaItem2!, androidx.media2.SubtitleData2!);
    method public void onVideoRenderingStart(androidx.media2.MediaItem2!);
    method public void onVideoSizeChanged(androidx.media2.MediaItem2!, int, int);
    method public Object! pause();
    method public Object! play();
    method public Object! prepare();
    method public Object! prepareDrm(java.util.UUID);
    method @GuardedBy("mTaskLock") void processPendingTask();
    method public byte[]! provideDrmKeyResponse(byte[]?, byte[]);
    method public void releaseDrm();
    method public void reset();
    method private void resetPlayer();
    method public void restoreDrmKeys(byte[]);
    method private <T> T! runPlayerCallableBlocking(java.util.concurrent.Callable<T>!);
    method public Object! seekTo(long, int);
    method public Object! selectTrack(int);
    method public Object! setAudioAttributes(androidx.media.AudioAttributesCompat);
    method public Object! setAudioSessionId(int);
    method public Object! setAuxEffectSendLevel(float);
    method public void setDrmEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.DrmEventCallback);
    method public void setDrmPropertyString(String, String);
    method public void setEventCallback(java.util.concurrent.Executor, androidx.media2.MediaPlayer2.EventCallback);
    method public Object! setMediaItem(androidx.media2.MediaItem2);
    method public Object! setNextMediaItem(androidx.media2.MediaItem2);
    method public Object! setNextMediaItems(java.util.List<androidx.media2.MediaItem2>);
    method public void setOnDrmConfigHelper(androidx.media2.MediaPlayer2.OnDrmConfigHelper!);
    method public Object! setPlaybackParams(androidx.media2.PlaybackParams2);
    method public Object! setPlayerVolume(float);
    method public Object! setSurface(android.view.Surface!);
    method public Object! skipToNext();
    field private static final String TAG = "ExoPlayerMediaPlayer2";
    field @GuardedBy("mTaskLock") androidx.media2.exoplayer.ExoPlayerMediaPlayer2Impl.Task! mCurrentTask;
    field @GuardedBy("mLock") private android.util.Pair<java.util.concurrent.Executor,androidx.media2.MediaPlayer2.DrmEventCallback>! mExecutorAndDrmEventCallback;
    field @GuardedBy("mLock") private android.util.Pair<java.util.concurrent.Executor,androidx.media2.MediaPlayer2.EventCallback>! mExecutorAndEventCallback;
    field @GuardedBy("mLock") private android.os.HandlerThread! mHandlerThread;
    field final Object! mLock;
    field @GuardedBy("mTaskLock") final java.util.ArrayDeque<androidx.media2.exoplayer.ExoPlayerMediaPlayer2Impl.Task>! mPendingTasks;
    field final androidx.media2.exoplayer.ExoPlayerWrapper! mPlayer;
    field private final android.os.Handler! mTaskHandler;
    field final Object! mTaskLock;
  }

  private static interface ExoPlayerMediaPlayer2Impl.Mp2EventNotifier {
    method public void notify(androidx.media2.MediaPlayer2.EventCallback!);
  }

  private abstract class ExoPlayerMediaPlayer2Impl.Task implements java.lang.Runnable {
    ctor ExoPlayerMediaPlayer2Impl.Task(int, boolean);
    method abstract void process() throws java.io.IOException, androidx.media2.MediaPlayer2.NoDrmSchemeException;
    method void sendCompleteNotification(int);
    field androidx.media2.MediaItem2! mDSD;
    field @GuardedBy("this") boolean mDone;
    field final int mMediaCallType;
    field final boolean mNeedToWaitForEventToComplete;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class ExoPlayerUtils {
    ctor private ExoPlayerUtils();
    method public static androidx.media2.exoplayer.external.source.MediaSource! createUnclippedMediaSource(androidx.media2.exoplayer.external.upstream.DataSource.Factory!, androidx.media2.MediaItem2!);
    method public static androidx.media2.exoplayer.external.audio.AudioAttributes! getAudioAttributes(androidx.media.AudioAttributesCompat!);
    method public static androidx.media.AudioAttributesCompat! getAudioAttributesCompat(androidx.media2.exoplayer.external.audio.AudioAttributes!);
    method public static int getError(androidx.media2.exoplayer.external.ExoPlaybackException!);
    method public static int getExoPlayerTrackType(int);
    method public static android.media.MediaFormat! getMediaFormat(androidx.media2.exoplayer.external.Format!);
    method public static androidx.media2.exoplayer.external.PlaybackParameters! getPlaybackParameters(androidx.media2.PlaybackParams2!);
    method public static androidx.media2.exoplayer.external.SeekParameters! getSeekParameters(int);
    method public static int getTrackType(int);
    field private static final androidx.media2.exoplayer.external.extractor.ExtractorsFactory! sExtractorsFactory;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) final class ExoPlayerWrapper {
    ctor ExoPlayerWrapper(android.content.Context!, androidx.media2.exoplayer.ExoPlayerWrapper.Listener!, android.os.Looper!);
    method public void attachAuxEffect(int);
    method public void close();
    method public void deselectTrack(int);
    method public androidx.media.AudioAttributesCompat! getAudioAttributes();
    method public int getAudioSessionId();
    method public long getBufferedPosition();
    method public androidx.media2.MediaItem2! getCurrentMediaItem();
    method public long getCurrentPosition();
    method public long getDuration();
    method public android.os.Looper! getLooper();
    method public android.os.PersistableBundle! getMetricsV21();
    method public androidx.media2.PlaybackParams2! getPlaybackParams();
    method public int getSelectedTrack(int);
    method public int getState();
    method public androidx.media2.MediaTimestamp2! getTimestamp();
    method public java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! getTrackInfo();
    method public int getVideoHeight();
    method public int getVideoWidth();
    method public float getVolume();
    method void handleAudioSessionId(int);
    method void handlePlayerError(androidx.media2.exoplayer.external.ExoPlaybackException!);
    method void handlePlayerStateChanged(boolean, int);
    method void handlePlayerTracksChanged();
    method void handlePositionDiscontinuity(@androidx.media2.exoplayer.external.Player.DiscontinuityReason int);
    method void handleRenderedFirstFrame();
    method void handleSeekProcessed();
    method void handleSubtitleData2(byte[]!, long);
    method void handleTextRendererChannelAvailable(int, int);
    method void handleVideoSizeChanged(int, int);
    method public boolean hasError();
    method public void loopCurrent(boolean);
    method private void maybeNotifyBufferingEvents();
    method private void maybeNotifyReadyEvents();
    method private void maybeUpdateTimerForPlaying();
    method private void maybeUpdateTimerForStopped();
    method public void pause();
    method public void play();
    method public void prepare();
    method public void reset();
    method public void seekTo(long, int);
    method public void selectTrack(int);
    method public void setAudioAttributes(androidx.media.AudioAttributesCompat!);
    method public void setAudioSessionId(int);
    method public void setAuxEffectSendLevel(float);
    method public void setMediaItem(androidx.media2.MediaItem2!);
    method public void setNextMediaItem(androidx.media2.MediaItem2!);
    method public void setNextMediaItems(java.util.List<androidx.media2.MediaItem2>!);
    method public void setPlaybackParams(androidx.media2.PlaybackParams2!);
    method public void setSurface(android.view.Surface!);
    method public void setVolume(float);
    method public void skipToNext();
    field private static final String TAG = "ExoPlayerWrapper";
    field private static final String USER_AGENT_NAME = "MediaPlayer2";
    field private int mAudioSessionId;
    field private androidx.media2.exoplayer.external.audio.DefaultAudioSink! mAudioSink;
    field private int mAuxEffectId;
    field private float mAuxEffectSendLevel;
    field private final android.content.Context! mContext;
    field private boolean mHasAudioAttributes;
    field private final androidx.media2.exoplayer.ExoPlayerWrapper.Listener! mListener;
    field private final android.os.Looper! mLooper;
    field private androidx.media2.exoplayer.ExoPlayerWrapper.MediaItemQueue! mMediaItemQueue;
    field private boolean mNewlyPrepared;
    field private boolean mPendingSeek;
    field private androidx.media2.PlaybackParams2! mPlaybackParams2;
    field private androidx.media2.exoplayer.external.SimpleExoPlayer! mPlayer;
    field private boolean mPrepared;
    field private boolean mRebuffering;
    field private androidx.media2.exoplayer.TrackSelector! mTrackSelector;
    field private int mVideoHeight;
    field private int mVideoWidth;
  }

  final class ExoPlayerWrapper.ComponentListener extends androidx.media2.exoplayer.external.Player.DefaultEventListener implements androidx.media2.exoplayer.external.audio.AudioListener androidx.media2.exoplayer.TextRenderer.Output androidx.media2.exoplayer.external.video.VideoListener {
    ctor ExoPlayerWrapper.ComponentListener();
    method public void onCcData(byte[]!, long);
    method public void onChannelAvailable(int, int);
  }

  private static final class ExoPlayerWrapper.FileDescriptorRegistry {
    ctor ExoPlayerWrapper.FileDescriptorRegistry();
    method public Object! registerMediaItemAndGetLock(java.io.FileDescriptor!);
    method public void unregisterMediaItem(java.io.FileDescriptor!);
    field private final java.util.Map<java.io.FileDescriptor,androidx.media2.exoplayer.ExoPlayerWrapper.FileDescriptorRegistry.Entry>! mEntries;
  }

  private static final class ExoPlayerWrapper.FileDescriptorRegistry.Entry {
    ctor ExoPlayerWrapper.FileDescriptorRegistry.Entry();
    field public final Object! mLock;
    field public int mMediaItemCount;
  }

  public static interface ExoPlayerWrapper.Listener {
    method public void onBufferingEnded(androidx.media2.MediaItem2!);
    method public void onBufferingStarted(androidx.media2.MediaItem2!);
    method public void onError(androidx.media2.MediaItem2!, int);
    method public void onLoop(androidx.media2.MediaItem2!);
    method public void onMediaItem2Ended(androidx.media2.MediaItem2!);
    method public void onMediaItem2StartedAsNext(androidx.media2.MediaItem2!);
    method public void onMediaTimeDiscontinuity(androidx.media2.MediaItem2!, androidx.media2.MediaTimestamp2!);
    method public void onMetadataChanged(androidx.media2.MediaItem2!);
    method public void onPlaybackEnded(androidx.media2.MediaItem2!);
    method public void onPrepared(androidx.media2.MediaItem2!);
    method public void onSeekCompleted(long);
    method public void onSubtitleData2(androidx.media2.MediaItem2!, androidx.media2.SubtitleData2!);
    method public void onVideoRenderingStart(androidx.media2.MediaItem2!);
    method public void onVideoSizeChanged(androidx.media2.MediaItem2!, int, int);
  }

  private static final class ExoPlayerWrapper.MediaItemInfo {
    ctor ExoPlayerWrapper.MediaItemInfo(androidx.media2.MediaItem2!, androidx.media2.exoplayer.DurationProvidingMediaSource?, java.io.FileDescriptor?);
    field final androidx.media2.exoplayer.DurationProvidingMediaSource? mDurationProvidingMediaSource;
    field final java.io.FileDescriptor? mFileDescriptor;
    field final androidx.media2.MediaItem2! mMediaItem;
  }

  private static final class ExoPlayerWrapper.MediaItemQueue {
    ctor ExoPlayerWrapper.MediaItemQueue(android.content.Context!, androidx.media2.exoplayer.external.SimpleExoPlayer!, androidx.media2.exoplayer.ExoPlayerWrapper.Listener!);
    method private void appendMediaItem(androidx.media2.MediaItem2!, java.util.Collection<androidx.media2.exoplayer.ExoPlayerWrapper.MediaItemInfo>!, java.util.Collection<androidx.media2.exoplayer.external.source.MediaSource>!) throws java.io.IOException;
    method public void clear();
    method public androidx.media2.MediaItem2? getCurrentMediaItem();
    method public long getCurrentMediaItemDuration();
    method public long getCurrentMediaItemPlayingTimeMs();
    method public boolean isEmpty();
    method public void onPlayerEnded();
    method public void onPlaying();
    method public void onPositionDiscontinuity(boolean);
    method public void onStopped();
    method public void preparePlayer();
    method private void releaseMediaItem(androidx.media2.exoplayer.ExoPlayerWrapper.MediaItemInfo!);
    method public void setMediaItem2(androidx.media2.MediaItem2!);
    method public void setNextMediaItem2s(java.util.List<androidx.media2.MediaItem2>!);
    method public void skipToNext();
    field private final androidx.media2.exoplayer.external.source.ConcatenatingMediaSource! mConcatenatingMediaSource;
    field private long mCurrentMediaItemPlayingTimeUs;
    field private final androidx.media2.exoplayer.external.upstream.DataSource.Factory! mDataSourceFactory;
    field private final androidx.media2.exoplayer.ExoPlayerWrapper.FileDescriptorRegistry! mFileDescriptorRegistry;
    field private final androidx.media2.exoplayer.ExoPlayerWrapper.Listener! mListener;
    field private final java.util.ArrayDeque<androidx.media2.exoplayer.ExoPlayerWrapper.MediaItemInfo>! mMediaItemInfos;
    field private final androidx.media2.exoplayer.external.SimpleExoPlayer! mPlayer;
    field private long mStartPlayingTimeNs;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class FileDescriptorDataSource extends androidx.media2.exoplayer.external.upstream.BaseDataSource {
    ctor FileDescriptorDataSource(java.io.FileDescriptor!, long, long, Object!);
    method static androidx.media2.exoplayer.external.upstream.DataSource.Factory! getFactory(java.io.FileDescriptor!, long, long, Object!);
    field private long mBytesRemaining;
    field private final java.io.FileDescriptor! mFileDescriptor;
    field private java.io.InputStream? mInputStream;
    field private final long mLength;
    field private final Object! mLock;
    field private final long mOffset;
    field private boolean mOpened;
    field private long mPosition;
    field private android.net.Uri? mUri;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) final class FileDescriptorUtil {
    ctor private FileDescriptorUtil();
    method public static void close(java.io.FileDescriptor!) throws java.io.IOException;
    method private static java.io.FileDescriptor! closeV14(java.io.FileDescriptor!) throws java.io.IOException;
    method private static void closeV21(java.io.FileDescriptor!) throws java.io.IOException;
    method public static java.io.FileDescriptor! dup(java.io.FileDescriptor!) throws java.io.IOException;
    method private static java.io.FileDescriptor! dupV14(java.io.FileDescriptor!) throws java.io.IOException;
    method private static java.io.FileDescriptor! dupV21(java.io.FileDescriptor!) throws java.io.IOException;
    method private static void ensurePosixObjectsInitialized() throws java.lang.Exception;
    method public static void seek(java.io.FileDescriptor!, long) throws java.io.IOException;
    method private static void seekV14(java.io.FileDescriptor!, long) throws java.io.IOException;
    method private static void seekV21(java.io.FileDescriptor!, long) throws java.io.IOException;
    field private static final int SEEK_SET = 0; // 0x0
    field @GuardedBy("sPosixLockV14") private static java.lang.reflect.Method? sCloseMethodV14;
    field @GuardedBy("sPosixLockV14") private static java.lang.reflect.Method? sDupMethodV14;
    field @GuardedBy("sPosixLockV14") private static java.lang.reflect.Method? sLseekMethodV14;
    field private static final Object! sPosixLockV14;
    field @GuardedBy("sPosixLockV14") private static Object? sPosixObjectV14;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) final class RenderersFactory extends androidx.media2.exoplayer.external.DefaultRenderersFactory {
    ctor RenderersFactory(android.content.Context!, androidx.media2.exoplayer.external.audio.AudioSink!, androidx.media2.exoplayer.TextRenderer!);
    field public static final int AUDIO_RENDERER_INDEX = 1; // 0x1
    field public static final int TEXT_RENDERER_INDEX = 2; // 0x2
    field public static final int VIDEO_RENDERER_INDEX = 0; // 0x0
    field private final androidx.media2.exoplayer.external.audio.AudioSink! mAudioSink;
    field private final androidx.media2.exoplayer.TextRenderer! mTextRenderer;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class TextRenderer extends androidx.media2.exoplayer.external.BaseRenderer {
    ctor TextRenderer(androidx.media2.exoplayer.TextRenderer.Output!);
    method public void clearSelection();
    method private void display(long);
    method private void flush();
    method private void handleDtvPacket(androidx.media2.exoplayer.TextRenderer.DataBuilder!, long);
    method private void handleLine21Packet(androidx.media2.exoplayer.TextRenderer.DataBuilder!, long);
    method private void maybeAdvertiseChannel(int, int);
    method public void select(int, int);
    field private static final int CHANNEL_UNSET = -1; // 0xffffffff
    field private static final int PACKET_LENGTH = 3; // 0x3
    field private static final int READ_AHEAD_THRESHOLD_US = 110000; // 0x1adb0
    field public static final int TRACK_TYPE_CEA608 = 0; // 0x0
    field public static final int TRACK_TYPE_CEA708 = 1; // 0x1
    field public static final int TRACK_TYPE_UNSET = -1; // 0xffffffff
    field private final androidx.media2.exoplayer.external.util.ParsableByteArray! mCcData;
    field private final java.util.SortedMap<java.lang.Long,byte[]>! mCcMap;
    field private final androidx.media2.exoplayer.TextRenderer.DataBuilder! mDtvDataBuilder;
    field private final androidx.media2.exoplayer.external.FormatHolder! mFormatHolder;
    field private final android.os.Handler! mHandler;
    field private boolean mHasPendingInputBuffer;
    field private final androidx.media2.exoplayer.external.text.SubtitleInputBuffer! mInputBuffer;
    field private boolean mInputStreamEnded;
    field private boolean[]! mIsTypeAndChannelAdvertised;
    field private final int[]! mLine21Channels;
    field private final androidx.media2.exoplayer.TextRenderer.DataBuilder! mLine21DataBuilder;
    field final androidx.media2.exoplayer.TextRenderer.Output! mOutput;
    field private final androidx.media2.exoplayer.external.util.ParsableByteArray! mScratch;
    field private int mSelectedChannel;
    field private int mSelectedType;
  }

  private static final class TextRenderer.DataBuilder {
    ctor TextRenderer.DataBuilder();
    method public void append(byte, byte);
    method public void append(byte, byte, byte);
    method public void clear();
    method public boolean hasData();
    field public byte[]! mData;
    field public int mLength;
  }

  public static interface TextRenderer.Output {
    method public void onCcData(byte[]!, long);
    method public void onChannelAvailable(int, int);
  }

  @IntDef({androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_CEA608, androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_CEA708, androidx.media2.exoplayer.TextRenderer.TRACK_TYPE_UNSET}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface TextRenderer.TextTrackType {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) final class TrackSelector {
    ctor TrackSelector(androidx.media2.exoplayer.TextRenderer!);
    method public void deselectTrack(int);
    method public androidx.media2.exoplayer.external.trackselection.DefaultTrackSelector! getPlayerTrackSelector();
    method public int getSelectedTrack(int);
    method public java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! getTrackInfos();
    method public void handlePlayerTracksChanged(androidx.media2.exoplayer.external.Player!);
    method public void handleTextRendererChannelAvailable(int, int);
    method public boolean hasPendingMetadataUpdate();
    method public void selectTrack(int);
    field private static final int TRACK_INDEX_UNSET = -1; // 0xffffffff
    field private final java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! mAudioTrackInfos;
    field private final androidx.media2.exoplayer.external.trackselection.DefaultTrackSelector! mDefaultTrackSelector;
    field private final java.util.List<androidx.media2.exoplayer.TrackSelector.InternalTextTrackInfo>! mInternalTextTrackInfos;
    field private boolean mPendingMetadataUpdate;
    field private int mPlayerTextTrackIndex;
    field private int mSelectedAudioTrackIndex;
    field private int mSelectedTextTrackIndex;
    field private int mSelectedVideoTrackIndex;
    field private final androidx.media2.exoplayer.TextRenderer! mTextRenderer;
    field private final java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! mTextTrackInfos;
    field private final java.util.List<androidx.media2.MediaPlayer2.TrackInfo>! mVideoTrackInfos;
  }

  public static final class TrackSelector.InternalTextTrackInfo {
    ctor TrackSelector.InternalTextTrackInfo(int, androidx.media2.exoplayer.external.Format!);
    ctor TrackSelector.InternalTextTrackInfo(int, int, int);
    method static androidx.media2.common.TrackInfoImpl! getTrackInfo(int, boolean, boolean);
    field public static final String MIMETYPE_TEXT_CEA_608 = "text/cea-608";
    field public static final String MIMETYPE_TEXT_CEA_708 = "text/cea-708";
    field public static final int UNSET = -1; // 0xffffffff
    field public final int mChannel;
    field public final int mPlayerTrackIndex;
    field public final androidx.media2.common.TrackInfoImpl! mTrackInfo;
    field public final int mType;
  }

}

package androidx.media2.subtitle {

  class Cea608CCParser {
    ctor Cea608CCParser(androidx.media2.subtitle.Cea608CCParser.DisplayListener!);
    method private androidx.media2.subtitle.Cea608CCParser.CCMemory! getMemory();
    method private boolean handleCtrlCode(androidx.media2.subtitle.Cea608CCParser.CCData!);
    method private boolean handleDisplayableChars(androidx.media2.subtitle.Cea608CCParser.CCData!);
    method private boolean handleMidRowCode(androidx.media2.subtitle.Cea608CCParser.CCData!);
    method private boolean handlePACCode(androidx.media2.subtitle.Cea608CCParser.CCData!);
    method private boolean handleTabOffsets(androidx.media2.subtitle.Cea608CCParser.CCData!);
    method public void parse(byte[]!);
    method private void swapMemory();
    method private void updateDisplay();
    field private static final int AOF = 34; // 0x22
    field private static final int AON = 35; // 0x23
    field private static final int BS = 33; // 0x21
    field private static final int CR = 45; // 0x2d
    field private static final boolean DEBUG;
    field private static final int DER = 36; // 0x24
    field private static final int EDM = 44; // 0x2c
    field private static final int ENM = 46; // 0x2e
    field private static final int EOC = 47; // 0x2f
    field private static final int FON = 40; // 0x28
    field private static final int INVALID = -1; // 0xffffffff
    field public static final int MAX_COLS = 32; // 0x20
    field public static final int MAX_ROWS = 15; // 0xf
    field private static final int MODE_PAINT_ON = 1; // 0x1
    field private static final int MODE_POP_ON = 3; // 0x3
    field private static final int MODE_ROLL_UP = 2; // 0x2
    field private static final int MODE_TEXT = 4; // 0x4
    field private static final int MODE_UNKNOWN = 0; // 0x0
    field private static final int RCL = 32; // 0x20
    field private static final int RDC = 41; // 0x29
    field private static final int RTD = 43; // 0x2b
    field private static final int RU2 = 37; // 0x25
    field private static final int RU3 = 38; // 0x26
    field private static final int RU4 = 39; // 0x27
    field private static final String TAG = "Cea608CCParser";
    field private static final int TR = 42; // 0x2a
    field private static final char TS = 160; // 0x00a0 '\u00a0'
    field private androidx.media2.subtitle.Cea608CCParser.CCMemory! mDisplay;
    field private final androidx.media2.subtitle.Cea608CCParser.DisplayListener! mListener;
    field private int mMode;
    field private androidx.media2.subtitle.Cea608CCParser.CCMemory! mNonDisplay;
    field private int mPrevCtrlCode;
    field private int mRollUpSize;
    field private androidx.media2.subtitle.Cea608CCParser.CCMemory! mTextMem;
  }

  private static class Cea608CCParser.CCData {
    ctor Cea608CCParser.CCData(byte, byte, byte);
    method private String! ctrlCodeToString(int);
    method static androidx.media2.subtitle.Cea608CCParser.CCData[]! fromByteArray(byte[]!);
    method private char getBasicChar(byte);
    method private String! getBasicChars();
    method int getCtrlCode();
    method String! getDisplayText();
    method private String! getExtendedChar();
    method androidx.media2.subtitle.Cea608CCParser.StyleCode! getMidRow();
    method androidx.media2.subtitle.Cea608CCParser.PAC! getPAC();
    method private String! getSpecialChar();
    method int getTabOffset();
    method private boolean isBasicChar();
    method boolean isDisplayableChar();
    method boolean isExtendedChar();
    method private boolean isSpecialChar();
    field private final byte mData1;
    field private final byte mData2;
    field private final byte mType;
    field private static final String[]! sCtrlCodeMap;
    field private static final String[]! sProtugueseCharMap;
    field private static final String[]! sSpanishCharMap;
    field private static final String[]! sSpecialCharMap;
  }

  private static class Cea608CCParser.CCLineBuilder {
    ctor Cea608CCParser.CCLineBuilder(String!);
    method void applyStyleSpan(android.text.SpannableStringBuilder!, androidx.media2.subtitle.Cea608CCParser.StyleCode!, int, int);
    method char charAt(int);
    method android.text.SpannableStringBuilder! getStyledText(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method int length();
    method void setCharAt(int, char);
    method void setMidRowAt(int, androidx.media2.subtitle.Cea608CCParser.StyleCode!);
    method void setPACAt(int, androidx.media2.subtitle.Cea608CCParser.PAC!);
    field private final StringBuilder! mDisplayChars;
    field private final androidx.media2.subtitle.Cea608CCParser.StyleCode[]! mMidRowStyles;
    field private final androidx.media2.subtitle.Cea608CCParser.StyleCode[]! mPACStyles;
  }

  private static class Cea608CCParser.CCMemory {
    ctor Cea608CCParser.CCMemory();
    method void bs();
    method private static int clamp(int, int, int);
    method void cr();
    method void der();
    method void erase();
    method private androidx.media2.subtitle.Cea608CCParser.CCLineBuilder! getLineBuffer(int);
    method android.text.SpannableStringBuilder[]! getStyledText(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method void moveBaselineTo(int, int);
    method private void moveCursorByCol(int);
    method private void moveCursorTo(int, int);
    method private void moveCursorToRow(int);
    method void rollUp(int);
    method void tab(int);
    method void writeMidRowCode(androidx.media2.subtitle.Cea608CCParser.StyleCode!);
    method void writePAC(androidx.media2.subtitle.Cea608CCParser.PAC!);
    method void writeText(String!);
    field private final String! mBlankLine;
    field private int mCol;
    field private final androidx.media2.subtitle.Cea608CCParser.CCLineBuilder[]! mLines;
    field private int mRow;
  }

  static interface Cea608CCParser.DisplayListener {
    method public android.view.accessibility.CaptioningManager.CaptionStyle! getCaptionStyle();
    method public void onDisplayChanged(android.text.SpannableStringBuilder[]!);
  }

  public static class Cea608CCParser.MutableBackgroundColorSpan extends android.text.style.CharacterStyle implements android.text.style.UpdateAppearance {
    ctor Cea608CCParser.MutableBackgroundColorSpan(int);
    method public int getBackgroundColor();
    method public void setBackgroundColor(int);
    field private int mColor;
  }

  private static class Cea608CCParser.PAC extends androidx.media2.subtitle.Cea608CCParser.StyleCode {
    ctor Cea608CCParser.PAC(int, int, int, int);
    method static androidx.media2.subtitle.Cea608CCParser.PAC! fromBytes(byte, byte);
    method int getCol();
    method int getRow();
    method boolean isIndentPAC();
    field final int mCol;
    field final int mRow;
  }

  private static class Cea608CCParser.StyleCode {
    ctor Cea608CCParser.StyleCode(int, int);
    method static androidx.media2.subtitle.Cea608CCParser.StyleCode! fromByte(byte);
    method int getColor();
    method boolean isItalics();
    method boolean isUnderline();
    field static final int COLOR_BLUE = 2; // 0x2
    field static final int COLOR_CYAN = 3; // 0x3
    field static final int COLOR_GREEN = 1; // 0x1
    field static final int COLOR_INVALID = 7; // 0x7
    field static final int COLOR_MAGENTA = 6; // 0x6
    field static final int COLOR_RED = 4; // 0x4
    field static final int COLOR_WHITE = 0; // 0x0
    field static final int COLOR_YELLOW = 5; // 0x5
    field static final int STYLE_ITALICS = 1; // 0x1
    field static final int STYLE_UNDERLINE = 2; // 0x2
    field final int mColor;
    field final int mStyle;
    field static final String[]! sColorMap;
  }

  @RequiresApi(28) class Cea708CCParser {
    ctor Cea708CCParser(androidx.media2.subtitle.Cea708CCParser.DisplayListener!);
    method private void emitCaptionBuffer();
    method private void emitCaptionEvent(androidx.media2.subtitle.Cea708CCParser.CaptionEvent!);
    method public void parse(byte[]!);
    method private int parseC0(byte[]!, int);
    method private int parseC1(byte[]!, int);
    method private int parseC2(byte[]!, int);
    method private int parseC3(byte[]!, int);
    method private int parseExt1(byte[]!, int);
    method private int parseG0(byte[]!, int);
    method private int parseG1(byte[]!, int);
    method private int parseG2(byte[]!, int);
    method private int parseG3(byte[]!, int);
    method private int parseServiceBlockData(byte[]!, int);
    field public static final int CAPTION_EMIT_TYPE_BUFFER = 1; // 0x1
    field public static final int CAPTION_EMIT_TYPE_COMMAND_CLW = 4; // 0x4
    field public static final int CAPTION_EMIT_TYPE_COMMAND_CWX = 3; // 0x3
    field public static final int CAPTION_EMIT_TYPE_COMMAND_DFX = 16; // 0x10
    field public static final int CAPTION_EMIT_TYPE_COMMAND_DLC = 10; // 0xa
    field public static final int CAPTION_EMIT_TYPE_COMMAND_DLW = 8; // 0x8
    field public static final int CAPTION_EMIT_TYPE_COMMAND_DLY = 9; // 0x9
    field public static final int CAPTION_EMIT_TYPE_COMMAND_DSW = 5; // 0x5
    field public static final int CAPTION_EMIT_TYPE_COMMAND_HDW = 6; // 0x6
    field public static final int CAPTION_EMIT_TYPE_COMMAND_RST = 11; // 0xb
    field public static final int CAPTION_EMIT_TYPE_COMMAND_SPA = 12; // 0xc
    field public static final int CAPTION_EMIT_TYPE_COMMAND_SPC = 13; // 0xd
    field public static final int CAPTION_EMIT_TYPE_COMMAND_SPL = 14; // 0xe
    field public static final int CAPTION_EMIT_TYPE_COMMAND_SWA = 15; // 0xf
    field public static final int CAPTION_EMIT_TYPE_COMMAND_TGW = 7; // 0x7
    field public static final int CAPTION_EMIT_TYPE_CONTROL = 2; // 0x2
    field private static final boolean DEBUG = false;
    field private static final String! MUSIC_NOTE_CHAR;
    field private static final String TAG = "Cea708CCParser";
    field private final StringBuilder! mBuilder;
    field private int mCommand;
    field private androidx.media2.subtitle.Cea708CCParser.DisplayListener! mListener;
  }

  public static class Cea708CCParser.CaptionColor {
    ctor Cea708CCParser.CaptionColor(int, int, int, int);
    method public int getArgbValue();
    field private static final int[]! COLOR_MAP;
    field public static final int OPACITY_FLASH = 1; // 0x1
    field private static final int[]! OPACITY_MAP;
    field public static final int OPACITY_SOLID = 0; // 0x0
    field public static final int OPACITY_TRANSLUCENT = 2; // 0x2
    field public static final int OPACITY_TRANSPARENT = 3; // 0x3
    field public final int blue;
    field public final int green;
    field public final int opacity;
    field public final int red;
  }

  public static class Cea708CCParser.CaptionEvent {
    ctor Cea708CCParser.CaptionEvent(int, Object!);
    field public final Object! obj;
    field public final int type;
  }

  public static class Cea708CCParser.CaptionPenAttr {
    ctor Cea708CCParser.CaptionPenAttr(int, int, int, int, int, boolean, boolean);
    field public static final int OFFSET_NORMAL = 1; // 0x1
    field public static final int OFFSET_SUBSCRIPT = 0; // 0x0
    field public static final int OFFSET_SUPERSCRIPT = 2; // 0x2
    field public static final int PEN_SIZE_LARGE = 2; // 0x2
    field public static final int PEN_SIZE_SMALL = 0; // 0x0
    field public static final int PEN_SIZE_STANDARD = 1; // 0x1
    field public final int edgeType;
    field public final int fontTag;
    field public final boolean italic;
    field public final int penOffset;
    field public final int penSize;
    field public final int textTag;
    field public final boolean underline;
  }

  public static class Cea708CCParser.CaptionPenColor {
    ctor Cea708CCParser.CaptionPenColor(androidx.media2.subtitle.Cea708CCParser.CaptionColor!, androidx.media2.subtitle.Cea708CCParser.CaptionColor!, androidx.media2.subtitle.Cea708CCParser.CaptionColor!);
    field public final androidx.media2.subtitle.Cea708CCParser.CaptionColor! backgroundColor;
    field public final androidx.media2.subtitle.Cea708CCParser.CaptionColor! edgeColor;
    field public final androidx.media2.subtitle.Cea708CCParser.CaptionColor! foregroundColor;
  }

  public static class Cea708CCParser.CaptionPenLocation {
    ctor Cea708CCParser.CaptionPenLocation(int, int);
    field public final int column;
    field public final int row;
  }

  public static class Cea708CCParser.CaptionWindow {
    ctor Cea708CCParser.CaptionWindow(int, boolean, boolean, boolean, int, boolean, int, int, int, int, int, int, int);
    field public final int anchorHorizontal;
    field public final int anchorId;
    field public final int anchorVertical;
    field public final int columnCount;
    field public final boolean columnLock;
    field public final int id;
    field public final int penStyle;
    field public final int priority;
    field public final boolean relativePositioning;
    field public final int rowCount;
    field public final boolean rowLock;
    field public final boolean visible;
    field public final int windowStyle;
  }

  public static class Cea708CCParser.CaptionWindowAttr {
    ctor Cea708CCParser.CaptionWindowAttr(androidx.media2.subtitle.Cea708CCParser.CaptionColor!, androidx.media2.subtitle.Cea708CCParser.CaptionColor!, int, boolean, int, int, int, int, int, int);
    field public final androidx.media2.subtitle.Cea708CCParser.CaptionColor! borderColor;
    field public final int borderType;
    field public final int displayEffect;
    field public final int effectDirection;
    field public final int effectSpeed;
    field public final androidx.media2.subtitle.Cea708CCParser.CaptionColor! fillColor;
    field public final int justify;
    field public final int printDirection;
    field public final int scrollDirection;
    field public final boolean wordWrap;
  }

  private static class Cea708CCParser.Const {
    ctor private Cea708CCParser.Const();
    field public static final int CODE_C0_BS = 8; // 0x8
    field public static final int CODE_C0_CR = 13; // 0xd
    field public static final int CODE_C0_ETX = 3; // 0x3
    field public static final int CODE_C0_EXT1 = 16; // 0x10
    field public static final int CODE_C0_FF = 12; // 0xc
    field public static final int CODE_C0_HCR = 14; // 0xe
    field public static final int CODE_C0_NUL = 0; // 0x0
    field public static final int CODE_C0_P16 = 24; // 0x18
    field public static final int CODE_C0_RANGE_END = 31; // 0x1f
    field public static final int CODE_C0_RANGE_START = 0; // 0x0
    field public static final int CODE_C0_SKIP1_RANGE_END = 23; // 0x17
    field public static final int CODE_C0_SKIP1_RANGE_START = 16; // 0x10
    field public static final int CODE_C0_SKIP2_RANGE_END = 31; // 0x1f
    field public static final int CODE_C0_SKIP2_RANGE_START = 24; // 0x18
    field public static final int CODE_C1_CLW = 136; // 0x88
    field public static final int CODE_C1_CW0 = 128; // 0x80
    field public static final int CODE_C1_CW1 = 129; // 0x81
    field public static final int CODE_C1_CW2 = 130; // 0x82
    field public static final int CODE_C1_CW3 = 131; // 0x83
    field public static final int CODE_C1_CW4 = 132; // 0x84
    field public static final int CODE_C1_CW5 = 133; // 0x85
    field public static final int CODE_C1_CW6 = 134; // 0x86
    field public static final int CODE_C1_CW7 = 135; // 0x87
    field public static final int CODE_C1_DF0 = 152; // 0x98
    field public static final int CODE_C1_DF1 = 153; // 0x99
    field public static final int CODE_C1_DF2 = 154; // 0x9a
    field public static final int CODE_C1_DF3 = 155; // 0x9b
    field public static final int CODE_C1_DF4 = 156; // 0x9c
    field public static final int CODE_C1_DF5 = 157; // 0x9d
    field public static final int CODE_C1_DF6 = 158; // 0x9e
    field public static final int CODE_C1_DF7 = 159; // 0x9f
    field public static final int CODE_C1_DLC = 142; // 0x8e
    field public static final int CODE_C1_DLW = 140; // 0x8c
    field public static final int CODE_C1_DLY = 141; // 0x8d
    field public static final int CODE_C1_DSW = 137; // 0x89
    field public static final int CODE_C1_HDW = 138; // 0x8a
    field public static final int CODE_C1_RANGE_END = 159; // 0x9f
    field public static final int CODE_C1_RANGE_START = 128; // 0x80
    field public static final int CODE_C1_RST = 143; // 0x8f
    field public static final int CODE_C1_SPA = 144; // 0x90
    field public static final int CODE_C1_SPC = 145; // 0x91
    field public static final int CODE_C1_SPL = 146; // 0x92
    field public static final int CODE_C1_SWA = 151; // 0x97
    field public static final int CODE_C1_TGW = 139; // 0x8b
    field public static final int CODE_C2_RANGE_END = 31; // 0x1f
    field public static final int CODE_C2_RANGE_START = 0; // 0x0
    field public static final int CODE_C2_SKIP0_RANGE_END = 7; // 0x7
    field public static final int CODE_C2_SKIP0_RANGE_START = 0; // 0x0
    field public static final int CODE_C2_SKIP1_RANGE_END = 15; // 0xf
    field public static final int CODE_C2_SKIP1_RANGE_START = 8; // 0x8
    field public static final int CODE_C2_SKIP2_RANGE_END = 23; // 0x17
    field public static final int CODE_C2_SKIP2_RANGE_START = 16; // 0x10
    field public static final int CODE_C2_SKIP3_RANGE_END = 31; // 0x1f
    field public static final int CODE_C2_SKIP3_RANGE_START = 24; // 0x18
    field public static final int CODE_C3_RANGE_END = 159; // 0x9f
    field public static final int CODE_C3_RANGE_START = 128; // 0x80
    field public static final int CODE_C3_SKIP4_RANGE_END = 135; // 0x87
    field public static final int CODE_C3_SKIP4_RANGE_START = 128; // 0x80
    field public static final int CODE_C3_SKIP5_RANGE_END = 143; // 0x8f
    field public static final int CODE_C3_SKIP5_RANGE_START = 136; // 0x88
    field public static final int CODE_G0_MUSICNOTE = 127; // 0x7f
    field public static final int CODE_G0_RANGE_END = 127; // 0x7f
    field public static final int CODE_G0_RANGE_START = 32; // 0x20
    field public static final int CODE_G1_RANGE_END = 255; // 0xff
    field public static final int CODE_G1_RANGE_START = 160; // 0xa0
    field public static final int CODE_G2_BLK = 48; // 0x30
    field public static final int CODE_G2_NBTSP = 33; // 0x21
    field public static final int CODE_G2_RANGE_END = 127; // 0x7f
    field public static final int CODE_G2_RANGE_START = 32; // 0x20
    field public static final int CODE_G2_TSP = 32; // 0x20
    field public static final int CODE_G3_CC = 160; // 0xa0
    field public static final int CODE_G3_RANGE_END = 255; // 0xff
    field public static final int CODE_G3_RANGE_START = 160; // 0xa0
  }

  static interface Cea708CCParser.DisplayListener {
    method public void emitEvent(androidx.media2.subtitle.Cea708CCParser.CaptionEvent!);
  }

  @RequiresApi(28) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class Cea708CaptionRenderer extends androidx.media2.subtitle.SubtitleController.Renderer {
    ctor public Cea708CaptionRenderer(android.content.Context!);
    method public androidx.media2.subtitle.SubtitleTrack! createTrack(android.media.MediaFormat!);
    method public boolean supports(android.media.MediaFormat!);
    field private androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget! mCCWidget;
    field private final android.content.Context! mContext;
  }

  class Cea708CaptionRenderer.Cea708CCWidget extends androidx.media2.subtitle.ClosedCaptionWidget implements androidx.media2.subtitle.Cea708CCParser.DisplayListener {
    ctor Cea708CaptionRenderer.Cea708CCWidget(android.content.Context!);
    ctor Cea708CaptionRenderer.Cea708CCWidget(android.content.Context!, android.util.AttributeSet!);
    ctor Cea708CaptionRenderer.Cea708CCWidget(android.content.Context!, android.util.AttributeSet!, int);
    ctor Cea708CaptionRenderer.Cea708CCWidget(android.content.Context!, android.util.AttributeSet!, int, int);
    method public androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout! createCaptionLayout(android.content.Context!);
    method public void emitEvent(androidx.media2.subtitle.Cea708CCParser.CaptionEvent!);
    field private final androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCHandler! mCCHandler;
  }

  class Cea708CaptionRenderer.Cea708CCWidget.CCHandler implements android.os.Handler.Callback {
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCHandler(androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCLayout!);
    method private void clearWindows(int);
    method private void defineWindow(androidx.media2.subtitle.Cea708CCParser.CaptionWindow!);
    method private void delay(int);
    method private void delayCancel();
    method private void deleteWindows(int);
    method private void displayWindows(int);
    method private java.util.ArrayList<androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout>! getWindowsFromBitmap(int);
    method private void hideWindows(int);
    method public void processCaptionEvent(androidx.media2.subtitle.Cea708CCParser.CaptionEvent!);
    method private void processPendingBuffer();
    method public void reset();
    method private void sendBufferToCurrentWindow(String!);
    method private void sendControlToCurrentWindow(char);
    method private void setCurrentWindowLayout(int);
    method private void setPenAttr(androidx.media2.subtitle.Cea708CCParser.CaptionPenAttr!);
    method private void setPenColor(androidx.media2.subtitle.Cea708CCParser.CaptionPenColor!);
    method private void setPenLocation(androidx.media2.subtitle.Cea708CCParser.CaptionPenLocation!);
    method private void setWindowAttr(androidx.media2.subtitle.Cea708CCParser.CaptionWindowAttr!);
    method private void toggleWindows(int);
    field private static final int CAPTION_ALL_WINDOWS_BITMAP = 255; // 0xff
    field private static final long CAPTION_CLEAR_INTERVAL_MS = 60000L; // 0xea60L
    field private static final int CAPTION_WINDOWS_MAX = 8; // 0x8
    field private static final boolean DEBUG = false;
    field private static final int MSG_CAPTION_CLEAR = 2; // 0x2
    field private static final int MSG_DELAY_CANCEL = 1; // 0x1
    field private static final String TAG = "CCHandler";
    field private static final int TENTHS_OF_SECOND_IN_MILLIS = 100; // 0x64
    field private final androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCLayout! mCCLayout;
    field private final androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout[]! mCaptionWindowLayouts;
    field private androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout! mCurrentWindowLayout;
    field private final android.os.Handler! mHandler;
    field private boolean mIsDelayed;
    field private final java.util.ArrayList<androidx.media2.subtitle.Cea708CCParser.CaptionEvent>! mPendingCaptionEvents;
  }

  class Cea708CaptionRenderer.Cea708CCWidget.CCLayout extends androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout implements androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout {
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCLayout(android.content.Context!);
    method public void addOrUpdateViewToSafeTitleArea(androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout!, androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout.ScaledLayoutParams!);
    method public void removeViewFromSafeTitleArea(androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout!);
    method public void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method public void setFontScale(float);
    field private static final float SAFE_TITLE_AREA_SCALE_END_X = 0.9f;
    field private static final float SAFE_TITLE_AREA_SCALE_END_Y = 0.9f;
    field private static final float SAFE_TITLE_AREA_SCALE_START_X = 0.1f;
    field private static final float SAFE_TITLE_AREA_SCALE_START_Y = 0.1f;
    field private final androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout! mSafeTitleAreaLayout;
  }

  class Cea708CaptionRenderer.Cea708CCWidget.CCView extends androidx.media2.subtitle.SubtitleView {
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCView(android.content.Context!);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCView(android.content.Context!, android.util.AttributeSet!);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCView(android.content.Context!, android.util.AttributeSet!, int);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCView(android.content.Context!, android.util.AttributeSet!, int, int);
    method void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
  }

  private class Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout extends android.widget.RelativeLayout implements android.view.View.OnLayoutChangeListener {
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout(android.content.Context!);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout(android.content.Context!, android.util.AttributeSet!);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout(android.content.Context!, android.util.AttributeSet!, int);
    ctor Cea708CaptionRenderer.Cea708CCWidget.CCWindowLayout(android.content.Context!, android.util.AttributeSet!, int, int);
    method public void appendText(String!);
    method public void clear();
    method public void clearText();
    method public int getCaptionWindowId();
    method private int getScreenColumnCount();
    method public void hide();
    method public void initWindow(androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCLayout!, androidx.media2.subtitle.Cea708CCParser.CaptionWindow!);
    method public void removeFromCaptionView();
    method public void sendBuffer(String!);
    method public void sendControl(char);
    method public void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method public void setCaptionWindowId(int);
    method public void setFontScale(float);
    method public void setPenAttr(androidx.media2.subtitle.Cea708CCParser.CaptionPenAttr!);
    method public void setPenColor(androidx.media2.subtitle.Cea708CCParser.CaptionPenColor!);
    method public void setPenLocation(int, int);
    method public void setRowLimit(int);
    method public void setText(String!);
    method public void setWindowAttr(androidx.media2.subtitle.Cea708CCParser.CaptionWindowAttr!);
    method public void show();
    method private void updateText(String!, boolean);
    method private void updateTextSize();
    method private void updateWidestChar();
    field private static final int ANCHOR_HORIZONTAL_16_9_MAX = 209; // 0xd1
    field private static final int ANCHOR_HORIZONTAL_MODE_CENTER = 1; // 0x1
    field private static final int ANCHOR_HORIZONTAL_MODE_LEFT = 0; // 0x0
    field private static final int ANCHOR_HORIZONTAL_MODE_RIGHT = 2; // 0x2
    field private static final int ANCHOR_MODE_DIVIDER = 3; // 0x3
    field private static final int ANCHOR_RELATIVE_POSITIONING_MAX = 99; // 0x63
    field private static final int ANCHOR_VERTICAL_MAX = 74; // 0x4a
    field private static final int ANCHOR_VERTICAL_MODE_BOTTOM = 2; // 0x2
    field private static final int ANCHOR_VERTICAL_MODE_CENTER = 1; // 0x1
    field private static final int ANCHOR_VERTICAL_MODE_TOP = 0; // 0x0
    field private static final int MAX_COLUMN_COUNT_16_9 = 42; // 0x2a
    field private static final float PROPORTION_PEN_SIZE_LARGE = 1.25f;
    field private static final float PROPORTION_PEN_SIZE_SMALL = 0.75f;
    field private static final String TAG = "CCWindowLayout";
    field private final android.text.SpannableStringBuilder! mBuilder;
    field private androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCLayout! mCCLayout;
    field private androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget.CCView! mCCView;
    field private android.view.accessibility.CaptioningManager.CaptionStyle! mCaptionStyle;
    field private int mCaptionWindowId;
    field private final java.util.List<android.text.style.CharacterStyle>! mCharacterStyles;
    field private float mFontScale;
    field private int mLastCaptionLayoutHeight;
    field private int mLastCaptionLayoutWidth;
    field private int mRow;
    field private int mRowLimit;
    field private float mTextSize;
    field private String! mWidestChar;
  }

  class Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout extends android.view.ViewGroup {
    ctor Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout(android.content.Context!);
    field private static final boolean DEBUG = false;
    field private static final String TAG = "ScaledLayout";
    field private android.graphics.Rect[]! mRectArray;
    field private final java.util.Comparator<android.graphics.Rect>! mRectTopLeftSorter;
  }

  class Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout.ScaledLayoutParams extends android.view.ViewGroup.LayoutParams {
    ctor Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout.ScaledLayoutParams(float, float, float, float);
    ctor Cea708CaptionRenderer.Cea708CCWidget.ScaledLayout.ScaledLayoutParams(android.content.Context!, android.util.AttributeSet!);
    field public static final float SCALE_UNSPECIFIED = -1.0f;
    field public float scaleEndCol;
    field public float scaleEndRow;
    field public float scaleStartCol;
    field public float scaleStartRow;
  }

  static class Cea708CaptionRenderer.Cea708CaptionTrack extends androidx.media2.subtitle.SubtitleTrack {
    ctor Cea708CaptionRenderer.Cea708CaptionTrack(androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget!, android.media.MediaFormat!);
    method public androidx.media2.subtitle.SubtitleTrack.RenderingWidget! getRenderingWidget();
    method public void onData(byte[]!, boolean, long);
    method public void updateView(java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>!);
    field private final androidx.media2.subtitle.Cea708CCParser! mCCParser;
    field private final androidx.media2.subtitle.Cea708CaptionRenderer.Cea708CCWidget! mRenderingWidget;
  }

  @RequiresApi(28) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ClosedCaptionRenderer extends androidx.media2.subtitle.SubtitleController.Renderer {
    ctor public ClosedCaptionRenderer(android.content.Context!);
    method public androidx.media2.subtitle.SubtitleTrack! createTrack(android.media.MediaFormat!);
    method public boolean supports(android.media.MediaFormat!);
    field private static final String TAG = "ClosedCaptionRenderer";
    field private androidx.media2.subtitle.ClosedCaptionRenderer.Cea608CCWidget! mCCWidget;
    field private final android.content.Context! mContext;
  }

  class ClosedCaptionRenderer.Cea608CCWidget extends androidx.media2.subtitle.ClosedCaptionWidget implements androidx.media2.subtitle.Cea608CCParser.DisplayListener {
    ctor ClosedCaptionRenderer.Cea608CCWidget(android.content.Context!);
    ctor ClosedCaptionRenderer.Cea608CCWidget(android.content.Context!, android.util.AttributeSet!);
    ctor ClosedCaptionRenderer.Cea608CCWidget(android.content.Context!, android.util.AttributeSet!, int);
    ctor ClosedCaptionRenderer.Cea608CCWidget(android.content.Context!, android.util.AttributeSet!, int, int);
    method public androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout! createCaptionLayout(android.content.Context!);
    method public android.view.accessibility.CaptioningManager.CaptionStyle! getCaptionStyle();
    method public void onDisplayChanged(android.text.SpannableStringBuilder[]!);
    field private static final String DUMMY_TEXT = "1234567890123456789012345678901234";
    field final android.graphics.Rect! mTextBounds;
  }

  private class ClosedCaptionRenderer.Cea608CCWidget.CCLayout extends android.widget.LinearLayout implements androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout {
    ctor ClosedCaptionRenderer.Cea608CCWidget.CCLayout(android.content.Context!);
    method public void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method public void setFontScale(float);
    method void update(android.text.SpannableStringBuilder[]!);
    field private static final int MAX_ROWS = 15; // 0xf
    field private static final float SAFE_AREA_RATIO = 0.9f;
    field private final androidx.media2.subtitle.ClosedCaptionRenderer.Cea608CCWidget.CCLineBox[]! mLineBoxes;
  }

  private class ClosedCaptionRenderer.Cea608CCWidget.CCLineBox extends android.widget.TextView {
    ctor ClosedCaptionRenderer.Cea608CCWidget.CCLineBox(android.content.Context!);
    method private void drawEdgeOutline(android.graphics.Canvas!);
    method private void drawEdgeRaisedOrDepressed(android.graphics.Canvas!);
    method private void setBackgroundSpans(int);
    method void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
    field private static final float EDGE_OUTLINE_RATIO = 0.1f;
    field private static final float EDGE_SHADOW_RATIO = 0.05f;
    field private static final float FONT_PADDING_RATIO = 0.75f;
    field private int mBgColor;
    field private int mEdgeColor;
    field private int mEdgeType;
    field private float mOutlineWidth;
    field private float mShadowOffset;
    field private float mShadowRadius;
    field private int mTextColor;
  }

  static class ClosedCaptionRenderer.Cea608CaptionTrack extends androidx.media2.subtitle.SubtitleTrack {
    ctor ClosedCaptionRenderer.Cea608CaptionTrack(androidx.media2.subtitle.ClosedCaptionRenderer.Cea608CCWidget!, android.media.MediaFormat!);
    method public androidx.media2.subtitle.SubtitleTrack.RenderingWidget! getRenderingWidget();
    method public void onData(byte[]!, boolean, long);
    method public void updateView(java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>!);
    field private final androidx.media2.subtitle.Cea608CCParser! mCCParser;
    field private final androidx.media2.subtitle.ClosedCaptionRenderer.Cea608CCWidget! mRenderingWidget;
  }

  @RequiresApi(28) abstract class ClosedCaptionWidget extends android.view.ViewGroup implements androidx.media2.subtitle.SubtitleTrack.RenderingWidget {
    ctor ClosedCaptionWidget(android.content.Context!);
    ctor ClosedCaptionWidget(android.content.Context!, android.util.AttributeSet!);
    ctor ClosedCaptionWidget(android.content.Context!, android.util.AttributeSet!, int);
    ctor ClosedCaptionWidget(android.content.Context!, android.util.AttributeSet!, int, int);
    method public abstract androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout! createCaptionLayout(android.content.Context!);
    method private void manageChangeListener();
    method public void setOnChangedListener(androidx.media2.subtitle.SubtitleTrack.RenderingWidget.OnChangedListener!);
    method public void setSize(int, int);
    method public void setVisible(boolean);
    field protected android.view.accessibility.CaptioningManager.CaptionStyle! mCaptionStyle;
    field private final android.view.accessibility.CaptioningManager.CaptioningChangeListener! mCaptioningListener;
    field protected androidx.media2.subtitle.ClosedCaptionWidget.ClosedCaptionLayout! mClosedCaptionLayout;
    field private boolean mHasChangeListener;
    field protected androidx.media2.subtitle.SubtitleTrack.RenderingWidget.OnChangedListener! mListener;
    field private final android.view.accessibility.CaptioningManager! mManager;
  }

  static interface ClosedCaptionWidget.ClosedCaptionLayout {
    method public void setCaptionStyle(android.view.accessibility.CaptioningManager.CaptionStyle!);
    method public void setFontScale(float);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface MediaTimeProvider {
    method public void cancelNotifications(androidx.media2.subtitle.MediaTimeProvider.OnMediaTimeListener!);
    method public long getCurrentTimeUs(boolean, boolean) throws java.lang.IllegalStateException;
    method public void notifyAt(long, androidx.media2.subtitle.MediaTimeProvider.OnMediaTimeListener!);
    method public void scheduleUpdate(androidx.media2.subtitle.MediaTimeProvider.OnMediaTimeListener!);
    field public static final long NO_TIME = -1L; // 0xffffffffffffffffL
  }

  public static interface MediaTimeProvider.OnMediaTimeListener {
    method public void onSeek(long);
    method public void onStop();
    method public void onTimedEvent(long);
  }

  @RequiresApi(28) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SubtitleController {
    ctor public SubtitleController(android.content.Context!);
    ctor public SubtitleController(android.content.Context!, androidx.media2.subtitle.MediaTimeProvider!, androidx.media2.subtitle.SubtitleController.Listener!);
    method public androidx.media2.subtitle.SubtitleTrack! addTrack(android.media.MediaFormat!);
    method private void checkAnchorLooper();
    method void doHide();
    method void doSelectDefaultTrack();
    method void doSelectTrack(androidx.media2.subtitle.SubtitleTrack!);
    method void doShow();
    method public androidx.media2.subtitle.SubtitleTrack! getDefaultTrack();
    method private androidx.media2.subtitle.SubtitleTrack.RenderingWidget! getRenderingWidget();
    method public androidx.media2.subtitle.SubtitleTrack! getSelectedTrack();
    method public androidx.media2.subtitle.SubtitleTrack[]! getTracks();
    method public boolean hasRendererFor(android.media.MediaFormat!);
    method public void hide();
    method private void processOnAnchor(android.os.Message!);
    method public void registerRenderer(androidx.media2.subtitle.SubtitleController.Renderer!);
    method public void reset();
    method public void selectDefaultTrack();
    method public boolean selectTrack(androidx.media2.subtitle.SubtitleTrack!);
    method public void setAnchor(androidx.media2.subtitle.SubtitleController.Anchor!);
    method public void show();
    field private static final int WHAT_HIDE = 2; // 0x2
    field private static final int WHAT_SELECT_DEFAULT_TRACK = 4; // 0x4
    field private static final int WHAT_SELECT_TRACK = 3; // 0x3
    field private static final int WHAT_SHOW = 1; // 0x1
    field private androidx.media2.subtitle.SubtitleController.Anchor! mAnchor;
    field private final android.os.Handler.Callback! mCallback;
    field private android.view.accessibility.CaptioningManager.CaptioningChangeListener! mCaptioningChangeListener;
    field private android.view.accessibility.CaptioningManager! mCaptioningManager;
    field private android.os.Handler! mHandler;
    field private androidx.media2.subtitle.SubtitleController.Listener! mListener;
    field private java.util.ArrayList<androidx.media2.subtitle.SubtitleController.Renderer>! mRenderers;
    field private final Object! mRenderersLock;
    field private androidx.media2.subtitle.SubtitleTrack! mSelectedTrack;
    field private boolean mShowing;
    field private androidx.media2.subtitle.MediaTimeProvider! mTimeProvider;
    field private boolean mTrackIsExplicit;
    field private java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack>! mTracks;
    field private final Object! mTracksLock;
    field private boolean mVisibilityIsExplicit;
  }

  public static interface SubtitleController.Anchor {
    method public android.os.Looper! getSubtitleLooper();
    method public void setSubtitleWidget(androidx.media2.subtitle.SubtitleTrack.RenderingWidget!);
  }

  static interface SubtitleController.Listener {
    method public void onSubtitleTrackSelected(androidx.media2.subtitle.SubtitleTrack!);
  }

  static class SubtitleController.MediaFormatUtil {
    ctor SubtitleController.MediaFormatUtil();
    method static int getInteger(android.media.MediaFormat!, String!, int);
  }

  public abstract static class SubtitleController.Renderer {
    ctor public SubtitleController.Renderer();
    method public abstract androidx.media2.subtitle.SubtitleTrack! createTrack(android.media.MediaFormat!);
    method public abstract boolean supports(android.media.MediaFormat!);
  }

  @RequiresApi(28) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class SubtitleTrack implements androidx.media2.subtitle.MediaTimeProvider.OnMediaTimeListener {
    ctor public SubtitleTrack(android.media.MediaFormat!);
    method protected boolean addCue(androidx.media2.subtitle.SubtitleTrack.Cue!);
    method protected void clearActiveCues();
    method protected void finishedRun(long);
    method public final android.media.MediaFormat! getFormat();
    method public abstract androidx.media2.subtitle.SubtitleTrack.RenderingWidget! getRenderingWidget();
    method public int getTrackType();
    method public void hide();
    method public void onData(androidx.media2.SubtitleData2!);
    method protected abstract void onData(byte[]!, boolean, long);
    method public void onSeek(long);
    method public void onStop();
    method public void onTimedEvent(long);
    method private void removeRunsByEndTimeIndex(int);
    method protected void scheduleTimedEvents();
    method public void setRunDiscardTimeMs(long, long);
    method public void setTimeProvider(androidx.media2.subtitle.MediaTimeProvider!);
    method public void show();
    method private void takeTime(long);
    method protected void updateActiveCues(boolean, long);
    method public abstract void updateView(java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>!);
    field public boolean DEBUG;
    field private static final String TAG = "SubtitleTrack";
    field final java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>! mActiveCues;
    field private androidx.media2.subtitle.SubtitleTrack.CueList! mCues;
    field private android.media.MediaFormat! mFormat;
    field protected android.os.Handler! mHandler;
    field private long mLastTimeMs;
    field private long mLastUpdateTimeMs;
    field private long mNextScheduledTimeMs;
    field Runnable! mRunnable;
    field private final android.util.LongSparseArray<androidx.media2.subtitle.SubtitleTrack.Run>! mRunsByEndTime;
    field private final android.util.LongSparseArray<androidx.media2.subtitle.SubtitleTrack.Run>! mRunsByID;
    field protected androidx.media2.subtitle.MediaTimeProvider! mTimeProvider;
    field protected boolean mVisible;
  }

  static class SubtitleTrack.Cue {
    ctor SubtitleTrack.Cue();
    method public void onTime(long);
    field public long mEndTimeMs;
    field public long[]! mInnerTimesMs;
    field public androidx.media2.subtitle.SubtitleTrack.Cue! mNextInRun;
    field public long mRunID;
    field public long mStartTimeMs;
  }

  static class SubtitleTrack.CueList {
    ctor SubtitleTrack.CueList();
    method public void add(androidx.media2.subtitle.SubtitleTrack.Cue!);
    method private boolean addEvent(androidx.media2.subtitle.SubtitleTrack.Cue!, long);
    method public Iterable<android.util.Pair<java.lang.Long,androidx.media2.subtitle.SubtitleTrack.Cue>>! entriesBetween(long, long);
    method public long nextTimeAfter(long);
    method public void remove(androidx.media2.subtitle.SubtitleTrack.Cue!);
    method void removeEvent(androidx.media2.subtitle.SubtitleTrack.Cue!, long);
    field public boolean DEBUG;
    field private static final String TAG = "CueList";
    field java.util.SortedMap<java.lang.Long,java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>>! mCues;
  }

  class SubtitleTrack.CueList.EntryIterator implements java.util.Iterator<android.util.Pair<java.lang.Long,androidx.media2.subtitle.SubtitleTrack.Cue>> {
    ctor SubtitleTrack.CueList.EntryIterator(java.util.SortedMap<java.lang.Long,java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>>!);
    method private void nextKey();
    field private long mCurrentTimeMs;
    field private boolean mDone;
    field private android.util.Pair<java.lang.Long,androidx.media2.subtitle.SubtitleTrack.Cue>! mLastEntry;
    field private java.util.Iterator<androidx.media2.subtitle.SubtitleTrack.Cue>! mLastListIterator;
    field private java.util.Iterator<androidx.media2.subtitle.SubtitleTrack.Cue>! mListIterator;
    field private java.util.SortedMap<java.lang.Long,java.util.ArrayList<androidx.media2.subtitle.SubtitleTrack.Cue>>! mRemainingCues;
  }

  public static interface SubtitleTrack.RenderingWidget {
    method public void draw(android.graphics.Canvas!);
    method public void onAttachedToWindow();
    method public void onDetachedFromWindow();
    method public void setOnChangedListener(androidx.media2.subtitle.SubtitleTrack.RenderingWidget.OnChangedListener!);
    method public void setSize(int, int);
    method public void setVisible(boolean);
  }

  public static interface SubtitleTrack.RenderingWidget.OnChangedListener {
    method public void onChanged(androidx.media2.subtitle.SubtitleTrack.RenderingWidget!);
  }

  private static class SubtitleTrack.Run {
    ctor SubtitleTrack.Run();
    method public void removeAtEndTimeMs();
    method public void storeByEndTimeMs(android.util.LongSparseArray<androidx.media2.subtitle.SubtitleTrack.Run>!);
    field public long mEndTimeMs;
    field public androidx.media2.subtitle.SubtitleTrack.Cue! mFirstCue;
    field public androidx.media2.subtitle.SubtitleTrack.Run! mNextRunAtEndTimeMs;
    field public androidx.media2.subtitle.SubtitleTrack.Run! mPrevRunAtEndTimeMs;
    field public long mRunID;
    field private long mStoredEndTimeMs;
  }

  @RequiresApi(28) class SubtitleView extends android.view.View {
    ctor SubtitleView(android.content.Context!);
    ctor SubtitleView(android.content.Context!, android.util.AttributeSet!);
    ctor SubtitleView(android.content.Context!, android.util.AttributeSet!, int);
    ctor SubtitleView(android.content.Context!, android.util.AttributeSet!, int, int);
    method private boolean computeMeasurements(int);
    method public void setAlignment(android.text.Layout.Alignment!);
    method public void setEdgeColor(int);
    method public void setEdgeType(int);
    method public void setForegroundColor(int);
    method public void setText(int);
    method public void setText(CharSequence!);
    method public void setTextSize(float);
    method public void setTypeface(android.graphics.Typeface!);
    field private static final int COLOR_BEVEL_DARK = -2147483648; // 0x80000000
    field private static final int COLOR_BEVEL_LIGHT = -2130706433; // 0x80ffffff
    field private static final float INNER_PADDING_RATIO = 0.125f;
    field private android.text.Layout.Alignment! mAlignment;
    field private int mBackgroundColor;
    field private final float mCornerRadius;
    field private int mEdgeColor;
    field private int mEdgeType;
    field private int mForegroundColor;
    field private boolean mHasMeasurements;
    field private int mInnerPaddingX;
    field private int mLastMeasuredWidth;
    field private android.text.StaticLayout! mLayout;
    field private final android.graphics.RectF! mLineBounds;
    field private final float mOutlineWidth;
    field private android.graphics.Paint! mPaint;
    field private final float mShadowOffsetX;
    field private final float mShadowOffsetY;
    field private final float mShadowRadius;
    field private float mSpacingAdd;
    field private float mSpacingMult;
    field private final android.text.SpannableStringBuilder! mText;
    field private android.text.TextPaint! mTextPaint;
  }

}

