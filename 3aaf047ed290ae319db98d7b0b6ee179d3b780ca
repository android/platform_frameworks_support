{
  "comments": [
    {
      "key": {
        "uuid": "21c2feb5_c8602c67",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-03-07T12:22:42Z",
      "side": 1,
      "message": "This library adds FloatPropertyCompat class, so as a user I would expect the method to have a FloatPropertyCompat as a parameter when it called \"...ofProperyy\". With the current signature of setter and getter params I would suggest to not rename it and keep just \"flingAnimationOf\" as a name.",
      "range": {
        "startLine": 26,
        "startChar": 20,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab0a35c3_cc909522",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1053203
      },
      "writtenOn": "2019-03-07T19:34:34Z",
      "side": 1,
      "message": "I considered flingAnimationOf(..), but since property isn\u0027t one of the parameters, I was concerned it might not be clear enough. I\u0027m happy to change it back.",
      "parentUuid": "21c2feb5_c8602c67",
      "range": {
        "startLine": 26,
        "startChar": 20,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "407441dc_86ba2bce",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1053203
      },
      "writtenOn": "2019-03-08T06:49:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab0a35c3_cc909522",
      "range": {
        "startLine": 26,
        "startChar": 20,
        "endLine": 26,
        "endChar": 28
      },
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29195836_0427d834",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-03-07T12:22:42Z",
      "side": 1,
      "message": "This feels like a misuse of FloatValueHolder class for me. I can think about quite more clear way of doing this with extracting an interface from FloatValueHolder and have two implementations: 1) which stores into a mValue field; 2) which takes setter and getter lambdas as a constructor parameter.",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55755584_b47625ce",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1053203
      },
      "writtenOn": "2019-03-07T19:34:34Z",
      "side": 1,
      "message": "It\u0027s a good suggestion except for one small caveat: FloatValueHolder is defined in java. So we can\u0027t use lambda\u0027s in FloatValueHolder for the lack of java 8. Do you have other suggestions on improving it? I wasn\u0027t stressing over it as it\u0027s an implementation detail. Though I would love to get feedback on making it look better.",
      "parentUuid": "29195836_0427d834",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c575c53_cc52035a",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-03-07T23:48:42Z",
      "side": 1,
      "message": "We still can define an interface and the first implementation with just a field in java and the one with lambda in Kotlin. Wdyt?",
      "parentUuid": "55755584_b47625ce",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f1e82f5_709ae2ef",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1053203
      },
      "writtenOn": "2019-03-08T06:49:30Z",
      "side": 1,
      "message": "Please correct me if I misunderstood you, you are suggesting:\nCreate an interface in Java, and have FloatValueHolder implement it. In kotlin, create another impl of that interface that uses setter and getter directly.\n\nThat is a viable option. However, it involves either changing all the public APIs (in 3 classes) that currently use FloatValueHolder to that new interface, or adding a bunch of new APIs to support that interface. It seems like too much API change to avoid this bit of internal implementation detail messiness, especially that we don\u0027t expose this intermediate FloatValueHolder to devs. Given this tradeoff, I\u0027m leaning towards not adding new Java APIs. What do you think?",
      "parentUuid": "4c575c53_cc52035a",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38d196a2_45c96942",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-03-08T11:26:15Z",
      "side": 1,
      "message": "Sorry if I asked for something way too complex for this CL. I didn\u0027t mean to be too bothersome. I +2ed this change and don\u0027t insist on this.\n\nLet me describe what I proposed, I just wanted to improve the API a bit.\nIt is a public API change for sure. But it will not require library users to change something in their code. \n1) We can create a new interface\ninterface FloatPropertyHolder {\n    public void setValue(float value);\n    public float getValue();\n}\n2) We add `final` back for FloatValueHolder and mark this class as `implements FloatPropertyHolder`.\n3) We change SpringAnimation to accept FloatPropertyHolder instead of FloatValueHolder as a constructor parameter. \nLibrary user\u0027s code still works as they are providing FloatValueHolder into a constructor and it implements FloatPropertyHolder.\nIt potentially allows developers to create their custom proxy properties:\nclass ViewAlphaProperty(private val view: View) : FloatPropertyHolder {\n    override fun setValue(value: Float) \u003d view.setAlpha(value)\n    override fun getValue() \u003d view.getAlpha()\n}\nThey can write the same in java, it is just shorter in Kotlin to write an example.\nThanks.",
      "parentUuid": "8f1e82f5_709ae2ef",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "642ae92d_9988b056",
        "filename": "dynamic-animation/ktx/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.kt",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1053203
      },
      "writtenOn": "2019-03-08T19:40:30Z",
      "side": 1,
      "message": "Yes, that\u0027s how I understood it. That would require DynamicAnimation, SpringAnimation, and FlingAnimation to all add/change public API to support the new FloatPropertyHolder, which is a much larger API surface change than I\u0027d intended. My concern is mostly around the public API churns, much less about implementation complexity. Let\u0027s keep the rest of the public API untouched for now. If there\u0027s a convincing use case for changes outline above, we can do it then.",
      "parentUuid": "38d196a2_45c96942",
      "revId": "3aaf047ed290ae319db98d7b0b6ee179d3b780ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}