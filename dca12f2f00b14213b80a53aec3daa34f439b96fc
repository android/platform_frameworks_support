{
  "comments": [
    {
      "key": {
        "uuid": "64730dd8_b06ea71c",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedFile.java",
        "patchSetId": 24
      },
      "lineNbr": 181,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2019-05-03T18:04:05Z",
      "side": 1,
      "message": "nit: this and the output stream private method can be inlined to this method",
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8ee40c9_3d384906",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 55,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "We don\u0027t have to store the keysets in their own share pref files. We can store them in the same encrypted shared preferences.\n\nThe keyset of the keys can be stored in the __keys_keyset__ attribute, and values in the __values_keyset__ attribute.\n\nWe also don\u0027t have to allow users to change the attribute names because users don\u0027t again anything doing that.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 55,
        "endChar": 57
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e508400f_a23efded",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 77,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "This constructor can be removed?",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 77,
        "endChar": 5
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d82ca62_206aa76c",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 93,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "this and mTinkCipher make the code difficult to follow. If I want to understand how the encryption works, I have to go to mTinkCipher to see how you construct the relevant objects.\n\nWhat you want to do is to create the AEAD and DeterministicAEAD objects in the create factory method and pass it to the constructor of EncryptedSharedPreferences.\n\nIt\u0027s not hard to do that, and you don\u0027t need wrappers like mSharedPreferencesKeysets or mTinkCipher, but you should directly call AndroidKeysetManager.\n\nFor example,\n\nKeysetHandler valueHandle \u003d new AndroidKeysetManager.Builder()\n                    .withKeyTemplate(getKeyTemplate(valueEncryptionScheme))\n                    .withSharedPref(context, name, \"__keys_keyset__\")\n                    .withMasterKeyUri(\"android-keystore://\" + masterKeyAlias)\n                    .build()\n                    .getKeysetHandle();\nAead valueEncryptor \u003d AeadFactory.getPrimitive(handle);\n\nNote that you don\u0027t even need a MasterKey object, but only a masterKeyAlias. This is better because the masterKeyAlias is the only thing you need from the master key object.",
      "range": {
        "startLine": 93,
        "startChar": 8,
        "endLine": 93,
        "endChar": 33
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ee1d7f7_b939127b",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 102,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Avoid doing more than field assignments in the constructor, as it makes code harder to test.\n\nIf you want to build dep objects, do it in the create factory method.",
      "range": {
        "startLine": 89,
        "startChar": 8,
        "endLine": 102,
        "endChar": 43
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "952fa8be_9606ef96",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 121,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "This method should create all dependencies that the constructor of EncryptedSharedPreferences needed.",
      "range": {
        "startLine": 120,
        "startChar": 8,
        "endLine": 121,
        "endChar": 69
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "142ad655_559d9189",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 127,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "It\u0027s unfortunate that key in KeyEncryptionScheme is very different from key in MasterKey or keyset.\n\nMaybe rename this to PrefKeyEncryptionScheme to make sure people understand that we\u0027re talking about preference keys?",
      "range": {
        "startLine": 127,
        "startChar": 16,
        "endLine": 127,
        "endChar": 35
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dd407e7_906a495c",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 162,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Since all parameters are required, I guess we can remove this Builder to simplify the code.\n\nThe static create method is fine.",
      "range": {
        "startLine": 158,
        "startChar": 8,
        "endLine": 162,
        "endChar": 69
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "391d3239_0b50f64c",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 224,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "these can be removed",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 224,
        "endChar": 9
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6964d1df_4c359719",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 259,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Is this the behavior of normal SharedPreferences.Editor?",
      "range": {
        "startLine": 257,
        "startChar": 12,
        "endLine": 259,
        "endChar": 13
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0951e392_6d56ddcb",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 277,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Ditto",
      "range": {
        "startLine": 275,
        "startChar": 11,
        "endLine": 277,
        "endChar": 13
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "590b0a91_0dc5a065",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 371,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Wait, does the normal SharedPreferences accept null key?",
      "range": {
        "startLine": 371,
        "startChar": 0,
        "endLine": 371,
        "endChar": 35
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fa6e092_8514b2e3",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 373,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "should be\n\nbyte[] encryptedKey \u003d mEncryptedSharedPreferences.getKeyDeterministicAead().encryptDeterministically(key, name);\n\nwhere name is the name of the shared preference. This binds the key to the shared preference, making it impossible to copy a key from one shared preference to another.",
      "range": {
        "startLine": 373,
        "startChar": 16,
        "endLine": 373,
        "endChar": 82
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f05b431_6807953c",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 374,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Can you just add the cleartext key to mKeysChanged?\n\nAlso it looks like you might want to use CopyOnWriteArrayList for mKeysChanged because otherwise you might run into multi-threading issues when this shared preference is edited on multiple threads.",
      "range": {
        "startLine": 374,
        "startChar": 0,
        "endLine": 374,
        "endChar": 47
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2315f3_fbf42bf0",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 376,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "this is inefficient because the encryptAead method has to build an AEAD object for every call. also you want to use the encryptedKey, not key as the associated data.\n\nYou want something like this\n\nbyte[] ciphertext \u003d mEncryptedSharedPreferences.getValueAead().encrypt(value, encryptedKey);\n\nThis binds the value to the encrypted key (and, indirectly, to the shared preference).",
      "range": {
        "startLine": 375,
        "startChar": 36,
        "endLine": 376,
        "endChar": 82
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5fd59a3_40cb3967",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 379,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "shouldn\u0027t you throw some exception here to let users know that the encryption failed?\n\nshould throw whatever normal Editor would throw if it can\u0027t edit a pref.",
      "range": {
        "startLine": 379,
        "startChar": 16,
        "endLine": 379,
        "endChar": 75
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eaf388f_665de870",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 387,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "If mKeysChanged contains only cleartext keys, you don\u0027t need to decrypt them again.",
      "range": {
        "startLine": 387,
        "startChar": 20,
        "endLine": 387,
        "endChar": 86
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b5e11ae_4e2162e5",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 525,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "Ditto. Should check if normal shared preferences actually allow null key. Otherwise should throw IllegalArgumentException.",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 525,
        "endChar": 9
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8001bfc9_aae1dfdc",
        "filename": "security/crypto/src/main/java/androidx/security/crypto/EncryptedSharedPreferences.java",
        "patchSetId": 24
      },
      "lineNbr": 583,
      "author": {
        "id": 1069370
      },
      "writtenOn": "2019-05-03T18:07:42Z",
      "side": 1,
      "message": "this looks wrong, as the key should be encrypted deterministically.\n\nmTinkCipher should be removed.",
      "range": {
        "startLine": 583,
        "startChar": 51,
        "endLine": 583,
        "endChar": 62
      },
      "revId": "dca12f2f00b14213b80a53aec3daa34f439b96fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}