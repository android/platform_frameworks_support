{
  "comments": [
    {
      "key": {
        "uuid": "af2bea3a_b5a6d83b",
        "filename": "ui/material/src/main/java/androidx/ui/material/Switch.kt",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1493285
      },
      "writtenOn": "2019-05-29T00:07:24Z",
      "side": 1,
      "message": "have we decided that it\u0027s important for us to make this parameter nullable? It feels like something where providing null to it is always the wrong thing?",
      "revId": "3c204f2fe98a93264dc2e11342ca6f7c8d1bc844",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1484e880_89d813f6",
        "filename": "ui/material/src/main/java/androidx/ui/material/Switch.kt",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-05-29T00:28:07Z",
      "side": 1,
      "message": "We still have to make decision around it. For now it nullable because null represents \"disabled\" state, like in Flutter. In general, there\u0027re two possibilities:\n\n1. Make it non-null and add `enabled: Boolean \u003d true` param. But they you have to pass something for onCheckedChange even when component is disabled (and you don\u0027t have this lambda sometimes), which sometimes can be inconvenient. We can add `val DefaultOnClickDisable \u003d {}` somewhere, but I\u0027m not sure if this is the right kotlin-y way.\n\n2. Make nullability represents enabled/disabled state of this component. This way you will always pass something non-null otherwise it\u0027s disabled. \n\nPersonally I like 1., because it seems inconvenient to type `onCheckedChange \u003d if (user.nonEmpty) doStuff() else null` in some cases, rather than typing `{}` rarely.\n\nHappy to chat more about it :)",
      "parentUuid": "af2bea3a_b5a6d83b",
      "revId": "3c204f2fe98a93264dc2e11342ca6f7c8d1bc844",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e3ebd7e_0d8ab7ad",
        "filename": "ui/material/src/main/java/androidx/ui/material/Switch.kt",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1493285
      },
      "writtenOn": "2019-05-29T00:24:39Z",
      "side": 1,
      "message": "should `onToggle` here just be `onCheckedChange`?  I feel like `Toggleable` is the thing that should be doing the negation of `value` and then passing that back up",
      "revId": "3c204f2fe98a93264dc2e11342ca6f7c8d1bc844",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fd24d15_f2eba136",
        "filename": "ui/material/src/main/java/androidx/ui/material/Switch.kt",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-05-29T00:48:34Z",
      "side": 1,
      "message": "Overall the answer is \"yes\", it should be onCheckedChange and it should require \"checked\" instead of \"value\", and be pretty much the same as new Switch API. For now it requires ToggleableState and it\u0027s a little bit harder to do. \n\nI will address all of the above on the follow-up CL when we will have our decision about this (Switch\u0027s) API, so I will be able to move forward",
      "parentUuid": "3e3ebd7e_0d8ab7ad",
      "revId": "3c204f2fe98a93264dc2e11342ca6f7c8d1bc844",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}