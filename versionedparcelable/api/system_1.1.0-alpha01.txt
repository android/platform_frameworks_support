// Signature format: 2.0
package androidx.versionedparcelable {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class CustomVersionedParcelable implements androidx.versionedparcelable.VersionedParcelable {
    ctor public CustomVersionedParcelable();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onPostParceling();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onPreParceling(boolean);
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public @interface NonParcelField {
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target(java.lang.annotation.ElementType.FIELD) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public @interface ParcelField {
    method public abstract String defaultValue() default "";
    method public abstract int value();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public class ParcelImpl implements android.os.Parcelable {
    ctor public ParcelImpl(androidx.versionedparcelable.VersionedParcelable!);
    ctor protected ParcelImpl(android.os.Parcel!);
    method public <T extends androidx.versionedparcelable.VersionedParcelable> T! getVersionedParcel();
    field public static final android.os.Parcelable.Creator<androidx.versionedparcelable.ParcelImpl>! CREATOR;
    field private final androidx.versionedparcelable.VersionedParcelable! mParcel;
  }

  public class ParcelUtils {
    ctor private ParcelUtils();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static <T extends androidx.versionedparcelable.VersionedParcelable> T! fromInputStream(java.io.InputStream!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static <T extends androidx.versionedparcelable.VersionedParcelable> T! fromParcelable(android.os.Parcelable!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void toOutputStream(androidx.versionedparcelable.VersionedParcelable!, java.io.OutputStream!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.os.Parcelable! toParcelable(androidx.versionedparcelable.VersionedParcelable!);
    field private static final String INNER_BUNDLE_KEY = "a";
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract class VersionedParcel {
    ctor public VersionedParcel(androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.Class>!);
    method protected abstract void closeField();
    method private Exception! createException(int, String!);
    method protected abstract androidx.versionedparcelable.VersionedParcel! createSubParcel();
    method private Class! findParcelClass(Class<? extends androidx.versionedparcelable.VersionedParcelable>!) throws java.lang.ClassNotFoundException;
    method private java.lang.reflect.Method! getReadMethod(String!) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.NoSuchMethodException;
    method protected static Throwable getRootCause(Throwable);
    method private <T> int getType(T!);
    method private java.lang.reflect.Method! getWriteMethod(Class!) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.NoSuchMethodException;
    method public boolean isStream();
    method public <T> T[]! readArray(T[]!, int);
    method protected <T> T[]! readArray(T[]!);
    method protected abstract boolean readBoolean();
    method public boolean readBoolean(boolean, int);
    method public boolean[]! readBooleanArray(boolean[]!, int);
    method protected boolean[]! readBooleanArray();
    method protected abstract android.os.Bundle! readBundle();
    method public android.os.Bundle! readBundle(android.os.Bundle!, int);
    method public byte readByte(byte, int);
    method protected abstract byte[]! readByteArray();
    method public byte[]! readByteArray(byte[]!, int);
    method public char[]! readCharArray(char[]!, int);
    method protected abstract CharSequence! readCharSequence();
    method public CharSequence! readCharSequence(CharSequence!, int);
    method private <T, S extends java.util.Collection<T>> S! readCollection(S!);
    method protected abstract double readDouble();
    method public double readDouble(double, int);
    method public double[]! readDoubleArray(double[]!, int);
    method protected double[]! readDoubleArray();
    method public Exception! readException(Exception!, int);
    method private Exception! readException(int, String!);
    method private int readExceptionCode();
    method protected abstract boolean readField(int);
    method protected abstract float readFloat();
    method public float readFloat(float, int);
    method public float[]! readFloatArray(float[]!, int);
    method protected float[]! readFloatArray();
    method protected <T extends androidx.versionedparcelable.VersionedParcelable> T! readFromParcel(String!, androidx.versionedparcelable.VersionedParcel!);
    method protected abstract int readInt();
    method public int readInt(int, int);
    method public int[]! readIntArray(int[]!, int);
    method protected int[]! readIntArray();
    method public <T> java.util.List<T>! readList(java.util.List<T>!, int);
    method protected abstract long readLong();
    method public long readLong(long, int);
    method public long[]! readLongArray(long[]!, int);
    method protected long[]! readLongArray();
    method public <K, V> java.util.Map<K,V>! readMap(java.util.Map<K,V>!, int);
    method protected abstract <T extends android.os.Parcelable> T! readParcelable();
    method public <T extends android.os.Parcelable> T! readParcelable(T!, int);
    method protected java.io.Serializable! readSerializable();
    method public <T> java.util.Set<T>! readSet(java.util.Set<T>!, int);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.LOLLIPOP) public android.util.Size! readSize(android.util.Size!, int);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.LOLLIPOP) public android.util.SizeF! readSizeF(android.util.SizeF!, int);
    method public android.util.SparseBooleanArray! readSparseBooleanArray(android.util.SparseBooleanArray!, int);
    method protected abstract String! readString();
    method public String! readString(String!, int);
    method protected abstract android.os.IBinder! readStrongBinder();
    method public android.os.IBinder! readStrongBinder(android.os.IBinder!, int);
    method public <T extends androidx.versionedparcelable.VersionedParcelable> T! readVersionedParcelable(T!, int);
    method protected <T extends androidx.versionedparcelable.VersionedParcelable> T! readVersionedParcelable();
    method protected abstract void setOutputField(int);
    method public void setSerializationFlags(boolean, boolean);
    method public <T> void writeArray(T[]!, int);
    method protected <T> void writeArray(T[]!);
    method protected abstract void writeBoolean(boolean);
    method public void writeBoolean(boolean, int);
    method public void writeBooleanArray(boolean[]!, int);
    method protected void writeBooleanArray(boolean[]!);
    method protected abstract void writeBundle(android.os.Bundle!);
    method public void writeBundle(android.os.Bundle!, int);
    method public void writeByte(byte, int);
    method protected abstract void writeByteArray(byte[]!);
    method protected abstract void writeByteArray(byte[]!, int, int);
    method public void writeByteArray(byte[]!, int);
    method public void writeByteArray(byte[]!, int, int, int);
    method public void writeCharArray(char[]!, int);
    method protected abstract void writeCharSequence(CharSequence!);
    method public void writeCharSequence(CharSequence!, int);
    method private <T> void writeCollection(java.util.Collection<T>!, int);
    method private <T> void writeCollection(java.util.Collection<T>!);
    method protected abstract void writeDouble(double);
    method public void writeDouble(double, int);
    method public void writeDoubleArray(double[]!, int);
    method protected void writeDoubleArray(double[]!);
    method public void writeException(Exception!, int);
    method protected abstract void writeFloat(float);
    method public void writeFloat(float, int);
    method public void writeFloatArray(float[]!, int);
    method protected void writeFloatArray(float[]!);
    method protected abstract void writeInt(int);
    method public void writeInt(int, int);
    method public void writeIntArray(int[]!, int);
    method protected void writeIntArray(int[]!);
    method public <T> void writeList(java.util.List<T>!, int);
    method protected abstract void writeLong(long);
    method public void writeLong(long, int);
    method public void writeLongArray(long[]!, int);
    method protected void writeLongArray(long[]!);
    method public <K, V> void writeMap(java.util.Map<K,V>!, int);
    method protected void writeNoException();
    method protected abstract void writeParcelable(android.os.Parcelable!);
    method public void writeParcelable(android.os.Parcelable!, int);
    method public void writeSerializable(java.io.Serializable!, int);
    method private void writeSerializable(java.io.Serializable!);
    method public <T> void writeSet(java.util.Set<T>!, int);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.LOLLIPOP) public void writeSize(android.util.Size!, int);
    method @RequiresApi(api=android.os.Build.VERSION_CODES.LOLLIPOP) public void writeSizeF(android.util.SizeF!, int);
    method public void writeSparseBooleanArray(android.util.SparseBooleanArray!, int);
    method protected abstract void writeString(String!);
    method public void writeString(String!, int);
    method protected abstract void writeStrongBinder(android.os.IBinder!);
    method public void writeStrongBinder(android.os.IBinder!, int);
    method protected abstract void writeStrongInterface(android.os.IInterface!);
    method public void writeStrongInterface(android.os.IInterface!, int);
    method protected <T extends androidx.versionedparcelable.VersionedParcelable> void writeToParcel(T!, androidx.versionedparcelable.VersionedParcel!);
    method public void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable!, int);
    method protected void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable!);
    method private void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable!);
    field private static final int EX_BAD_PARCELABLE = -2; // 0xfffffffe
    field private static final int EX_ILLEGAL_ARGUMENT = -3; // 0xfffffffd
    field private static final int EX_ILLEGAL_STATE = -5; // 0xfffffffb
    field private static final int EX_NETWORK_MAIN_THREAD = -6; // 0xfffffffa
    field private static final int EX_NULL_POINTER = -4; // 0xfffffffc
    field private static final int EX_PARCELABLE = -9; // 0xfffffff7
    field private static final int EX_SECURITY = -1; // 0xffffffff
    field private static final int EX_UNSUPPORTED_OPERATION = -7; // 0xfffffff9
    field private static final String TAG = "VersionedParcel";
    field private static final int TYPE_BINDER = 5; // 0x5
    field private static final int TYPE_FLOAT = 8; // 0x8
    field private static final int TYPE_INTEGER = 7; // 0x7
    field private static final int TYPE_PARCELABLE = 2; // 0x2
    field private static final int TYPE_SERIALIZABLE = 3; // 0x3
    field private static final int TYPE_STRING = 4; // 0x4
    field private static final int TYPE_VERSIONED_PARCELABLE = 1; // 0x1
    field protected final androidx.collection.ArrayMap<java.lang.String,java.lang.Class>! mParcelizerCache;
    field protected final androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>! mReadCache;
    field protected final androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>! mWriteCache;
  }

  public static class VersionedParcel.ParcelException extends java.lang.RuntimeException {
    ctor public VersionedParcel.ParcelException(Throwable!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) class VersionedParcelParcel extends androidx.versionedparcelable.VersionedParcel {
    ctor VersionedParcelParcel(android.os.Parcel!);
    ctor private VersionedParcelParcel(android.os.Parcel!, int, int, String!, androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.Class>!);
    method public void closeField();
    method protected androidx.versionedparcelable.VersionedParcel! createSubParcel();
    method public boolean readBoolean();
    method public android.os.Bundle! readBundle();
    method public byte[]! readByteArray();
    method protected CharSequence! readCharSequence();
    method public double readDouble();
    method public boolean readField(int);
    method public float readFloat();
    method public int readInt();
    method public long readLong();
    method public <T extends android.os.Parcelable> T! readParcelable();
    method public String! readString();
    method public android.os.IBinder! readStrongBinder();
    method public void setOutputField(int);
    method public void writeBoolean(boolean);
    method public void writeBundle(android.os.Bundle!);
    method public void writeByteArray(byte[]!);
    method public void writeByteArray(byte[]!, int, int);
    method protected void writeCharSequence(CharSequence!);
    method public void writeDouble(double);
    method public void writeFloat(float);
    method public void writeInt(int);
    method public void writeLong(long);
    method public void writeParcelable(android.os.Parcelable!);
    method public void writeString(String!);
    method public void writeStrongBinder(android.os.IBinder!);
    method public void writeStrongInterface(android.os.IInterface!);
    field private static final boolean DEBUG = false;
    field private static final String TAG = "VersionedParcelParcel";
    field private int mCurrentField;
    field private final int mEnd;
    field private int mFieldId;
    field private int mNextRead;
    field private final int mOffset;
    field private final android.os.Parcel! mParcel;
    field private final android.util.SparseIntArray! mPositionLookup;
    field private final String! mPrefix;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) class VersionedParcelStream extends androidx.versionedparcelable.VersionedParcel {
    ctor public VersionedParcelStream(java.io.InputStream!, java.io.OutputStream!);
    ctor private VersionedParcelStream(java.io.InputStream!, java.io.OutputStream!, androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.reflect.Method>!, androidx.collection.ArrayMap<java.lang.String,java.lang.Class>!);
    method public void closeField();
    method protected androidx.versionedparcelable.VersionedParcel! createSubParcel();
    method public boolean isStream();
    method public boolean readBoolean();
    method public android.os.Bundle! readBundle();
    method public byte[]! readByteArray();
    method protected CharSequence! readCharSequence();
    method public double readDouble();
    method public boolean readField(int);
    method public float readFloat();
    method public int readInt();
    method public long readLong();
    method private void readObject(int, String!, android.os.Bundle!);
    method public <T extends android.os.Parcelable> T! readParcelable();
    method public String! readString();
    method public android.os.IBinder! readStrongBinder();
    method public void setOutputField(int);
    method public void setSerializationFlags(boolean, boolean);
    method public void writeBoolean(boolean);
    method public void writeBundle(android.os.Bundle!);
    method public void writeByteArray(byte[]!);
    method public void writeByteArray(byte[]!, int, int);
    method protected void writeCharSequence(CharSequence!);
    method public void writeDouble(double);
    method public void writeFloat(float);
    method public void writeInt(int);
    method public void writeLong(long);
    method private void writeObject(Object!);
    method public void writeParcelable(android.os.Parcelable!);
    method public void writeString(String!);
    method public void writeStrongBinder(android.os.IBinder!);
    method public void writeStrongInterface(android.os.IInterface!);
    field private static final int TYPE_BOOLEAN = 5; // 0x5
    field private static final int TYPE_BOOLEAN_ARRAY = 6; // 0x6
    field private static final int TYPE_DOUBLE = 7; // 0x7
    field private static final int TYPE_DOUBLE_ARRAY = 8; // 0x8
    field private static final int TYPE_FLOAT = 13; // 0xd
    field private static final int TYPE_FLOAT_ARRAY = 14; // 0xe
    field private static final int TYPE_INT = 9; // 0x9
    field private static final int TYPE_INT_ARRAY = 10; // 0xa
    field private static final int TYPE_LONG = 11; // 0xb
    field private static final int TYPE_LONG_ARRAY = 12; // 0xc
    field private static final int TYPE_NULL = 0; // 0x0
    field private static final int TYPE_STRING = 3; // 0x3
    field private static final int TYPE_STRING_ARRAY = 4; // 0x4
    field private static final int TYPE_SUB_BUNDLE = 1; // 0x1
    field private static final int TYPE_SUB_PERSISTABLE_BUNDLE = 2; // 0x2
    field private static final java.nio.charset.Charset! UTF_16;
    field int mCount;
    field private java.io.DataInputStream! mCurrentInput;
    field private java.io.DataOutputStream! mCurrentOutput;
    field private androidx.versionedparcelable.VersionedParcelStream.FieldBuffer! mFieldBuffer;
    field private int mFieldId;
    field int mFieldSize;
    field private boolean mIgnoreParcelables;
    field private final java.io.DataInputStream! mMasterInput;
    field private final java.io.DataOutputStream! mMasterOutput;
  }

  private static class VersionedParcelStream.FieldBuffer {
    ctor VersionedParcelStream.FieldBuffer(int, java.io.DataOutputStream!);
    method void flushField() throws java.io.IOException;
    field final java.io.DataOutputStream! mDataStream;
    field private final int mFieldId;
    field final java.io.ByteArrayOutputStream! mOutput;
    field private final java.io.DataOutputStream! mTarget;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public @interface VersionedParcelize {
    method public abstract boolean allowSerialization() default false;
    method public abstract int[] deprecatedIds() default {};
    method public abstract Class factory() default void.class;
    method public abstract boolean ignoreParcelables() default false;
    method public abstract boolean isCustom() default false;
    method public abstract String jetifyAs() default "";
  }

}

