package androidx.animation {

  public class AccelerateDecelerateInterpolator implements androidx.animation.TimeInterpolator {
    ctor public AccelerateDecelerateInterpolator();
    ctor public AccelerateDecelerateInterpolator(android.content.Context, android.util.AttributeSet);
    method public float getInterpolation(float);
  }

  public abstract class Animator implements java.lang.Cloneable {
    ctor public Animator();
    method public void addListener(androidx.animation.Animator.AnimatorListener);
    method public void addPauseListener(androidx.animation.Animator.AnimatorPauseListener);
    method public void cancel();
    method public androidx.animation.Animator clone();
    method public void end();
    method public abstract long getDuration();
    method public androidx.animation.TimeInterpolator getInterpolator();
    method public java.util.ArrayList<androidx.animation.Animator.AnimatorListener> getListeners();
    method public abstract long getStartDelay();
    method public long getTotalDuration();
    method public boolean isPaused();
    method public abstract boolean isRunning();
    method public boolean isStarted();
    method public void pause();
    method public void removeAllListeners();
    method public void removeListener(androidx.animation.Animator.AnimatorListener);
    method public void removePauseListener(androidx.animation.Animator.AnimatorPauseListener);
    method public void resume();
    method public abstract androidx.animation.Animator setDuration(long);
    method public abstract void setInterpolator(androidx.animation.TimeInterpolator);
    method public abstract void setStartDelay(long);
    method public void setTarget(java.lang.Object);
    method public void setupEndValues();
    method public void setupStartValues();
    method public void start();
    field public static final long DURATION_INFINITE = -1L; // 0xffffffffffffffffL
  }

  public static abstract class Animator.AnimatorListener {
    ctor public Animator.AnimatorListener();
    method public abstract void onAnimationCancel(androidx.animation.Animator);
    method public void onAnimationEnd(androidx.animation.Animator, boolean);
    method public abstract void onAnimationEnd(androidx.animation.Animator);
    method public abstract void onAnimationRepeat(androidx.animation.Animator);
    method public void onAnimationStart(androidx.animation.Animator, boolean);
    method public abstract void onAnimationStart(androidx.animation.Animator);
  }

  public static abstract interface Animator.AnimatorPauseListener {
    method public abstract void onAnimationPause(androidx.animation.Animator);
    method public abstract void onAnimationResume(androidx.animation.Animator);
  }

  public abstract class AnimatorListenerAdapter extends androidx.animation.Animator.AnimatorListener implements androidx.animation.Animator.AnimatorPauseListener {
    ctor public AnimatorListenerAdapter();
    method public void onAnimationCancel(androidx.animation.Animator);
    method public void onAnimationEnd(androidx.animation.Animator);
    method public void onAnimationPause(androidx.animation.Animator);
    method public void onAnimationRepeat(androidx.animation.Animator);
    method public void onAnimationResume(androidx.animation.Animator);
    method public void onAnimationStart(androidx.animation.Animator);
  }

  public final class AnimatorSet extends androidx.animation.Animator {
    ctor public AnimatorSet();
    method public androidx.animation.AnimatorSet clone();
    method public java.util.ArrayList<androidx.animation.Animator> getChildAnimations();
    method public long getCurrentPlayTime();
    method public long getDuration();
    method public long getStartDelay();
    method public boolean isRunning();
    method public androidx.animation.AnimatorSet.Builder play(androidx.animation.Animator);
    method public void playSequentially(androidx.animation.Animator...);
    method public void playSequentially(java.util.List<androidx.animation.Animator>);
    method public void playTogether(androidx.animation.Animator...);
    method public void playTogether(java.util.Collection<androidx.animation.Animator>);
    method public void reverse();
    method public void setCurrentPlayTime(long);
    method public androidx.animation.AnimatorSet setDuration(long);
    method public void setInterpolator(androidx.animation.TimeInterpolator);
    method public void setStartDelay(long);
  }

  public class AnimatorSet.Builder {
    method public androidx.animation.AnimatorSet.Builder after(androidx.animation.Animator);
    method public androidx.animation.AnimatorSet.Builder after(long);
    method public androidx.animation.AnimatorSet.Builder before(androidx.animation.Animator);
    method public androidx.animation.AnimatorSet.Builder with(androidx.animation.Animator);
  }

  public class ArgbEvaluator implements androidx.animation.TypeEvaluator {
    ctor public ArgbEvaluator();
    method public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
  }

  public abstract class BidirectionalTypeConverter<T, V> extends androidx.animation.TypeConverter {
    ctor public BidirectionalTypeConverter(java.lang.Class<T>, java.lang.Class<V>);
    method public abstract T convertBack(V);
    method public androidx.animation.BidirectionalTypeConverter<V, T> invert();
  }

  public class FloatArrayEvaluator implements androidx.animation.TypeEvaluator {
    ctor public FloatArrayEvaluator();
    ctor public FloatArrayEvaluator(float[]);
    method public float[] evaluate(float, float[], float[]);
  }

  public class FloatEvaluator implements androidx.animation.TypeEvaluator {
    ctor public FloatEvaluator();
    method public java.lang.Float evaluate(float, java.lang.Number, java.lang.Number);
  }

  public class IntArrayEvaluator implements androidx.animation.TypeEvaluator {
    ctor public IntArrayEvaluator();
    ctor public IntArrayEvaluator(int[]);
    method public int[] evaluate(float, int[], int[]);
  }

  public class IntEvaluator implements androidx.animation.TypeEvaluator {
    ctor public IntEvaluator();
    method public java.lang.Integer evaluate(float, java.lang.Integer, java.lang.Integer);
  }

  public abstract class Keyframe implements java.lang.Cloneable {
    ctor public Keyframe();
    method public abstract androidx.animation.Keyframe clone();
    method public float getFraction();
    method public androidx.animation.TimeInterpolator getInterpolator();
    method public java.lang.Class getType();
    method public abstract java.lang.Object getValue();
    method public boolean hasValue();
    method public static androidx.animation.Keyframe ofFloat(float, float);
    method public static androidx.animation.Keyframe ofFloat(float);
    method public static androidx.animation.Keyframe ofInt(float, int);
    method public static androidx.animation.Keyframe ofInt(float);
    method public static androidx.animation.Keyframe ofObject(float, java.lang.Object);
    method public static androidx.animation.Keyframe ofObject(float);
    method public void setFraction(float);
    method public void setInterpolator(androidx.animation.TimeInterpolator);
    method public abstract void setValue(java.lang.Object);
  }

  public class LinearInterpolator implements androidx.animation.TimeInterpolator {
    ctor public LinearInterpolator();
    ctor public LinearInterpolator(android.content.Context, android.util.AttributeSet);
    method public float getInterpolation(float);
  }

  public final class ObjectAnimator extends androidx.animation.ValueAnimator {
    ctor public ObjectAnimator();
    method public androidx.animation.ObjectAnimator clone();
    method public java.lang.String getPropertyName();
    method public java.lang.Object getTarget();
    method public static androidx.animation.ObjectAnimator ofArgb(java.lang.Object, java.lang.String, int...);
    method public static <T> androidx.animation.ObjectAnimator ofArgb(T, android.util.Property<T, java.lang.Integer>, int...);
    method public static androidx.animation.ObjectAnimator ofFloat(java.lang.Object, java.lang.String, float...);
    method public static androidx.animation.ObjectAnimator ofFloat(java.lang.Object, java.lang.String, java.lang.String, android.graphics.Path);
    method public static <T> androidx.animation.ObjectAnimator ofFloat(T, android.util.Property<T, java.lang.Float>, float...);
    method public static <T> androidx.animation.ObjectAnimator ofFloat(T, android.util.Property<T, java.lang.Float>, android.util.Property<T, java.lang.Float>, android.graphics.Path);
    method public static androidx.animation.ObjectAnimator ofInt(java.lang.Object, java.lang.String, int...);
    method public static androidx.animation.ObjectAnimator ofInt(java.lang.Object, java.lang.String, java.lang.String, android.graphics.Path);
    method public static <T> androidx.animation.ObjectAnimator ofInt(T, android.util.Property<T, java.lang.Integer>, int...);
    method public static <T> androidx.animation.ObjectAnimator ofInt(T, android.util.Property<T, java.lang.Integer>, android.util.Property<T, java.lang.Integer>, android.graphics.Path);
    method public static androidx.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, float[][]);
    method public static androidx.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, android.graphics.Path);
    method public static <T> androidx.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, androidx.animation.TypeConverter<T, float[]>, androidx.animation.TypeEvaluator<T>, T...);
    method public static androidx.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, int[][]);
    method public static androidx.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, android.graphics.Path);
    method public static <T> androidx.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, androidx.animation.TypeConverter<T, int[]>, androidx.animation.TypeEvaluator<T>, T...);
    method public static androidx.animation.ObjectAnimator ofObject(java.lang.Object, java.lang.String, androidx.animation.TypeEvaluator, java.lang.Object...);
    method public static androidx.animation.ObjectAnimator ofObject(java.lang.Object, java.lang.String, androidx.animation.TypeConverter<android.graphics.PointF, ?>, android.graphics.Path);
    method public static <T, V> androidx.animation.ObjectAnimator ofObject(T, android.util.Property<T, V>, androidx.animation.TypeEvaluator<V>, V...);
    method public static <T, V, P> androidx.animation.ObjectAnimator ofObject(T, android.util.Property<T, P>, androidx.animation.TypeConverter<V, P>, androidx.animation.TypeEvaluator<V>, V...);
    method public static <T, V> androidx.animation.ObjectAnimator ofObject(T, android.util.Property<T, V>, androidx.animation.TypeConverter<android.graphics.PointF, V>, android.graphics.Path);
    method public static androidx.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object, androidx.animation.PropertyValuesHolder...);
    method public void setAutoCancel(boolean);
    method public androidx.animation.ObjectAnimator setDuration(long);
    method public void setProperty(android.util.Property);
    method public void setPropertyName(java.lang.String);
  }

  public class PropertyValuesHolder implements java.lang.Cloneable {
    method public androidx.animation.PropertyValuesHolder clone();
    method public java.lang.String getPropertyName();
    method public static androidx.animation.PropertyValuesHolder ofFloat(java.lang.String, float...);
    method public static androidx.animation.PropertyValuesHolder ofFloat(android.util.Property<?, java.lang.Float>, float...);
    method public static androidx.animation.PropertyValuesHolder ofInt(java.lang.String, int...);
    method public static androidx.animation.PropertyValuesHolder ofInt(android.util.Property<?, java.lang.Integer>, int...);
    method public static androidx.animation.PropertyValuesHolder ofKeyframe(java.lang.String, androidx.animation.Keyframe...);
    method public static androidx.animation.PropertyValuesHolder ofKeyframe(android.util.Property, androidx.animation.Keyframe...);
    method public static androidx.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, float[][]);
    method public static androidx.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, android.graphics.Path);
    method public static <V> androidx.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, androidx.animation.TypeConverter<V, float[]>, androidx.animation.TypeEvaluator<V>, V...);
    method public static <T> androidx.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, androidx.animation.TypeConverter<T, float[]>, androidx.animation.TypeEvaluator<T>, androidx.animation.Keyframe...);
    method public static androidx.animation.PropertyValuesHolder ofMultiInt(java.lang.String, int[][]);
    method public static androidx.animation.PropertyValuesHolder ofMultiInt(java.lang.String, android.graphics.Path);
    method public static <V> androidx.animation.PropertyValuesHolder ofMultiInt(java.lang.String, androidx.animation.TypeConverter<V, int[]>, androidx.animation.TypeEvaluator<V>, V...);
    method public static <T> androidx.animation.PropertyValuesHolder ofMultiInt(java.lang.String, androidx.animation.TypeConverter<T, int[]>, androidx.animation.TypeEvaluator<T>, androidx.animation.Keyframe...);
    method public static androidx.animation.PropertyValuesHolder ofObject(java.lang.String, androidx.animation.TypeEvaluator, java.lang.Object...);
    method public static androidx.animation.PropertyValuesHolder ofObject(java.lang.String, androidx.animation.TypeConverter<android.graphics.PointF, ?>, android.graphics.Path);
    method public static <V> androidx.animation.PropertyValuesHolder ofObject(android.util.Property, androidx.animation.TypeEvaluator<V>, V...);
    method public static <T, V> androidx.animation.PropertyValuesHolder ofObject(android.util.Property<?, V>, androidx.animation.TypeConverter<T, V>, androidx.animation.TypeEvaluator<T>, T...);
    method public static <V> androidx.animation.PropertyValuesHolder ofObject(android.util.Property<?, V>, androidx.animation.TypeConverter<android.graphics.PointF, V>, android.graphics.Path);
    method public void setConverter(androidx.animation.TypeConverter);
    method public void setEvaluator(androidx.animation.TypeEvaluator);
    method public void setFloatValues(float...);
    method public void setIntValues(int...);
    method public void setKeyframes(androidx.animation.Keyframe...);
    method public void setObjectValues(java.lang.Object...);
    method public void setProperty(android.util.Property);
    method public void setPropertyName(java.lang.String);
  }

  public class TimeAnimator extends androidx.animation.ValueAnimator {
    ctor public TimeAnimator();
    method public void setTimeListener(androidx.animation.TimeAnimator.TimeListener);
  }

  public static abstract interface TimeAnimator.TimeListener {
    method public abstract void onTimeUpdate(androidx.animation.TimeAnimator, long, long);
  }

  public abstract interface TimeInterpolator {
    method public abstract float getInterpolation(float);
  }

  public abstract class TypeConverter<T, V> {
    ctor public TypeConverter(java.lang.Class<T>, java.lang.Class<V>);
    method public abstract V convert(T);
  }

  public abstract interface TypeEvaluator<T> {
    method public abstract T evaluate(float, T, T);
  }

  public class ValueAnimator extends androidx.animation.Animator {
    ctor public ValueAnimator();
    method public void addUpdateListener(androidx.animation.ValueAnimator.AnimatorUpdateListener);
    method public static boolean areAnimatorsEnabled();
    method public androidx.animation.ValueAnimator clone();
    method public float getAnimatedFraction();
    method public java.lang.Object getAnimatedValue();
    method public java.lang.Object getAnimatedValue(java.lang.String);
    method public long getCurrentPlayTime();
    method public long getDuration();
    method public static long getFrameDelay();
    method public int getRepeatCount();
    method public int getRepeatMode();
    method public long getStartDelay();
    method public androidx.animation.PropertyValuesHolder[] getValues();
    method public boolean isRunning();
    method public static androidx.animation.ValueAnimator ofArgb(int...);
    method public static androidx.animation.ValueAnimator ofFloat(float...);
    method public static androidx.animation.ValueAnimator ofInt(int...);
    method public static androidx.animation.ValueAnimator ofObject(androidx.animation.TypeEvaluator, java.lang.Object...);
    method public static androidx.animation.ValueAnimator ofPropertyValuesHolder(androidx.animation.PropertyValuesHolder...);
    method public void removeAllUpdateListeners();
    method public void removeUpdateListener(androidx.animation.ValueAnimator.AnimatorUpdateListener);
    method public void reverse();
    method public void setCurrentFraction(float);
    method public void setCurrentPlayTime(long);
    method public androidx.animation.ValueAnimator setDuration(long);
    method public void setEvaluator(androidx.animation.TypeEvaluator);
    method public void setFloatValues(float...);
    method public static void setFrameDelay(long);
    method public void setIntValues(int...);
    method public void setInterpolator(androidx.animation.TimeInterpolator);
    method public void setObjectValues(java.lang.Object...);
    method public void setRepeatCount(int);
    method public void setRepeatMode(int);
    method public void setStartDelay(long);
    method public void setValues(androidx.animation.PropertyValuesHolder...);
    field public static final int INFINITE = -1; // 0xffffffff
    field public static final int RESTART = 1; // 0x1
    field public static final int REVERSE = 2; // 0x2
  }

  public static abstract interface ValueAnimator.AnimatorUpdateListener {
    method public abstract void onAnimationUpdate(androidx.animation.ValueAnimator);
  }

}

