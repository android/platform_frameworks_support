{
  "comments": [
    {
      "key": {
        "uuid": "53eab705_6f6fac72",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-10-08T16:22:34Z",
      "side": 1,
      "message": "If you want to avoid the null check you can set this to `Disposables.disposed()` by default.",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b91954c0_895513cd",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-08T16:49:23Z",
      "side": 1,
      "message": "It looks like it\u0027s accessed by multiple threads too; from onStartWork on the main thread as well as the background executor specified by the cancel listener. `volatile` and starting it as `Disposables.disposed()` would do the trick here, or if you want to drop the reference to the disposable immediately on cancel you could do the AtomicReference compareAndSet -\u003e getAndSet dance from null -\u003e real value -\u003e private disposed sentinel",
      "parentUuid": "53eab705_6f6fac72",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73f20c74_5d4a69e3",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-08T23:59:07Z",
      "side": 1,
      "message": "i don\u0027t think i need any volatile here since calling disposable multiple times has no effect.\nEach call to this always localize the variable (even though we don\u0027t really ever set it to null).\n\nAbout Disposables.disposed(), i think it is nice to avoid the null check but it is a bit confusing to have a disposable w/o starting the work so I\u0027d rather keep this nullable.",
      "parentUuid": "b91954c0_895513cd",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eda1cd2_e8b3dc17",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-08T16:49:23Z",
      "side": 1,
      "message": "For cancellation you probably want to do it immediately, and dispose is always thread-safe. This should probably be a direct executor, e.g. { it.run() }",
      "range": {
        "startLine": 85,
        "startChar": 49,
        "endLine": 85,
        "endChar": 72
      },
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9b6355d_c02f244f",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-08T23:59:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4eda1cd2_e8b3dc17",
      "range": {
        "startLine": 85,
        "startChar": 49,
        "endLine": 85,
        "endChar": 72
      },
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14b84281_8b1af61f",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-10-08T16:22:34Z",
      "side": 1,
      "message": "Can all this manual future stuff be replaced with `toFuture()`? It supports propagation of the value and exception and propagates cancelation signals.",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30fe6b21_70bd0f47",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-08T16:49:23Z",
      "side": 1,
      "message": "That gives a Future\u003cT\u003e not a ListenableFuture\u003cT\u003e.",
      "parentUuid": "14b84281_8b1af61f",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a8a0443_618ecf4a",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-08T23:59:07Z",
      "side": 1,
      "message": "i think it probably makes sense to have a generic one for androidX to use since we keep creating such helpers for different libraries.\nfor now, i\u0027ll keep this as is.",
      "parentUuid": "30fe6b21_70bd0f47",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08263352_bf6c8fd6",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1232209
      },
      "writtenOn": "2018-10-08T16:22:34Z",
      "side": 1,
      "message": "I\u0027m a bit hesitant about this method name because it shouldn\u0027t actually *do* anything. A single is a lazy type so it\u0027s creating the blueprints for work but not actually doing anything. Maybe `createWork` or `getWork` or something?",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fec80027_2a6891cb",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1014545
      },
      "writtenOn": "2018-10-08T16:49:23Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "08263352_bf6c8fd6",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e696b139_5d90cbc1",
        "filename": "work/workmanager-rxjava2/src/main/java/androidx/work/RxWorker.java",
        "patchSetId": 3
      },
      "lineNbr": 117,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-08T23:59:07Z",
      "side": 1,
      "message": "updated to createWork, sumir@, wdyt ?",
      "parentUuid": "fec80027_2a6891cb",
      "revId": "9770a80398183e3d0f0a5b8a78611f3ad0351df6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}