{
  "comments": [
    {
      "key": {
        "uuid": "b33cca69_d2cb5937",
        "filename": "room/compiler/src/main/kotlin/androidx/room/solver/TypeAdapterStore.kt",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-01-18T23:20:52Z",
      "side": 1,
      "message": "should we do it here too?",
      "range": {
        "startLine": 399,
        "startChar": 48,
        "endLine": 399,
        "endChar": 55
      },
      "revId": "b2fbf27c3376b4f36a38b03f2ea2c6a1a5f67241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33a5d8f7_48cebba4",
        "filename": "room/compiler/src/main/kotlin/androidx/room/solver/TypeAdapterStore.kt",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-01-18T23:49:34Z",
      "side": 1,
      "message": "Not needed for Optional\u003cT\u003e, the reason this happens with List is because when using List in Kotlin you end up using kotlin.collections.List and not Java\u0027s List and the type arg in kotlin.collections is List\u003cout T\u003e (notice the out modifier, making it covariant) which in Java is represented by List\u003c? extend T\u003e.",
      "parentUuid": "b33cca69_d2cb5937",
      "range": {
        "startLine": 399,
        "startChar": 48,
        "endLine": 399,
        "endChar": 55
      },
      "revId": "b2fbf27c3376b4f36a38b03f2ea2c6a1a5f67241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f9ee639_3d2fa8b6",
        "filename": "room/compiler/src/main/kotlin/androidx/room/solver/TypeAdapterStore.kt",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-01-19T03:48:47Z",
      "side": 1,
      "message": "but what if developer put `Optional\u003c? extends Foo\u003e` ?\nthat should work as well.",
      "parentUuid": "33a5d8f7_48cebba4",
      "range": {
        "startLine": 399,
        "startChar": 48,
        "endLine": 399,
        "endChar": 55
      },
      "revId": "b2fbf27c3376b4f36a38b03f2ea2c6a1a5f67241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d2428b1_aead590e",
        "filename": "room/compiler/src/main/kotlin/androidx/room/solver/TypeAdapterStore.kt",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-01-23T00:47:02Z",
      "side": 1,
      "message": "That doesn\u0027t work right now, but we should think if it should really work... We can make it work by extending the bounds here too, it would be valid Java if the return type is Optional\u003c? extends Foo\u003e and we return Optional\u003cUser\u003e but there is no meaning in declaring the type arg \u003c? extends Foo\u003e when there is no way that Room would return something like Optional\u003cSubUser\u003e where SubUser extends User. Since there isn\u0027t any benefit in having those usages of generics for this I think it might be best to always ask for a more concrete declaration. What do you think? Extending the bounds here would be pretty trivial by the way its a question of \"do we allow it?\".",
      "parentUuid": "4f9ee639_3d2fa8b6",
      "range": {
        "startLine": 399,
        "startChar": 48,
        "endLine": 399,
        "endChar": 55
      },
      "revId": "b2fbf27c3376b4f36a38b03f2ea2c6a1a5f67241",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}