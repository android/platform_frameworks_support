{
  "comments": [
    {
      "key": {
        "uuid": "d5d2a411_b7088d47",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "I think here you\u0027ve changed the use case. this was trying to target the simplest use case of a top app bar, where you just have a title and some MenuItems (which are still to be designed in the new system). I don\u0027t think the nav icon belongs in the level of api that this was, or Text as a slot, as per what we chatted about this morning. To customize the nav icon, I think you need to go down to the component below this one.",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23dae829_13f7a14f",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "The only reason for this overload and the one in BottomAppBar is to remove the generic parameter - without these overloads if you want a Top/BottomAppBar without any actions, it gets messy as you need to still specify a type, as this whole function is typed on the type of data in the list. For example, if you just want a TopAppBar with a title, and no actions, without this overload it would become:\n\nTopAppBar\u003cNothing\u003e(title \u003d { Text(\"Default\") })\n\n(or \u003cAny\u003e or any other type)\n\nWhich to me seems really unfortunate, and I\u0027m not aware of a nice way of avoiding this, other than a separate overload. This is less of a \u0027text and navigation icon\u0027 AppBar and more of a \u0027I don\u0027t have any actions\u0027 AppBar if that makes sense :)",
      "parentUuid": "d5d2a411_b7088d47",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac2b1cae_f1432d23",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T14:14:00Z",
      "side": 1,
      "message": "I think then you\u0027ve removed the initial use case this was covering, which is the non-slots beginner developer. For that one it is fine to assume the shape of data the items are (string+icon in some way) and assume the title is a string. showing/hiding the nav icon may be something we figure out automatically further down the line based on whether there is a nav drawer or not.\n\nfor the case covered here, would it be better to make BaseTopAppBar public and therefore if you have no actions and want something more custom for the title you can fall down to that level, where the end content is just a lambda that can be empty?\n\nso the layers become\n1. Beginner API with String and action data\n2. Slot API with actions as T\n3. Slot API that knows nothing about actions",
      "parentUuid": "23dae829_13f7a14f",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6a769c6_40c68e14",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T15:11:28Z",
      "side": 1,
      "message": "I think the part that complicates this API is that all these actions need onClick as well - so if we wanted a \u0027simpler\u0027 API where we enforce types, we would have to expose something like List\u003cActionData\u003e, where ActionData has a param for text:String, icon: Image, onClick: () -\u003e Unit. The same applies for navigation icon, we would need to expose both an icon and an onclick - this to me seems more complex than the \u003cT\u003e api.\n\nThe other concern I have is that I don\u0027t think it makes sense to mix slots and simple params, if we could have a simple API like Tab, where you just pass a String and an Icon, I think it makes sense to accept a String, but in this case since I think it makes more sense to accept lambdas for icons, to me it seems strange to write something like:\n\nAppBar(title \u003d \"Hello\", button \u003d { NavigationIcon(...) })",
      "parentUuid": "ac2b1cae_f1432d23",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1f04b2_5f0207d6",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T15:34:09Z",
      "side": 1,
      "message": "I definitely agree that mixing slots and params is a bad idea, and we should just do one or the other for each option.",
      "parentUuid": "a6a769c6_40c68e14",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3adba9ee_18de73ff",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-07-08T11:58:23Z",
      "side": 1,
      "message": "I though it could be simplified if we just make AppBarActions public. But I see it is not as simple as we would then need to pass actionsToDisplay param in some way, similar how it done in BottomAppBar, like actions: @Composable() (actionsToDisplay) -\u003e Unit.",
      "parentUuid": "3f1f04b2_5f0207d6",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eef0d88_c4cee9be",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-08T12:49:59Z",
      "side": 1,
      "message": "The main reason for the current API is that in the future we will show the other items in a menu, providing a lambda that allows building the menu. This makes the AppBar resilient to FAB position changes / orientation changes / window size changes, where the max number of items could change. I think it\u0027s fine to abstract these away, although in the future maybe it would be nice to expose a simple app bar actions that just displays the items in a row, and doesn\u0027t have a max number to make it easier to jump to using the lower level API.",
      "parentUuid": "3adba9ee_18de73ff",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 0
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26965ec0_a26e12e7",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "I find this an interesting approach, seems to provide a lot of flexibility. I think there is a common \"data\" class that appears in things like this, buttons and tabs that is text+icon combos, but I like that you leave the door open for any other kind of structure",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 23
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c69ae6e_5f9635e1",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "This was originally Matvei\u0027s suggestion, I really like it because even in the case of \u0027text\u0027, it\u0027s still bad for us to enforce a specific type of representation. Developers could choose to represent text as a String, a i18TextResource, or a MyCustomText, and there aren\u0027t really any advantages from our side to enforce these choices, it just allows for a more flexible API :)",
      "parentUuid": "26965ec0_a26e12e7",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 23
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c490ce_7a2a32f1",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T14:14:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8c69ae6e_5f9635e1",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 23
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b395bd4d_bd592b2f",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "rename",
      "range": {
        "startLine": 84,
        "startChar": 7,
        "endLine": 84,
        "endChar": 16
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6722b961_ffe7db5d",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "interesting how you changed the names here, these were from material params, which I know do not fully agree with the public Material spec site but this seems like a 3rd set of names? let\u0027s stick with either public spec or Material params and work with Farheen to get those unified",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 16
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7101e7a9_a4f81538",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "Thanks for the context! My understanding was that this \u0027slotted\u0027 API is a base component that doesn\u0027t have opinions on content, it just provides the slots where content can be inserted. In which case I thought that specifying exactly what should be placed in the start/end content is unnecessarily restrictive, and can be misleading. This is similar to what we have for components like FloatingActionButton, where we have overloads with opinionated content areas like \u0027text\u0027 and \u0027icon\u0027, and then a more generic one like \u0027children\u0027. To me this is the second one, where we just have an AppBar with some slots for \u0027children\u0027 - happy to revert this but I was just trying to align more with our \u0027base\u0027 layer components",
      "parentUuid": "6722b961_ffe7db5d",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 16
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3087ccb_0ec25e97",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T14:14:00Z",
      "side": 1,
      "message": "yup I understand your approach from above now and then this is fine for this layer, but try and clarify the other 2 layers I mention above, one of which should keep these names as slots",
      "parentUuid": "7101e7a9_a4f81538",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 16
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26445770_1c31d1a8",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-07-08T11:58:23Z",
      "side": 1,
      "message": "Please use PascalCase for enums",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 146,
        "endChar": 10
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f2053df_2c1f5db1",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "docs",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 149,
        "endChar": 1
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c923c38_520919a1",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "interesting use case. this is a slotted approach that only exposes the nav icon and FAB, and assumes no actions. let\u0027s rethink what you want to enable here, as I think the \"beginner\" use case is more FAB + actions",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 159,
        "endChar": 3
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9acf9a9b_1e3f0b17",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "See my comment for TopAppBar above, this is only here to allow writing BottomAppBar(myFab()) without needing to specify BottomAppBar\u003cNothing\u003e(myFab())",
      "parentUuid": "5c923c38_520919a1",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 159,
        "endChar": 3
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "438da66b_5b995ff8",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "consider instead of null having the default implementation kick in",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a022b8_0fd0af6f",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "The null is here so we can enforce that there is no navigation icon when the FAB is end-aligned, the alternative is just not dropping it on the floor, and ignoring this parameter, but that seems less intuitive to me. Do you have a preference here?\n\nAlso maybe a topic for separate discussion, but I\u0027m concerned that all our optional parameters are becoming empty lambdas, instead of null by default. This means that we are still emitting a lot of lambdas, which could be a performance issue, since they still have to be emitted through the tree and executed, just to find out that there is nothing to layout / measure.",
      "parentUuid": "438da66b_5b995ff8",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b47dcac1_d24d4037",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T14:14:00Z",
      "side": 1,
      "message": "there may be a specific use case where the null default makes sense, but I want to challenge this becoming a pattern. if you provide no navigationIcon, the default icon should kick into place I think, as you may be trying to just overload the FAB without having to reinvent a nav icon or figure out what goes in there to fill the gap\n\nyou have a point with the empty lambdas, might be good to raise with the compiler team on whether this would be a problem we cause",
      "parentUuid": "b4a022b8_0fd0af6f",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54569fc6_bb219f8b",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T15:11:28Z",
      "side": 1,
      "message": "The problem then is that the navigation icon needs some onClick as well, if we just provide a default icon that doesn\u0027t do anything, it\u0027s not really helpful. And since there isn\u0027t an navigationIconOnClick param, then it can\u0027t even be customized, so I don\u0027t think there\u0027s any value in provided a default one at all. \n\nI imagine we would provide an AppBarNavigationIcon(onClick: () -\u003e Unit) composable that we would recommend as the normal material navigation icon button, but developers are free to provide their own custom composables for this slot. Alternatively we could have another overload, that just accepts a navigationIconOnClick or similar, but then it\u0027s strange because if this is provided, and we are in end-fab mode, then it won\u0027t be applied, so we probably also want to throw in that case, which is not much different from here.",
      "parentUuid": "b47dcac1_d24d4037",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c86a3c_e3985fb5",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T15:34:09Z",
      "side": 1,
      "message": "I think at this point you are stepping into Scaffold design :)\nYou can imagine one setup where we have some communication channel between the app bar and the scaffold, by which we know whether to show the icon or not depending on whether there is a nav drawer to show and we can communicate with the scaffold to show it instead of taking a manual lambda\n\nfor the slightly lower level API, having a base AppBarNavigation(Icon? ToggleButton?) that takes an onClick sounds right",
      "parentUuid": "54569fc6_bb219f8b",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8018a920_869ddd23",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T17:12:16Z",
      "side": 1,
      "message": "Ah, you\u0027re right - that\u0027s more about communication. For now then, do you think it makes sense to ignore the simple use case? As it doesn\u0027t seem that useful outside of that coordination anyway - if you just want a title doing TopAppBar({ Text(\"Title) }) isn\u0027t much more complicated until we have a more complete solution :)",
      "parentUuid": "f8c86a3c_e3985fb5",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73b00348_9b94ff20",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T17:14:06Z",
      "side": 1,
      "message": "sgtm, can you file a bug and cc me on it so we don\u0027t forget about the simple use case?",
      "parentUuid": "8018a920_869ddd23",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6e20b01_f047da9a",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-07-08T11:58:23Z",
      "side": 1,
      "message": "I personally think having nulls here is ok as this slot is fully optional and we need a way to check whether it was provided or not. we can do it with some\nval defaultLambdaValue \u003d {}\nif (slot !\u003d\u003d defaultLambdaValue)\nbut not sure it is better then just null",
      "parentUuid": "73b00348_9b94ff20",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f960898_a871a31f",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-08T12:49:59Z",
      "side": 1,
      "message": "Yeah, I prefer null here as it makes it easier for developers to make components with different states, for example:\n\nfun MySwitchingBottomAppBar(showNavigationIcon: Boolean) { \n    val icon \u003d if (showNavigationIcon) someComposable else null\n    BottomAppBar(navigationIcon \u003d icon)\n}\n\nIf we have some hidden default value, then developers can\u0027t use this and they need to declare everything again instead of just changing a parameter. I think null is also more natural in cases like this",
      "parentUuid": "d6e20b01_f047da9a",
      "range": {
        "startLine": 174,
        "startChar": 84,
        "endLine": 174,
        "endChar": 85
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "492b03d3_f04d3458",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T13:12:22Z",
      "side": 1,
      "message": "this was regular because I was playing around with the extended TopAppBar at one point, note your height may vary in the future :)",
      "range": {
        "startLine": 319,
        "startChar": 12,
        "endLine": 319,
        "endChar": 24
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10cec213_375221c1",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-07-05T13:30:19Z",
      "side": 1,
      "message": "Yup :) We will need a separate height for an extended one, I just changed this to make it clear that this is the height of the AppBar, so it can also be used for the Fab height and make a bit more sense.",
      "parentUuid": "492b03d3_f04d3458",
      "range": {
        "startLine": 319,
        "startChar": 12,
        "endLine": 319,
        "endChar": 24
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b151a1fb_25cd6550",
        "filename": "ui/material/src/main/java/androidx/ui/material/AppBar.kt",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-07-05T14:14:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "10cec213_375221c1",
      "range": {
        "startLine": 319,
        "startChar": 12,
        "endLine": 319,
        "endChar": 24
      },
      "revId": "e776b0cbff719c50d023ea6b4af538813b0e8838",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}