{
  "comments": [
    {
      "key": {
        "uuid": "f7fa9727_ee113fe7",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/DiffUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 631,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-05-22T22:32:06Z",
      "side": 1,
      "message": "this only happens when items match. we should never be getting here in the first place if we didn\u0027t know those two items match.\n\nidk how we do but that is something that needs to be figured out first instead of guarding the call as a workaround.",
      "range": {
        "startLine": 630,
        "startChar": 16,
        "endLine": 631,
        "endChar": 68
      },
      "revId": "c5e955745d7bdd6b5b682d8c63993c1df53aaa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f52af1e6_85a4822b",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/DiffUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 631,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-05-22T23:01:15Z",
      "side": 1,
      "message": "When I looked at a related issue briefly a while ago, it seemed like the problem was that the algorithm didn\u0027t expect duplicates. It would think the two indices N and M are the same, and start confusing data[N + 1] and data[M + 1]. That causes this invalid areContentsTheSame check, but the problem occurs earlier.",
      "parentUuid": "f7fa9727_ee113fe7",
      "range": {
        "startLine": 630,
        "startChar": 16,
        "endLine": 631,
        "endChar": 68
      },
      "revId": "c5e955745d7bdd6b5b682d8c63993c1df53aaa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74c5c3f2_1fa596cb",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/DiffUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 631,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-05-22T23:57:38Z",
      "side": 1,
      "message": "so i\u0027m debugging the test case here, the snakes seems wrong.\nIt has two snakes, x:0, y:0 size 1; and x:1 y:2 size 1.\nThe second one, for the example in this test, should be x:1 y:3.\n\nbut it has been a very long time since i\u0027ve implemented this so i\u0027m not sure if i\u0027m reading it properly.\nwill keep digging.\n\nthis CL only avoids a side effect though, we are still sending RecyclerView the wrong data :/",
      "parentUuid": "f52af1e6_85a4822b",
      "range": {
        "startLine": 630,
        "startChar": 16,
        "endLine": 631,
        "endChar": 68
      },
      "revId": "c5e955745d7bdd6b5b682d8c63993c1df53aaa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "166066a2_b52020f1",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/DiffUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 631,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-05-23T01:13:10Z",
      "side": 1,
      "message": "a quick update. debugging the sample reveals that we are in fact calculating the snake wrong.\nIt is either hitting a case where the algorithm does not handle properly OR i\u0027ve simply implemented it wrong. More likely the latter. \nI need to re-study the algorithm and figure out what is wrong :/ \nBtw, here is the paper for those interested: http://www.xmailserver.org/diff2.pdf",
      "parentUuid": "74c5c3f2_1fa596cb",
      "range": {
        "startLine": 630,
        "startChar": 16,
        "endLine": 631,
        "endChar": 68
      },
      "revId": "c5e955745d7bdd6b5b682d8c63993c1df53aaa33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}