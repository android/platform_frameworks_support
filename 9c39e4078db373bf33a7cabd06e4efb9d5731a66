{
  "comments": [
    {
      "key": {
        "uuid": "4c727b80_776043d2",
        "filename": "compose/runtime/src/main/java/androidx/compose/FrameManager.kt",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1493285
      },
      "writtenOn": "2019-05-17T17:22:51Z",
      "side": 1,
      "message": "hmm. i see here my previous suggestion will not work because we are locking around the `get` here.",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65614088_295adedf",
        "filename": "compose/runtime/src/main/java/androidx/compose/FrameManager.kt",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-05-17T17:28:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4c727b80_776043d2",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5fa84e5_1bfc98c5",
        "filename": "compose/runtime/src/main/java/androidx/compose/FrameManager.kt",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1048725
      },
      "writtenOn": "2019-05-17T19:01:35Z",
      "side": 1,
      "message": "With the current implementation of ObserverMap this calls `scope.invalidate` multiple for the same scope. My motivation for using a set here was to avoid potential expensive duplicate calls to the scope invalidate function. If ObserverMap is changed to ensure that values are only included once in the result of `get` then this code is fine.",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2513a45_8e4f401b",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1048725
      },
      "writtenOn": "2019-05-17T19:01:35Z",
      "side": 1,
      "message": "Do we need weak identity on the value as well as the key?",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2193f5d5_90f449ac",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-05-17T19:31:54Z",
      "side": 1,
      "message": "If you take a look on the usage in AndroidOwner there we use this map for both cases Model to ComponentNode and ComponentNode to Model. So V here can also be an entity with not fixed hashCode and we use HashSet to store them. So I guess WeakIdentity is needed for V as well",
      "parentUuid": "d2513a45_8e4f401b",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8852b08f_6fbbb84e",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1493285
      },
      "writtenOn": "2019-05-17T17:22:51Z",
      "side": 1,
      "message": "this is promoting a pattern where we end up allocating a list just to iterate over it. Perhaps since this is a special-case data structure anyway, we should instead provide a forEach-like API to pass in an iterable and then have a lambda called for each `V`?  Make it inline and then this will be a more efficient strategy. This code is a fairly hot path so I don\u0027t think it\u0027s necessarily premature to think about these things either.",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12764351_7fb5c799",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-05-17T17:28:33Z",
      "side": 1,
      "message": "yeah, actually I had the same concerns and initially I implemented it as forEach function. then played with it on the usage side and decided to go with returning a list for now",
      "parentUuid": "8852b08f_6fbbb84e",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cbd7f44_0f39abdf",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1048725
      },
      "writtenOn": "2019-05-17T19:01:35Z",
      "side": 1,
      "message": "This list now can contain duplicate values. For example, if multiple keys contain the same value in thier sets then the value will be returned twice. Maybe we should, instead, use a weak identity set here and just return a iterable map of the result.",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf482670_2278a4db",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-05-17T19:31:54Z",
      "side": 1,
      "message": "oh, I totally missed that, thank you for noticing! for sure we should use a set here to filter out the duplicates",
      "parentUuid": "3cbd7f44_0f39abdf",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83d7efde_61eae071",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1493285
      },
      "writtenOn": "2019-05-17T17:22:51Z",
      "side": 1,
      "message": "perhaps `inline`?",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "537d711b_a45d5480",
        "filename": "compose/runtime/src/main/java/androidx/compose/ObserverMap.kt",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-05-17T17:28:33Z",
      "side": 1,
      "message": "it is not possible right now because map is a private field. and I don\u0027t really want to make it public to abstract the usages from the WeakIdentity implementations.\nplus this exact method is too huge for inlining I think",
      "parentUuid": "83d7efde_61eae071",
      "revId": "9c39e4078db373bf33a7cabd06e4efb9d5731a66",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}