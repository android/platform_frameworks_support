// Signature format: 3.0
package androidx.slice {

  @RequiresApi(19) public class SliceMetadata {
  }


  @RequiresApi(19) public class SliceStructure {
  }

  @RequiresApi(19) public class SliceUtils {
  }

  public static class SliceUtils.SerializeOptions {
  }

  public static class SliceUtils.SliceParseException extends java.lang.Exception {
  }


}

package androidx.slice.widget {





  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(19) public class GridContent {
    ctor public GridContent(android.content.Context!, androidx.slice.SliceItem!);
    method public int getActualHeight();
    method public androidx.slice.SliceItem? getColorItem();
    method public CharSequence? getContentDescription();
    method public androidx.slice.SliceItem? getContentIntent();
    method public java.util.ArrayList<androidx.slice.widget.GridContent.CellContent!> getGridContent();
    method public int getLargestImageMode();
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getMaxCellLineCount();
    method public androidx.slice.SliceItem? getSeeMoreItem();
    method public int getSmallHeight();
    method public CharSequence? getTitle();
    method public boolean hasImage();
    method public boolean isAllImages();
    method public boolean isValid();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class GridContent.CellContent {
    ctor public GridContent.CellContent(androidx.slice.SliceItem!);
    method public java.util.ArrayList<androidx.slice.SliceItem!>! getCellItems();
    method public CharSequence? getContentDescription();
    method public androidx.slice.SliceItem! getContentIntent();
    method public int getImageMode();
    method public int getTextCount();
    method public androidx.slice.SliceItem? getTitleItem();
    method public boolean hasImage();
    method public boolean isImageOnly();
    method public boolean isValid();
    method public boolean populate(androidx.slice.SliceItem!);
  }



  public class LargeSliceAdapter.SliceViewHolder extends androidx.recyclerview.widget.RecyclerView.ViewHolder implements android.view.View.OnClickListener android.view.View.OnTouchListener {
    ctor public LargeSliceAdapter.SliceViewHolder(android.view.View!);
    method public void onClick(android.view.View!);
    method public boolean onTouch(android.view.View!, android.view.MotionEvent!);
    field public final androidx.slice.widget.SliceChildView! mSliceChildView;
  }

  protected static class LargeSliceAdapter.SliceWrapper {
    ctor public LargeSliceAdapter.SliceWrapper(androidx.slice.SliceItem!, androidx.slice.widget.LargeSliceAdapter.IdGenerator!, int);
    method public static int getFormat(androidx.slice.SliceItem!);
  }


  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(19) public class ListContent {
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!);
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!, androidx.slice.widget.SliceStyle!);
    ctor public ListContent(android.content.Context!, androidx.slice.Slice!, android.util.AttributeSet!, int, int);
    method public androidx.slice.SliceItem? getColorItem();
    method public androidx.slice.SliceItem? getHeaderItem();
    method public int getHeaderTemplateType();
    method public java.util.ArrayList<androidx.slice.SliceItem!> getItemsForNonScrollingList(int);
    method public int getLargeHeight(int, boolean);
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getListHeight(java.util.List<androidx.slice.SliceItem!>!);
    method public androidx.slice.SliceItem? getPrimaryAction();
    method public java.util.ArrayList<androidx.slice.SliceItem!> getRowItems();
    method public static int getRowType(android.content.Context!, androidx.slice.SliceItem!, boolean, java.util.List<androidx.slice.core.SliceAction!>!);
    method public androidx.slice.SliceItem? getSeeMoreItem();
    method public androidx.slice.Slice? getSlice();
    method public java.util.List<androidx.slice.core.SliceAction!>? getSliceActions();
    method public int getSmallHeight();
    method public boolean hasHeader();
    method public boolean isValid();
    method public static boolean isValidHeader(androidx.slice.SliceItem!);
    method public void setMaxSmallHeight(int);
  }



  public static class RemoteInputView.RemoteEditText extends android.widget.EditText {
    ctor public RemoteInputView.RemoteEditText(android.content.Context!, android.util.AttributeSet!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(19) public class RowContent {
    ctor public RowContent(android.content.Context!, androidx.slice.SliceItem!, boolean);
    method public boolean endItemsContainAction();
    method public int getActualHeight(int);
    method public CharSequence? getContentDescription();
    method public java.util.ArrayList<androidx.slice.SliceItem!>! getEndItems();
    method public androidx.slice.SliceItem? getInputRangeThumb();
    method public androidx.slice.SliceItem? getLayoutDirItem();
    method public int getLineCount();
    method public androidx.slice.SliceItem? getPrimaryAction();
    method public androidx.slice.SliceItem? getRange();
    method public androidx.slice.SliceItem getSlice();
    method public int getSmallHeight(int);
    method public androidx.slice.SliceItem? getStartItem();
    method public androidx.slice.SliceItem? getSubtitleItem();
    method public androidx.slice.SliceItem? getSummaryItem();
    method public androidx.slice.SliceItem? getTitleItem();
    method public java.util.ArrayList<androidx.slice.core.SliceAction!>! getToggleItems();
    method public boolean isDefaultSeeMore();
    method public boolean isValid();
  }


  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(19) public class ShortcutContent {
    ctor public ShortcutContent(androidx.slice.widget.ListContent);
    method public androidx.slice.Slice! buildSlice(androidx.slice.Slice.Builder!);
    method public androidx.slice.SliceItem! getActionItem();
    method public androidx.slice.SliceItem! getColorItem();
    method public androidx.slice.SliceItem! getIcon();
    method public androidx.slice.SliceItem! getLabel();
  }




  @RequiresApi(19) public final class SliceLiveData {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromStream(android.content.Context, androidx.slice.SliceViewManager!, java.io.InputStream, androidx.slice.widget.SliceLiveData.OnErrorListener!);
  }


  @RequiresApi(19) public class SliceView extends android.view.ViewGroup implements androidx.lifecycle.Observer<androidx.slice.Slice> android.view.View.OnClickListener {
  }



}

