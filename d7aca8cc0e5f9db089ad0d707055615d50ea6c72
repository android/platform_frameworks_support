{
  "comments": [
    {
      "key": {
        "uuid": "1b305a7c_02f3e2af",
        "filename": "compose/runtime/src/main/java/androidx/compose/Compose.kt",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1048725
      },
      "writtenOn": "2019-05-17T16:04:47Z",
      "side": 1,
      "message": "I would like to avoid this WeakHashMap here. It might be better to have the child compositions tell the parent when they have `hasPendingFrame` changes. The parent can then maintain a list of children with pending frames. The root context is idle if `hasPendingFrame` is false and the child list is empty.\n\nAlso there would be no need for the complicated back reference from the composer to the context as `hasPendingFrame` is maintained by the context.",
      "revId": "d7aca8cc0e5f9db089ad0d707055615d50ea6c72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "862d4192_aaaf60f4",
        "filename": "compose/runtime/src/main/java/androidx/compose/Compose.kt",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-05-20T17:06:22Z",
      "side": 1,
      "message": "Thanks for suggestions!\nAbout child composition:\n This was the first option we considered, but after GVC with Leland, we discussed that it probably will be easier to provide explicit connection here and avoid constant listening to children. Or at least I understood our decision like that :)\n\nWith this notification from children we need to do some works constantly, maintaining list of children with pending children, and all of this only to provide API for testing. Probably being explicit here and request for data collection recursively down only on-demand (read only in tests) will be more efficient and easier. \n\nAbout this WeakHashMap. I\u0027m not sure I understand how to avoid this. \nThis map doesn\u0027t contain the \"subcompositions\" or anything below first level of composition. We need to associate one context (not app context, but activity context) with several independent composition trees.\n\nIn can happen when you type something like :\n```frameLayoutOne.compose {\n    CraneWrapper { ... } //first tree\n}```\n\n```frameLayoutTwo.compose {\n    CraneWrapper { ... } //second tree\n}```\n\nTherefore you can have two trees that are not related. In tests we need to know that all composition and recomposition and changes in all the trees in activity have finished, so we need to maintain this map it seems.\n\nDoes it make sense?",
      "parentUuid": "1b305a7c_02f3e2af",
      "revId": "d7aca8cc0e5f9db089ad0d707055615d50ea6c72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d31cf29_2744eac8",
        "filename": "compose/runtime/src/main/java/androidx/compose/Compose.kt",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1048725
      },
      "writtenOn": "2019-05-20T22:51:28Z",
      "side": 1,
      "message": "Since you are never calling unregisterComposition() you have a memory leak as the composition contexts are added to the set but are never removed. You could use a weak set for this to avoid the leak but the I would like to avoid the back-reference altogether.\n\nMaybe it would be better to have a thread-singleton that manages scheduling recompose for all composers. Then the manager can maintain the hasPendingRecompose state.\n\nWe need to abstract the Choreographer anyway for host side testing. The recompose scheduler can be the abstraction composition uses that is implemented in Android by the Choreographer.\n\nThis is also safer as you are now using invalidations as a proxy for busy. Right now you are pretty safe assuming that an invalidation implies will schedule an update. However, if there is a disconnect, and for some reason the invalidate never gets scheduled, you will wait until the timeout to find it.",
      "parentUuid": "862d4192_aaaf60f4",
      "revId": "d7aca8cc0e5f9db089ad0d707055615d50ea6c72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67d49995_0e6a9b23",
        "filename": "compose/runtime/src/main/java/androidx/compose/Compose.kt",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-05-28T17:37:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d31cf29_2744eac8",
      "revId": "d7aca8cc0e5f9db089ad0d707055615d50ea6c72",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}