{
  "comments": [
    {
      "key": {
        "uuid": "b8561a26_707d5956",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "I think you want to override dispatchDraw() rather than drawChild(). If you have multiple children then this doubles the drawing of the disappearing children.",
      "range": {
        "startLine": 97,
        "startChar": 22,
        "endLine": 97,
        "endChar": 31
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be845174_14a4a706",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "I can limit the drawing to dispatch, but drawChild() still needs to avoid drawing anything if it gets a disappearing view.",
      "parentUuid": "b8561a26_707d5956",
      "range": {
        "startLine": 97,
        "startChar": 22,
        "endLine": 97,
        "endChar": 31
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d204e175_df8e3fae",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "It _seems_ like we would want to iterate forward through this list. If the most recent disappearing child is at the end of mDisappearingFragmentChildren, then don\u0027t we want to draw the most recently removed child on top of the oldest disappearing child?",
      "range": {
        "startLine": 104,
        "startChar": 29,
        "endLine": 104,
        "endChar": 58
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cab2186_8c7df3ec",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d204e175_df8e3fae",
      "range": {
        "startLine": 104,
        "startChar": 29,
        "endLine": 104,
        "endChar": 58
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6ae2efa_e297aab8",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "if view.getParent() !\u003d this, do you want to do this?",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 127,
        "endChar": 46
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d452c523_727efdcc",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "Not at all. Thanks!",
      "parentUuid": "e6ae2efa_e297aab8",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 127,
        "endChar": 46
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97a12263_73582e00",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "If you do this, you\u0027re going to end up showing the transitioning view twice. ViewGroup also draws the view.",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 32
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30be1445_449f8661",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "My fear is that because ViewGroup does not know about mTransitioningFragmentViews, we would lose anything that has to do with mTransitioningViews (i.e. isViewTransitioning(), the clean up in endViewTransition, etc). Would it be better to try to override the functionality in those?",
      "parentUuid": "97a12263_73582e00",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 32
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49305826_85251d58",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-24T21:34:49Z",
      "side": 1,
      "message": "You have to come up with some solution here. I\u0027m not certain of the best approach. One could be to completely replace the functionality of startViewTransition() etc and don\u0027t actually remove the view from the parent when you get \"removeView()\". The benefit there is that you have complete control over the views, drawing order, etc. It also means that you wouldn\u0027t have to override dispatchDraw or drawChild because the views would actually be attached. The disadvantage is that you would likely have to override getChildAt(), addView(), getChildCount(), etc.\n\nAnother option is to prevent the ViewGroup from drawing the transitioning views by not calling super.dispatchDraw(). That means you are responsible for drawing all the children. That seems like the easier solution.\n\nI\u0027m sure there are other options.\n\nYou should make a test to ensure you\u0027re not drawing a view twice -- maybe some view with alpha so you can see it overlaid on itself.",
      "parentUuid": "30be1445_449f8661",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 32
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb7ddd08_8475aa96",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-26T21:06:30Z",
      "side": 1,
      "message": "The current solution addresses this party. When ViewGroup attempts to draw the disappearing views, it calls the overridden draw method and we return false instead of drawing the view again.",
      "parentUuid": "49305826_85251d58",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 32
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4a967f2_848508b6",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "this part should be factored out because it is used in several overrides.",
      "range": {
        "startLine": 154,
        "startChar": 8,
        "endLine": 154,
        "endChar": 71
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75f6acc9_3369926b",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4a967f2_848508b6",
      "range": {
        "startLine": 154,
        "startChar": 8,
        "endLine": 154,
        "endChar": 71
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b030b84a_4b2bec44",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "Do you also need to override these?\n\nremoveAllViews()\nremoveViews()\nremoveViewsInLayout()",
      "range": {
        "startLine": 171,
        "startChar": 16,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c22da372_5569c991",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "removeAllViews() just calls this one. I\u0027ll override the others.",
      "parentUuid": "b030b84a_4b2bec44",
      "range": {
        "startLine": 171,
        "startChar": 16,
        "endLine": 171,
        "endChar": 38
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4baf5646_a5944bbd",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-21T20:19:15Z",
      "side": 1,
      "message": "will this be called after removeView() for example? It seems like you\u0027ll end up adding the same view to mDisappearingFragmentChildren. Perhaps this is the only place it needs to be added?",
      "range": {
        "startLine": 184,
        "startChar": 19,
        "endLine": 184,
        "endChar": 37
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b23a0751_ce9e8870",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1442279
      },
      "writtenOn": "2019-06-22T04:00:39Z",
      "side": 1,
      "message": "Which removeView()? I thought removeView() added the view to mDisappearingViews through the internal method, while removeDetachedView does it on its own.\n\nReally from a Fragment\u0027s perspective I think we only NEED removeView(View). I did all the others to ensure my list of disappearing views stayed consistent with ViewGroup\u0027s internal list. But since this is specifically for Fragments maybe all the other remove methods should be Unsupported. Thoughts?",
      "parentUuid": "4baf5646_a5944bbd",
      "range": {
        "startLine": 184,
        "startChar": 19,
        "endLine": 184,
        "endChar": 37
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aef5a0d_3cf500bb",
        "filename": "fragment/fragment/src/main/java/androidx/fragment/app/FragmentContainerView.java",
        "patchSetId": 3
      },
      "lineNbr": 184,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2019-06-24T21:34:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b23a0751_ce9e8870",
      "range": {
        "startLine": 184,
        "startChar": 19,
        "endLine": 184,
        "endChar": 37
      },
      "revId": "4f3163ddbebdc883fa51e5f28873b9d526a3fe1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}