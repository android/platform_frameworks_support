/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.AndroidXPlugin
import androidx.build.SupportAndroidLibraryPlugin
import androidx.build.SdkHelperKt
import androidx.build.jacoco.Jacoco

def currentJvmVersion = org.gradle.api.JavaVersion.current()
if (currentJvmVersion.getMajorVersion() != "8") {
  throw new Exception("Unsupported java version '" + currentJvmVersion.toString() + "'. Please install java 8.\n" +
"\n" +
"If you have already installed java 8, you can instruct Gradle to use it by setting the environment variable JAVA_HOME equal to its file path.")
}


buildscript {
    ext.supportRootFolder = project.projectDir
    apply from: 'buildSrc/repos.gradle'
    apply from: 'buildSrc/init.gradle'
    apply from: 'buildSrc/build_dependencies.gradle'
    repos.addMavenRepositories(repositories)
    SdkHelperKt.setSdkInLocalPropertiesFile(ext.supportRootFolder)

    dependencies {
        classpath build_libs.gradle
        classpath build_libs.kotlin.gradle_plugin

        // AGP only declares a compileOnly dependency on Jacoco. This forces an explicit version.
        classpath Jacoco.CORE_DEPENDENCY
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18-20180615.125613-1"
    }
}

repos.addMavenRepositories(repositories)

init.setupRepoOutAndBuildNumber()

init.configureSubProjects()

//apply plugin: com.android.build.gradle.AppPlugin
apply plugin: AndroidXPlugin
apply from: 'buildSrc/jetify.gradle'
//apply(plugin: "kotlin-android")
apply(plugin: "org.jetbrains.dokka-android")


// AndroidX needed before jetify since it accesses the createArchive task name directly.


def rootProject = project

def dokkaTask = rootProject.dokka
//dokkaTask.outputFormat = "dac-as-java"
dokkaTask.outputFormat = "dac"

subprojects { subproject ->
  //println("allprojecting " + subproject)
  //subproject.tasks.whenTaskAdded { task ->
  if (subproject.name != "docs-fake") {
    subproject.tasks.withType(JavaCompile).all { subtask ->
      //println("Found javacompile " + subtask)
      def container = subtask.project.sourceSets.findByName("main")
      def sources = null
      if (container != null) {
        try {
          sources = container.allSources.srcDirs
        } catch (Exception) {
          sources = container.allSource.srcDirs
        }
      } else {
        container = subtask.project.android.sourceSets.findByName("main")
        sources = container.javaDirectories
      }
      if (project.name != "appcompat") {
        if (container != null) {
          dokkaTask.dependsOn(subtask)
          //subproject.sourceSets["main"].allSource.srcDirs
          println("Adding sources of " + sources)
          dokkaTask.doFirst {
            dokkaTask.sourceDirs += sources
            def cp = subtask.classpath
            println("Adding classpath of " + cp)
            dokkaTask.classpath += cp
          }
        } else {
          println("Cannot depend on " + subtask)
        }
      }
      //dokkaTask.includes += sources
      //if (subproject.tasks.findByName("compileKotlin") != null) {
      //if (subproject.sourceSets.findByName("main") != null) {
      //if (subtask isinstance JavaCompile) {
      //  def sources = subproject.sourceSets["main"].allSource.srcDirs
      //  println("Adding srcDirs of " + sources + " from " + subproject)
      //  dokkaTask.sources += sources
      //} else {
      //  println("No sourceSet main found in " + subproject)
      //}
    }
  }
  /*subproject.tasks.each { task ->
    if (task.name.contains("compileKotlin")) {
      //println("Found compileKotlin task : " + task + " of type " + task.class)
      dokkaTask.sources += subproject.file("src")
      //rootProject.tasks["dokka"].classpath += subproject.sourceSets["main"].files
      logger.error("added new files in from " + subproject)
    } else {
      //logger.error("not adding files for task " + task)
    }
  }*/
}
