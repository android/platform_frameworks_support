/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import static androidx.build.dependencies.DependenciesKt.*
import androidx.build.CompilationTarget
import androidx.build.LibraryGroups
import androidx.build.LibraryVersions
import androidx.build.AndroidXExtension

plugins {
    id("AndroidXPlugin")
    id("kotlin")
}

ext.prebuiltsRoot = "${project.projectDir.getParentFile()}/../../../../../prebuilts"
ext.generatedResources = "$buildDir/generated/resources"

sourceSets {
    test.resources.srcDirs += generatedResources
}

task generateSdkResource() {
    inputs.property("prebuiltsRoot", prebuiltsRoot)
    outputs.dir(generatedResources)
    doLast {
        // Properties.write will have a timestamp, that invalidates the task,
        // so we don't use it and write a file manually
        String osName = System.getProperty("os.name").toLowerCase()
        boolean isMacOsX = osName.contains("mac os x") || osName.contains("darwin") ||
                osName.contains("osx")
        String platform = isMacOsX ? "darwin" : "linux"
        // Making an assumption that prebuilts directory is in ../../prebuilts/
        String sdkDir = "$prebuiltsRoot/fullsdk-$platform"

        // it may be different sdk than is used for compilation of real android modules
        // but we need sdk only for test lint
        new File(generatedResources, "sdk.prop").withWriter('UTF-8') { writer ->
            writer.write("sdk.dir=$prebuiltsRoot/fullsdk-$platform\n")
        }
    }
}

tasks["compileTestJava"].dependsOn generateSdkResource

dependencies {
    // compileOnly because we use lintChecks and it doesn't allow other types of deps
    // this ugly hack exists because of b/63873667
    if (rootProject.hasProperty("android.injected.invoked.from.ide")) {
        compileOnly LINT_API_LATEST
    } else {
        compileOnly LINT_API_MIN
    }
    compileOnly KOTLIN_STDLIB

    testImplementation KOTLIN_STDLIB
    testImplementation LINT_CORE
    testImplementation LINT_TESTS
}

androidx {
    name = "Android Lifecycles Lint Checks"
    toolingProject = true
    publish = false
    mavenVersion = LibraryVersions.LIFECYCLE
    mavenGroup = LibraryGroups.LIFECYCLE
    inceptionYear = "2019"
    description = "Android Lifecycles Lint Checks"
    url = AndroidXExtension.ARCHITECTURE_URL
    compilationTarget = CompilationTarget.HOST
}
