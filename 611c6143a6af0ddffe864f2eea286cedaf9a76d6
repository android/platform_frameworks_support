{
  "comments": [
    {
      "key": {
        "uuid": "7ffeb53e_70e76a58",
        "filename": "room/integration-tests/testapp/src/androidTest/java/androidx/room/integration/testapp/test/PrepackageTest.java",
        "patchSetId": 6
      },
      "lineNbr": 324,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "this test doesn\u0027t really do anything to create the race condition.\n\nis it possible to provide a context that has overridden getResporces (maybe a mock?) so that we can try to introduce failures there? I\u0027m not sure where else but we need some stuff here to make it test different failure cases.\n\n\nAlso, we should add assertions by catching errors in threads and asserting that there are no errors. otherwise, failure in these thread will fail the whole test run.",
      "range": {
        "startLine": 324,
        "startChar": 16,
        "endLine": 324,
        "endChar": 50
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f198bc5_f6ce29c2",
        "filename": "room/integration-tests/testapp/src/androidTest/java/androidx/room/integration/testapp/test/PrepackageTest.java",
        "patchSetId": 6
      },
      "lineNbr": 324,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "This does create \u0027some\u0027 race condition, where there is some contention in the copy lock since the database being copied is somewhat \u0027big\u0027 (not super big, just 1MB) and only one of them proceeds. However its too hard at this layer to introduce things to deterministically cause race conditions or failures we can better do that in the SQLiteCopyOpenHelperTest, which I added more tests. In other words, this is more of a \u0027it overall doesn\u0027t explode\u0027 test that runs on the device and not in junit.",
      "parentUuid": "7ffeb53e_70e76a58",
      "range": {
        "startLine": 324,
        "startChar": 16,
        "endLine": 324,
        "endChar": 50
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aa34145_40e05383",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "should we use files dir instead?",
      "range": {
        "startLine": 122,
        "startChar": 50,
        "endLine": 122,
        "endChar": 61
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda5573d_64144e1f",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "Its about the same, I guess files is more \u0027safe\u0027 since the lock files might not get cleaned up and since they are zero sized we are not taking any reeeal space.",
      "parentUuid": "3aa34145_40e05383",
      "range": {
        "startLine": 122,
        "startChar": 50,
        "endLine": 122,
        "endChar": 61
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3205df15_80a215cd",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "we should append db name here to avoid conflicts.",
      "range": {
        "startLine": 190,
        "startChar": 54,
        "endLine": 190,
        "endChar": 70
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6fc8a19_aadba163",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "createTempFile() already appends a time-based + something else name that ensures there are no conflicts.",
      "parentUuid": "3205df15_80a215cd",
      "range": {
        "startLine": 190,
        "startChar": 54,
        "endLine": 190,
        "endChar": 70
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8db41738_8656aa10",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 207,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "lets move file processing code to a file util",
      "range": {
        "startLine": 207,
        "startChar": 17,
        "endLine": 207,
        "endChar": 21
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b1692e3_81fcde0b",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 207,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8db41738_8656aa10",
      "range": {
        "startLine": 207,
        "startChar": 17,
        "endLine": 207,
        "endChar": 21
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8c8e733_8fff0717",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 238,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "lets move this out. preferably to another module but for now, can be just a different package. or same package different file",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6f0028f_ef5cfc9e",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 238,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "Moved to util package, renamed to ProcessLock.",
      "parentUuid": "d8c8e733_8fff0717",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d04d8c6_657768ed",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 289,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "why is this bound to thread not process?",
      "range": {
        "startLine": 289,
        "startChar": 26,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f206c718_649f3920",
        "filename": "room/runtime/src/main/java/androidx/room/SQLiteCopyOpenHelper.java",
        "patchSetId": 6
      },
      "lineNbr": 289,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "A single JVM process has to synchronize within himself (against its multiple threads) before it can synchronize with another process. To sync threads within the same process we have a map of key to ReentrantLocks, meanwhile to sync across processes we also have a map... in the file system of key.lck files.",
      "parentUuid": "8d04d8c6_657768ed",
      "range": {
        "startLine": 289,
        "startChar": 26,
        "endLine": 289,
        "endChar": 38
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81c3db99_8da34c2f",
        "filename": "room/runtime/src/test/java/androidx/room/SQLiteCopyOpenHelperTest.kt",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 66,
        "startChar": 19,
        "endLine": 66,
        "endChar": 35
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca148ba8_a485610c",
        "filename": "room/runtime/src/test/java/androidx/room/SQLiteCopyOpenHelperTest.kt",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "On purpose, two calls to get the database from the same open helper should only cause 1 copy.",
      "parentUuid": "81c3db99_8da34c2f",
      "range": {
        "startLine": 66,
        "startChar": 19,
        "endLine": 66,
        "endChar": 35
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3434baa_f7db630d",
        "filename": "room/runtime/src/test/java/androidx/room/SQLiteCopyOpenHelperTest.kt",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-06-18T00:31:20Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 83,
        "startChar": 35,
        "endLine": 83,
        "endChar": 51
      },
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "626c7c45_7d4c5a2b",
        "filename": "room/runtime/src/test/java/androidx/room/SQLiteCopyOpenHelperTest.kt",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-06-18T16:40:44Z",
      "side": 1,
      "message": "On purpose two different calls to get the database from two different open helpers should only cause 1 copy.",
      "parentUuid": "d3434baa_f7db630d",
      "range": {
        "startLine": 83,
        "startChar": 35,
        "endLine": 83,
        "endChar": 51
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "611c6143a6af0ddffe864f2eea286cedaf9a76d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}