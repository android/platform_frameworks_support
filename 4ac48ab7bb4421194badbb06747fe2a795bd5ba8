{
  "comments": [
    {
      "key": {
        "uuid": "5a320411_f2509f8b",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "move these to the actual method calls so that we don\u0027t over suppress in our code",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b6a9dda_3da45976",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a320411_f2509f8b",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 24
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6333fe94_b7cc4668",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "not sure why this wrapper is necessary.",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 52,
        "endChar": 13
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117ec828_f83c7dc8",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "This is necessary to wait for child coroutines started in the suspend block given. Otherwise the tests with async would fail since we end up calling setTransactionSuccessful() before the database operation in the async block.",
      "parentUuid": "6333fe94_b7cc4668",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 52,
        "endChar": 13
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60fad856_2515a3dc",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-12T02:08:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "117ec828_f83c7dc8",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 52,
        "endChar": 13
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "640c6111_7ef9f6c7",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "what prevents someone putting into this queue after release? We probably need to cancel them immediately.",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d612a7_deb42854",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T22:28:02Z",
      "side": 1,
      "message": "i think we just need to mark dispatchers\u0027s job cancelled when we receive stop.",
      "parentUuid": "640c6111_7ef9f6c7",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17482cdb_4e492454",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "I\u0027m not sure if calling \u0027cancel\u0027 is the right thing since there is no job associated.\n\nIf you notice in TransactionElement#release() I do call \u0027clear()\u0027, which discards any pending runnables so the thread can be release quickly. \n\nIf we are not going to throw (maybe we should? not sure...) then it does not matter if something is put into the queue after the RELEASE has been placed. More precisely, runnables added after the release just won\u0027t run. The queue should go out of scope and GCed, effectively ignoring those dispatches.",
      "parentUuid": "43d612a7_deb42854",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0eaec35c_f80f3f7b",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-12T02:08:42Z",
      "side": 1,
      "message": "but not running may leave other references to that callback. basically, some coroutine is waiting for it to complete to continue. we need to cancel anything that gets added after stop. maybe the suspendCoroutine above fixes it already. anyways, best to have a test to ensure those ones gets cancelled (actually, we probably need to just run them to propoganate the cancelation).",
      "parentUuid": "17482cdb_4e492454",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9bcbb81_48a9eb02",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-12T23:42:53Z",
      "side": 1,
      "message": "Did more research (and added tests). Not running dispatched blocks can lead to deadlocks or finally blocks not running. Instead we should try to mimick when a ExecutorService is shutdown() an a dispatcher out of it is still being used. More specifically if we can\u0027t accept a block we throw a RejectedExecutionException which will be handled by the Executor wrapper created by asCoroutineDispatcher(), running finally blocks if needed or at worst throwing a JobCancellationException. This does mean that we rely on the asCoroutineDispatcher() wrapper and its impl of catching the exception, but the other route would be implementing our CoroutineDispatcher which is... very hard.",
      "parentUuid": "0eaec35c_f80f3f7b",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5ad2b7a_2128cd00",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "comment on why this is hashcode. as far as i remember, this is just used as a marker. in that case, maybe use a constant or Sysytem.identitiyHsah ?",
      "range": {
        "startLine": 96,
        "startChar": 73,
        "endLine": 96,
        "endChar": 94
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a6bf685_75498727",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Added comment, I do want to keep a dispatcher hashcode, it might help us identify one transaction coroutine vs another... if we ever need to do that.",
      "parentUuid": "a5ad2b7a_2128cd00",
      "range": {
        "startLine": 96,
        "startChar": 73,
        "endLine": 96,
        "endChar": 94
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20cce67e_8f764181",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-12T02:08:42Z",
      "side": 1,
      "message": "then we need to use System.hashCode() to avoid any potential for conflict in case hascode gets implemented there for whatever reason.",
      "parentUuid": "1a6bf685_75498727",
      "range": {
        "startLine": 96,
        "startChar": 73,
        "endLine": 96,
        "endChar": 94
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6308839f_ed4bd875",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-12T23:42:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20cce67e_8f764181",
      "range": {
        "startLine": 96,
        "startChar": 73,
        "endLine": 96,
        "endChar": 94
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd22be4f_955e2d13",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-07T21:04:56Z",
      "side": 1,
      "message": "How does this affect the runtimes other than Coroutines? How does it look in an @Transaction method on a DAO?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4550bca2_afaedb94",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "suppress deprecated on this? (and all other usages :(). we might want to move deprecation into another CL to clean things up.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 43
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfff19ee_e91ba685",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "a couple of if checks: https://android-review.googlesource.com/c/platform/frameworks/support/+/891674/5/room/runtime/src/main/java/androidx/room/RoomDatabase.java#256",
      "parentUuid": "bd22be4f_955e2d13",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "096e6f38_eaebe9f5",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:59:45Z",
      "side": 1,
      "message": "New CL -\u003e aosp/900916",
      "parentUuid": "4550bca2_afaedb94",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 43
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5b79e6e_750d4c24",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-26T23:05:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dfff19ee_e91ba685",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d87943b4_930f9d11",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto, deprecated warning",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73874380_465aa739",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Done - In another CL",
      "parentUuid": "d87943b4_930f9d11",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 62
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4ab0a26_d70e62d5",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcd057cc_c2471e9c",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Done - In another CL",
      "parentUuid": "e4ab0a26_d70e62d5",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bacb625_d11417ec",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 433,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "you shouldn\u0027t need awaits here as you are running async in the transaction scope. runSuspend should be waiting for them already before returning.",
      "range": {
        "startLine": 431,
        "startChar": 13,
        "endLine": 433,
        "endChar": 29
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b627d574_04e66707",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 433,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Done, didn\u0027t realize I had the assert already outside the suspending transaction block",
      "parentUuid": "1bacb625_d11417ec",
      "range": {
        "startLine": 431,
        "startChar": 13,
        "endLine": 433,
        "endChar": 29
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd3089fa_d587430a",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d38cf542_b395ba1d",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-11T22:57:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd3089fa_d587430a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36361689_f8af86d5",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-07T21:04:56Z",
      "side": 1,
      "message": "There\u0027s no type enforcement stopping the body from calling whatever non-blocking or blocking DAO methods it likes?",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d205b989_4ce94651",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "they would need a scope to launch inside that function.",
      "parentUuid": "36361689_f8af86d5",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5a2c09d_50e67fda",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-08T22:34:14Z",
      "side": 1,
      "message": "Doesn\u0027t that risk deadlock if that scope is running on a different thread? What happens for single-threaded contexts?",
      "parentUuid": "d205b989_4ce94651",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba5ede42_81647539",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T23:17:03Z",
      "side": 1,
      "message": "that would be async.\nso if they do\n\n    runInTransaction {\n        insert1()\n        GlobalScope.launch {\n           insert2()\n        }\n    }\n\nThe response from GlobalScope.launch will not be awaited. And practically that code looks bad, could do the same in java:\n\n\n\n    runInTransaction {\n        insert1()\n        executors.submit {\n           insert2()\n        }\n    }\n\nBoth wont work, or more practically, neither will in the same transaction.\nOnly if, executor is a fake impl that runs the code immediately.\n\nAnd if they do:\n\n    runInTransaction {\n        insert1()\n        runBlocking {\n           insert2()\n\n        }\n    }\n\nthat should work, because runBlocking uses current thread.\n\nbut if they do:\n    runInTransaction {\n        insert1()\n        runBlocking {\n           suspendInsert2()\n\n        }\n    }\n\n    suspend fun suspendInsert2() \u003d withContext(Dispatchers.IO) { insert2() }\n\nit wont work unless they use the suspend version of run in transaction.",
      "parentUuid": "c5a2c09d_50e67fda",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6b0762_fcc30b58",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-08T23:23:47Z",
      "side": 1,
      "message": "The last example deadlocks with suspendInsert2() trying to acquire the database lock, does it not? (barring reentrancy)\n\nThe same DAO object can have both suspend and non-suspend methods on it that otherwise do the same thing. Only the non-suspend versions really make sense to call in a transaction - all the suspend ones add is a chance to accidentally run from a different thread and deadlock when awaited.\n\nWouldn\u0027t it be better if these were separated somehow?",
      "parentUuid": "ba5ede42_81647539",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "406c54bd_b8a6f820",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T23:51:20Z",
      "side": 1,
      "message": "for regular transactions, yes, you should never launch but runBlocking is discouraged already and doing scope.launch makes it async. So it is really really hard to call a suspend function inside a runInTransaction. \n\nnot sure if we can detect the case you are mentioning.\nThe opposite is what we are detecting though, in the suspend version of run in transaction (if you switch context and call a blocking function, we detect and throw. We\u0027ll hopefully detect and fix in the future).",
      "parentUuid": "9a6b0762_fcc30b58",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2f82596_7755a03f",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-26T23:05:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "406c54bd_b8a6f820",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}