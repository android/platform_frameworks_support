{
  "comments": [
    {
      "key": {
        "uuid": "5a320411_f2509f8b",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "move these to the actual method calls so that we don\u0027t over suppress in our code",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6333fe94_b7cc4668",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "not sure why this wrapper is necessary.",
      "range": {
        "startLine": 50,
        "startChar": 25,
        "endLine": 52,
        "endChar": 13
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "640c6111_7ef9f6c7",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "what prevents someone putting into this queue after release? We probably need to cancel them immediately.",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d612a7_deb42854",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T22:28:02Z",
      "side": 1,
      "message": "i think we just need to mark dispatchers\u0027s job cancelled when we receive stop.",
      "parentUuid": "640c6111_7ef9f6c7",
      "range": {
        "startLine": 94,
        "startChar": 43,
        "endLine": 94,
        "endChar": 68
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5ad2b7a_2128cd00",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "comment on why this is hashcode. as far as i remember, this is just used as a marker. in that case, maybe use a constant or Sysytem.identitiyHsah ?",
      "range": {
        "startLine": 96,
        "startChar": 73,
        "endLine": 96,
        "endChar": 94
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd22be4f_955e2d13",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-07T21:04:56Z",
      "side": 1,
      "message": "How does this affect the runtimes other than Coroutines? How does it look in an @Transaction method on a DAO?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4550bca2_afaedb94",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "suppress deprecated on this? (and all other usages :(). we might want to move deprecation into another CL to clean things up.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 43
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfff19ee_e91ba685",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "a couple of if checks: https://android-review.googlesource.com/c/platform/frameworks/support/+/891674/5/room/runtime/src/main/java/androidx/room/RoomDatabase.java#256",
      "parentUuid": "bd22be4f_955e2d13",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d87943b4_930f9d11",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto, deprecated warning",
      "range": {
        "startLine": 90,
        "startChar": 8,
        "endLine": 90,
        "endChar": 62
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4ab0a26_d70e62d5",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bacb625_d11417ec",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 433,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "you shouldn\u0027t need awaits here as you are running async in the transaction scope. runSuspend should be waiting for them already before returning.",
      "range": {
        "startLine": 431,
        "startChar": 13,
        "endLine": 433,
        "endChar": 29
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd3089fa_d587430a",
        "filename": "room/integration-tests/kotlintestapp/src/androidTest/java/androidx/room/integration/kotlintestapp/test/SuspendingQueryTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "ditto",
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36361689_f8af86d5",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-07T21:04:56Z",
      "side": 1,
      "message": "There\u0027s no type enforcement stopping the body from calling whatever non-blocking or blocking DAO methods it likes?",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d205b989_4ce94651",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T20:56:37Z",
      "side": 1,
      "message": "they would need a scope to launch inside that function.",
      "parentUuid": "36361689_f8af86d5",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5a2c09d_50e67fda",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-08T22:34:14Z",
      "side": 1,
      "message": "Doesn\u0027t that risk deadlock if that scope is running on a different thread? What happens for single-threaded contexts?",
      "parentUuid": "d205b989_4ce94651",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba5ede42_81647539",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-08T23:17:03Z",
      "side": 1,
      "message": "that would be async.\nso if they do\n\n    runInTransaction {\n        insert1()\n        GlobalScope.launch {\n           insert2()\n        }\n    }\n\nThe response from GlobalScope.launch will not be awaited. And practically that code looks bad, could do the same in java:\n\n\n\n    runInTransaction {\n        insert1()\n        executors.submit {\n           insert2()\n        }\n    }\n\nBoth wont work, or more practically, neither will in the same transaction.\nOnly if, executor is a fake impl that runs the code immediately.\n\nAnd if they do:\n\n    runInTransaction {\n        insert1()\n        runBlocking {\n           insert2()\n\n        }\n    }\n\nthat should work, because runBlocking uses current thread.\n\nbut if they do:\n    runInTransaction {\n        insert1()\n        runBlocking {\n           suspendInsert2()\n\n        }\n    }\n\n    suspend fun suspendInsert2() \u003d withContext(Dispatchers.IO) { insert2() }\n\nit wont work unless they use the suspend version of run in transaction.",
      "parentUuid": "c5a2c09d_50e67fda",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6b0762_fcc30b58",
        "filename": "room/runtime/src/main/java/androidx/room/RoomDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 355,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-08T23:23:47Z",
      "side": 1,
      "message": "The last example deadlocks with suspendInsert2() trying to acquire the database lock, does it not? (barring reentrancy)\n\nThe same DAO object can have both suspend and non-suspend methods on it that otherwise do the same thing. Only the non-suspend versions really make sense to call in a transaction - all the suspend ones add is a chance to accidentally run from a different thread and deadlock when awaited.\n\nWouldn\u0027t it be better if these were separated somehow?",
      "parentUuid": "ba5ede42_81647539",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 355,
        "endChar": 58
      },
      "revId": "4ac48ab7bb4421194badbb06747fe2a795bd5ba8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}