// Signature format: 2.0
package android.support.v4.media {

  public final class MediaBrowserCompat {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public android.os.Bundle? getNotifyChildrenChangedOptions();
    field static final boolean DEBUG;
    field static final String TAG = "MediaBrowserCompat";
    field private final android.support.v4.media.MediaBrowserCompat.MediaBrowserImpl! mImpl;
  }

  private static class MediaBrowserCompat.CallbackHandler extends android.os.Handler {
    ctor MediaBrowserCompat.CallbackHandler(android.support.v4.media.MediaBrowserCompat.MediaBrowserServiceCallbackImpl!);
    method void setCallbacksMessenger(android.os.Messenger!);
    field private final java.lang.ref.WeakReference<android.support.v4.media.MediaBrowserCompat.MediaBrowserServiceCallbackImpl>! mCallbackImplRef;
    field private java.lang.ref.WeakReference<android.os.Messenger>! mCallbacksMessengerRef;
  }

  public static class MediaBrowserCompat.ConnectionCallback {
    method void setInternalConnectionCallback(android.support.v4.media.MediaBrowserCompat.ConnectionCallback.ConnectionCallbackInternal!);
    field final android.media.browse.MediaBrowser.ConnectionCallback! mConnectionCallbackFwk;
    field android.support.v4.media.MediaBrowserCompat.ConnectionCallback.ConnectionCallbackInternal! mConnectionCallbackInternal;
  }

  @RequiresApi(21) private class MediaBrowserCompat.ConnectionCallback.ConnectionCallbackApi21 extends android.media.browse.MediaBrowser.ConnectionCallback {
    ctor MediaBrowserCompat.ConnectionCallback.ConnectionCallbackApi21();
  }

  static interface MediaBrowserCompat.ConnectionCallback.ConnectionCallbackInternal {
    method public void onConnected();
    method public void onConnectionFailed();
    method public void onConnectionSuspended();
  }

  private static class MediaBrowserCompat.CustomActionResultReceiver extends android.support.v4.os.ResultReceiver {
    ctor MediaBrowserCompat.CustomActionResultReceiver(String!, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.CustomActionCallback!, android.os.Handler!);
    field private final String! mAction;
    field private final android.support.v4.media.MediaBrowserCompat.CustomActionCallback! mCallback;
    field private final android.os.Bundle! mExtras;
  }

  public abstract static class MediaBrowserCompat.ItemCallback {
    field final android.media.browse.MediaBrowser.ItemCallback! mItemCallbackFwk;
  }

  @RequiresApi(23) private class MediaBrowserCompat.ItemCallback.ItemCallbackApi23 extends android.media.browse.MediaBrowser.ItemCallback {
    ctor MediaBrowserCompat.ItemCallback.ItemCallbackApi23();
  }

  private static class MediaBrowserCompat.ItemReceiver extends android.support.v4.os.ResultReceiver {
    ctor MediaBrowserCompat.ItemReceiver(String!, android.support.v4.media.MediaBrowserCompat.ItemCallback!, android.os.Handler!);
    field private final android.support.v4.media.MediaBrowserCompat.ItemCallback! mCallback;
    field private final String! mMediaId;
  }

  static interface MediaBrowserCompat.MediaBrowserImpl {
    method public void connect();
    method public void disconnect();
    method public android.os.Bundle? getExtras();
    method public void getItem(String, android.support.v4.media.MediaBrowserCompat.ItemCallback);
    method public android.os.Bundle? getNotifyChildrenChangedOptions();
    method public String getRoot();
    method public android.content.ComponentName! getServiceComponent();
    method public android.support.v4.media.session.MediaSessionCompat.Token getSessionToken();
    method public boolean isConnected();
    method public void search(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SearchCallback);
    method public void sendCustomAction(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.CustomActionCallback?);
    method public void subscribe(String, android.os.Bundle?, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback);
    method public void unsubscribe(String, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback!);
  }

  @RequiresApi(21) static class MediaBrowserCompat.MediaBrowserImplApi21 implements android.support.v4.media.MediaBrowserCompat.ConnectionCallback.ConnectionCallbackInternal android.support.v4.media.MediaBrowserCompat.MediaBrowserImpl android.support.v4.media.MediaBrowserCompat.MediaBrowserServiceCallbackImpl {
    ctor MediaBrowserCompat.MediaBrowserImplApi21(android.content.Context!, android.content.ComponentName!, android.support.v4.media.MediaBrowserCompat.ConnectionCallback!, android.os.Bundle!);
    method public void connect();
    method public void disconnect();
    method public android.os.Bundle? getExtras();
    method public void getItem(String, android.support.v4.media.MediaBrowserCompat.ItemCallback);
    method public android.os.Bundle! getNotifyChildrenChangedOptions();
    method public String getRoot();
    method public android.content.ComponentName! getServiceComponent();
    method public android.support.v4.media.session.MediaSessionCompat.Token getSessionToken();
    method public boolean isConnected();
    method public void onConnected();
    method public void onConnectionFailed();
    method public void onConnectionFailed(android.os.Messenger!);
    method public void onConnectionSuspended();
    method public void onLoadChildren(android.os.Messenger!, String!, java.util.List!, android.os.Bundle!, android.os.Bundle!);
    method public void onServiceConnected(android.os.Messenger!, String!, android.support.v4.media.session.MediaSessionCompat.Token!, android.os.Bundle!);
    method public void search(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SearchCallback);
    method public void sendCustomAction(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.CustomActionCallback?);
    method public void subscribe(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback);
    method public void unsubscribe(String, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback!);
    field protected final android.media.browse.MediaBrowser! mBrowserFwk;
    field protected android.os.Messenger! mCallbacksMessenger;
    field final android.content.Context! mContext;
    field protected final android.support.v4.media.MediaBrowserCompat.CallbackHandler! mHandler;
    field private android.support.v4.media.session.MediaSessionCompat.Token! mMediaSessionToken;
    field private android.os.Bundle! mNotifyChildrenChangedOptions;
    field protected final android.os.Bundle! mRootHints;
    field protected android.support.v4.media.MediaBrowserCompat.ServiceBinderWrapper! mServiceBinderWrapper;
    field protected int mServiceVersion;
    field private final androidx.collection.ArrayMap<java.lang.String,android.support.v4.media.MediaBrowserCompat.Subscription>! mSubscriptions;
  }

  @RequiresApi(23) static class MediaBrowserCompat.MediaBrowserImplApi23 extends android.support.v4.media.MediaBrowserCompat.MediaBrowserImplApi21 {
    ctor MediaBrowserCompat.MediaBrowserImplApi23(android.content.Context!, android.content.ComponentName!, android.support.v4.media.MediaBrowserCompat.ConnectionCallback!, android.os.Bundle!);
    method public void getItem(String, android.support.v4.media.MediaBrowserCompat.ItemCallback);
  }

  @RequiresApi(26) static class MediaBrowserCompat.MediaBrowserImplApi26 extends android.support.v4.media.MediaBrowserCompat.MediaBrowserImplApi23 {
    ctor MediaBrowserCompat.MediaBrowserImplApi26(android.content.Context!, android.content.ComponentName!, android.support.v4.media.MediaBrowserCompat.ConnectionCallback!, android.os.Bundle!);
    method public void subscribe(String, android.os.Bundle?, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback);
    method public void unsubscribe(String, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback!);
  }

  static class MediaBrowserCompat.MediaBrowserImplBase implements android.support.v4.media.MediaBrowserCompat.MediaBrowserImpl android.support.v4.media.MediaBrowserCompat.MediaBrowserServiceCallbackImpl {
    ctor public MediaBrowserCompat.MediaBrowserImplBase(android.content.Context!, android.content.ComponentName!, android.support.v4.media.MediaBrowserCompat.ConnectionCallback!, android.os.Bundle!);
    method public void connect();
    method public void disconnect();
    method void dump();
    method void forceCloseConnection();
    method public android.os.Bundle? getExtras();
    method public void getItem(String, android.support.v4.media.MediaBrowserCompat.ItemCallback);
    method public android.os.Bundle! getNotifyChildrenChangedOptions();
    method public String getRoot();
    method public android.content.ComponentName getServiceComponent();
    method public android.support.v4.media.session.MediaSessionCompat.Token getSessionToken();
    method private static String! getStateLabel(int);
    method public boolean isConnected();
    method private boolean isCurrent(android.os.Messenger!, String!);
    method public void onConnectionFailed(android.os.Messenger!);
    method public void onLoadChildren(android.os.Messenger!, String!, java.util.List!, android.os.Bundle!, android.os.Bundle!);
    method public void onServiceConnected(android.os.Messenger!, String!, android.support.v4.media.session.MediaSessionCompat.Token!, android.os.Bundle!);
    method public void search(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SearchCallback);
    method public void sendCustomAction(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.CustomActionCallback?);
    method public void subscribe(String, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback);
    method public void unsubscribe(String, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback!);
    field static final int CONNECT_STATE_CONNECTED = 3; // 0x3
    field static final int CONNECT_STATE_CONNECTING = 2; // 0x2
    field static final int CONNECT_STATE_DISCONNECTED = 1; // 0x1
    field static final int CONNECT_STATE_DISCONNECTING = 0; // 0x0
    field static final int CONNECT_STATE_SUSPENDED = 4; // 0x4
    field final android.support.v4.media.MediaBrowserCompat.ConnectionCallback! mCallback;
    field android.os.Messenger! mCallbacksMessenger;
    field final android.content.Context! mContext;
    field private android.os.Bundle! mExtras;
    field final android.support.v4.media.MediaBrowserCompat.CallbackHandler! mHandler;
    field private android.support.v4.media.session.MediaSessionCompat.Token! mMediaSessionToken;
    field private android.os.Bundle! mNotifyChildrenChangedOptions;
    field final android.os.Bundle! mRootHints;
    field private String! mRootId;
    field android.support.v4.media.MediaBrowserCompat.ServiceBinderWrapper! mServiceBinderWrapper;
    field final android.content.ComponentName! mServiceComponent;
    field android.support.v4.media.MediaBrowserCompat.MediaBrowserImplBase.MediaServiceConnection! mServiceConnection;
    field int mState;
    field private final androidx.collection.ArrayMap<java.lang.String,android.support.v4.media.MediaBrowserCompat.Subscription>! mSubscriptions;
  }

  private class MediaBrowserCompat.MediaBrowserImplBase.MediaServiceConnection implements android.content.ServiceConnection {
    ctor MediaBrowserCompat.MediaBrowserImplBase.MediaServiceConnection();
    method boolean isCurrent(String!);
    method private void postOrRun(Runnable!);
  }

  static interface MediaBrowserCompat.MediaBrowserServiceCallbackImpl {
    method public void onConnectionFailed(android.os.Messenger!);
    method public void onLoadChildren(android.os.Messenger!, String!, java.util.List!, android.os.Bundle!, android.os.Bundle!);
    method public void onServiceConnected(android.os.Messenger!, String!, android.support.v4.media.session.MediaSessionCompat.Token!, android.os.Bundle!);
  }

  public static class MediaBrowserCompat.MediaItem implements android.os.Parcelable {
    ctor MediaBrowserCompat.MediaItem(android.os.Parcel!);
    field private final android.support.v4.media.MediaDescriptionCompat! mDescription;
    field private final int mFlags;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef(flag=true, value={android.support.v4.media.MediaBrowserCompat.MediaItem.FLAG_BROWSABLE, android.support.v4.media.MediaBrowserCompat.MediaItem.FLAG_PLAYABLE}) public static @interface MediaBrowserCompat.MediaItem.Flags {
  }

  private static class MediaBrowserCompat.SearchResultReceiver extends android.support.v4.os.ResultReceiver {
    ctor MediaBrowserCompat.SearchResultReceiver(String!, android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SearchCallback!, android.os.Handler!);
    field private final android.support.v4.media.MediaBrowserCompat.SearchCallback! mCallback;
    field private final android.os.Bundle! mExtras;
    field private final String! mQuery;
  }

  private static class MediaBrowserCompat.ServiceBinderWrapper {
    ctor public MediaBrowserCompat.ServiceBinderWrapper(android.os.IBinder!, android.os.Bundle!);
    method void addSubscription(String!, android.os.IBinder!, android.os.Bundle!, android.os.Messenger!) throws android.os.RemoteException;
    method void connect(android.content.Context!, android.os.Messenger!) throws android.os.RemoteException;
    method void disconnect(android.os.Messenger!) throws android.os.RemoteException;
    method void getMediaItem(String!, android.support.v4.os.ResultReceiver!, android.os.Messenger!) throws android.os.RemoteException;
    method void registerCallbackMessenger(android.content.Context!, android.os.Messenger!) throws android.os.RemoteException;
    method void removeSubscription(String!, android.os.IBinder!, android.os.Messenger!) throws android.os.RemoteException;
    method void search(String!, android.os.Bundle!, android.support.v4.os.ResultReceiver!, android.os.Messenger!) throws android.os.RemoteException;
    method void sendCustomAction(String!, android.os.Bundle!, android.support.v4.os.ResultReceiver!, android.os.Messenger!) throws android.os.RemoteException;
    method private void sendRequest(int, android.os.Bundle!, android.os.Messenger!) throws android.os.RemoteException;
    method void unregisterCallbackMessenger(android.os.Messenger!) throws android.os.RemoteException;
    field private android.os.Messenger! mMessenger;
    field private android.os.Bundle! mRootHints;
  }

  private static class MediaBrowserCompat.Subscription {
    ctor public MediaBrowserCompat.Subscription();
    method public android.support.v4.media.MediaBrowserCompat.SubscriptionCallback! getCallback(android.os.Bundle!);
    method public java.util.List<android.support.v4.media.MediaBrowserCompat.SubscriptionCallback>! getCallbacks();
    method public java.util.List<android.os.Bundle>! getOptionsList();
    method public boolean isEmpty();
    method public void putCallback(android.os.Bundle!, android.support.v4.media.MediaBrowserCompat.SubscriptionCallback!);
    field private final java.util.List<android.support.v4.media.MediaBrowserCompat.SubscriptionCallback>! mCallbacks;
    field private final java.util.List<android.os.Bundle>! mOptionsList;
  }

  public abstract static class MediaBrowserCompat.SubscriptionCallback {
    method void setSubscription(android.support.v4.media.MediaBrowserCompat.Subscription!);
    field final android.media.browse.MediaBrowser.SubscriptionCallback! mSubscriptionCallbackFwk;
    field java.lang.ref.WeakReference<android.support.v4.media.MediaBrowserCompat.Subscription>! mSubscriptionRef;
    field final android.os.IBinder! mToken;
  }

  @RequiresApi(21) private class MediaBrowserCompat.SubscriptionCallback.SubscriptionCallbackApi21 extends android.media.browse.MediaBrowser.SubscriptionCallback {
    ctor MediaBrowserCompat.SubscriptionCallback.SubscriptionCallbackApi21();
    method java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>! applyOptions(java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>!, android.os.Bundle!);
  }

  @RequiresApi(26) private class MediaBrowserCompat.SubscriptionCallback.SubscriptionCallbackApi26 extends android.support.v4.media.MediaBrowserCompat.SubscriptionCallback.SubscriptionCallbackApi21 {
    ctor MediaBrowserCompat.SubscriptionCallback.SubscriptionCallbackApi26();
  }

  public final class MediaDescriptionCompat implements android.os.Parcelable {
    ctor MediaDescriptionCompat(String!, CharSequence!, CharSequence!, CharSequence!, android.graphics.Bitmap!, android.net.Uri!, android.os.Bundle!, android.net.Uri!);
    ctor MediaDescriptionCompat(android.os.Parcel!);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String DESCRIPTION_KEY_MEDIA_URI = "android.support.v4.media.description.MEDIA_URI";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String DESCRIPTION_KEY_NULL_BUNDLE_FLAG = "android.support.v4.media.description.NULL_BUNDLE_FLAG";
    field private final CharSequence! mDescription;
    field private android.media.MediaDescription! mDescriptionFwk;
    field private final android.os.Bundle! mExtras;
    field private final android.graphics.Bitmap! mIcon;
    field private final android.net.Uri! mIconUri;
    field private final String! mMediaId;
    field private final android.net.Uri! mMediaUri;
    field private final CharSequence! mSubtitle;
    field private final CharSequence! mTitle;
  }

  public static final class MediaDescriptionCompat.Builder {
    field private CharSequence! mDescription;
    field private android.os.Bundle! mExtras;
    field private android.graphics.Bitmap! mIcon;
    field private android.net.Uri! mIconUri;
    field private String! mMediaId;
    field private android.net.Uri! mMediaUri;
    field private CharSequence! mSubtitle;
    field private CharSequence! mTitle;
  }

  public final class MediaMetadataCompat implements android.os.Parcelable {
    ctor MediaMetadataCompat(android.os.Bundle!);
    ctor MediaMetadataCompat(android.os.Parcel!);
    field static final androidx.collection.ArrayMap<java.lang.String,java.lang.Integer>! METADATA_KEYS_TYPE;
    field static final int METADATA_TYPE_BITMAP = 2; // 0x2
    field static final int METADATA_TYPE_LONG = 0; // 0x0
    field static final int METADATA_TYPE_RATING = 3; // 0x3
    field static final int METADATA_TYPE_TEXT = 1; // 0x1
    field private static final String[]! PREFERRED_BITMAP_ORDER;
    field private static final String[]! PREFERRED_DESCRIPTION_ORDER;
    field private static final String[]! PREFERRED_URI_ORDER;
    field private static final String TAG = "MediaMetadata";
    field final android.os.Bundle! mBundle;
    field private android.support.v4.media.MediaDescriptionCompat! mDescription;
    field private android.media.MediaMetadata! mMetadataFwk;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ART, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ALBUM_ART, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISPLAY_ICON}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadataCompat.BitmapKey {
  }

  public static final class MediaMetadataCompat.Builder {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public MediaMetadataCompat.Builder(android.support.v4.media.MediaMetadataCompat!, int);
    method private android.graphics.Bitmap! scaleBitmap(android.graphics.Bitmap!, int);
    field private final android.os.Bundle! mBundle;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef(value={android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DURATION, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_YEAR, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_TRACK_NUMBER, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_NUM_TRACKS, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISC_NUMBER, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_BT_FOLDER_TYPE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ADVERTISEMENT, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DOWNLOAD_STATUS}, open=true) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadataCompat.LongKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef({android.support.v4.media.MediaMetadataCompat.METADATA_KEY_USER_RATING, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_RATING}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadataCompat.RatingKey {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @StringDef(value={android.support.v4.media.MediaMetadataCompat.METADATA_KEY_TITLE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ARTIST, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ALBUM, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_AUTHOR, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_WRITER, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_COMPOSER, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_COMPILATION, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DATE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_GENRE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ALBUM_ARTIST, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ART_URI, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISPLAY_TITLE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISPLAY_SUBTITLE, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISPLAY_DESCRIPTION, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_DISPLAY_ICON_URI, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_MEDIA_ID, android.support.v4.media.MediaMetadataCompat.METADATA_KEY_MEDIA_URI}, open=true) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaMetadataCompat.TextKey {
  }

  public final class RatingCompat implements android.os.Parcelable {
    ctor RatingCompat(int, float);
    field private static final float RATING_NOT_RATED = -1.0f;
    field private static final String TAG = "Rating";
    field private Object! mRatingObj;
    field private final int mRatingStyle;
    field private final float mRatingValue;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.RatingCompat.RATING_3_STARS, android.support.v4.media.RatingCompat.RATING_4_STARS, android.support.v4.media.RatingCompat.RATING_5_STARS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface RatingCompat.StarStyle {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.RatingCompat.RATING_NONE, android.support.v4.media.RatingCompat.RATING_HEART, android.support.v4.media.RatingCompat.RATING_THUMB_UP_DOWN, android.support.v4.media.RatingCompat.RATING_3_STARS, android.support.v4.media.RatingCompat.RATING_4_STARS, android.support.v4.media.RatingCompat.RATING_5_STARS, android.support.v4.media.RatingCompat.RATING_PERCENTAGE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface RatingCompat.Style {
  }

}

package android.support.v4.media.session {

  public final class MediaControllerCompat {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.versionedparcelable.VersionedParcelable? getSessionToken2();
    method static void validateCustomAction(String!, android.os.Bundle!);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_ADD_QUEUE_ITEM = "android.support.v4.media.session.command.ADD_QUEUE_ITEM";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_ADD_QUEUE_ITEM_AT = "android.support.v4.media.session.command.ADD_QUEUE_ITEM_AT";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_ARGUMENT_INDEX = "android.support.v4.media.session.command.ARGUMENT_INDEX";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_ARGUMENT_MEDIA_DESCRIPTION = "android.support.v4.media.session.command.ARGUMENT_MEDIA_DESCRIPTION";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_GET_EXTRA_BINDER = "android.support.v4.media.session.command.GET_EXTRA_BINDER";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_REMOVE_QUEUE_ITEM = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String COMMAND_REMOVE_QUEUE_ITEM_AT = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM_AT";
    field static final String TAG = "MediaControllerCompat";
    field private final android.support.v4.media.session.MediaControllerCompat.MediaControllerImpl! mImpl;
    field private final java.util.concurrent.ConcurrentHashMap<android.support.v4.media.session.MediaControllerCompat.Callback,java.lang.Boolean>! mRegisteredCallbacks;
    field private final android.support.v4.media.session.MediaSessionCompat.Token! mToken;
  }

  public abstract static class MediaControllerCompat.Callback implements android.os.IBinder.DeathRecipient {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public IMediaControllerCallback! getIControllerCallback();
    method void postToHandler(int, Object!, android.os.Bundle!);
    method void setHandler(android.os.Handler!);
    field final android.media.session.MediaController.Callback! mCallbackFwk;
    field android.support.v4.media.session.MediaControllerCompat.Callback.MessageHandler! mHandler;
    field IMediaControllerCallback! mIControllerCallback;
  }

  @RequiresApi(21) private static class MediaControllerCompat.Callback.MediaControllerCallbackApi21 extends android.media.session.MediaController.Callback {
    ctor MediaControllerCompat.Callback.MediaControllerCallbackApi21(android.support.v4.media.session.MediaControllerCompat.Callback!);
    field private final java.lang.ref.WeakReference<android.support.v4.media.session.MediaControllerCompat.Callback>! mCallback;
  }

  private class MediaControllerCompat.Callback.MessageHandler extends android.os.Handler {
    ctor MediaControllerCompat.Callback.MessageHandler(android.os.Looper!);
    field private static final int MSG_DESTROYED = 8; // 0x8
    field private static final int MSG_EVENT = 1; // 0x1
    field private static final int MSG_SESSION_READY = 13; // 0xd
    field private static final int MSG_UPDATE_CAPTIONING_ENABLED = 11; // 0xb
    field private static final int MSG_UPDATE_EXTRAS = 7; // 0x7
    field private static final int MSG_UPDATE_METADATA = 3; // 0x3
    field private static final int MSG_UPDATE_PLAYBACK_STATE = 2; // 0x2
    field private static final int MSG_UPDATE_QUEUE = 5; // 0x5
    field private static final int MSG_UPDATE_QUEUE_TITLE = 6; // 0x6
    field private static final int MSG_UPDATE_REPEAT_MODE = 9; // 0x9
    field private static final int MSG_UPDATE_SHUFFLE_MODE = 12; // 0xc
    field private static final int MSG_UPDATE_VOLUME = 4; // 0x4
    field boolean mRegistered;
  }

  private static class MediaControllerCompat.Callback.StubCompat {
    ctor MediaControllerCompat.Callback.StubCompat(android.support.v4.media.session.MediaControllerCompat.Callback!);
    method public void onCaptioningEnabledChanged(boolean) throws android.os.RemoteException;
    method public void onEvent(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void onExtrasChanged(android.os.Bundle!) throws android.os.RemoteException;
    method public void onMetadataChanged(android.support.v4.media.MediaMetadataCompat!) throws android.os.RemoteException;
    method public void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat!) throws android.os.RemoteException;
    method public void onQueueChanged(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!) throws android.os.RemoteException;
    method public void onQueueTitleChanged(CharSequence!) throws android.os.RemoteException;
    method public void onRepeatModeChanged(int) throws android.os.RemoteException;
    method public void onSessionDestroyed() throws android.os.RemoteException;
    method public void onSessionReady() throws android.os.RemoteException;
    method public void onShuffleModeChanged(int) throws android.os.RemoteException;
    method public void onShuffleModeChangedRemoved(boolean) throws android.os.RemoteException;
    method public void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo!) throws android.os.RemoteException;
    field private final java.lang.ref.WeakReference<android.support.v4.media.session.MediaControllerCompat.Callback>! mCallback;
  }

  private static class MediaControllerCompat.MediaControllerExtraData extends androidx.core.app.ComponentActivity.ExtraData {
    ctor MediaControllerCompat.MediaControllerExtraData(android.support.v4.media.session.MediaControllerCompat!);
    method android.support.v4.media.session.MediaControllerCompat! getMediaController();
    field private final android.support.v4.media.session.MediaControllerCompat! mMediaController;
  }

  static interface MediaControllerCompat.MediaControllerImpl {
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!, int);
    method public void adjustVolume(int, int);
    method public boolean dispatchMediaButtonEvent(android.view.KeyEvent!);
    method public android.os.Bundle! getExtras();
    method public long getFlags();
    method public Object! getMediaController();
    method public android.support.v4.media.MediaMetadataCompat! getMetadata();
    method public String! getPackageName();
    method public android.support.v4.media.session.MediaControllerCompat.PlaybackInfo! getPlaybackInfo();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! getQueue();
    method public CharSequence! getQueueTitle();
    method public int getRatingType();
    method public int getRepeatMode();
    method public android.app.PendingIntent! getSessionActivity();
    method public int getShuffleMode();
    method public android.support.v4.media.session.MediaControllerCompat.TransportControls! getTransportControls();
    method public boolean isCaptioningEnabled();
    method public boolean isSessionReady();
    method public void registerCallback(android.support.v4.media.session.MediaControllerCompat.Callback!, android.os.Handler!);
    method public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void sendCommand(String!, android.os.Bundle!, android.os.ResultReceiver!);
    method public void setVolumeTo(int, int);
    method public void unregisterCallback(android.support.v4.media.session.MediaControllerCompat.Callback!);
  }

  @RequiresApi(21) static class MediaControllerCompat.MediaControllerImplApi21 implements android.support.v4.media.session.MediaControllerCompat.MediaControllerImpl {
    ctor public MediaControllerCompat.MediaControllerImplApi21(android.content.Context!, android.support.v4.media.session.MediaSessionCompat.Token!) throws android.os.RemoteException;
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!, int);
    method public void adjustVolume(int, int);
    method public boolean dispatchMediaButtonEvent(android.view.KeyEvent!);
    method public android.os.Bundle! getExtras();
    method public long getFlags();
    method public Object! getMediaController();
    method public android.support.v4.media.MediaMetadataCompat! getMetadata();
    method public String! getPackageName();
    method public android.support.v4.media.session.MediaControllerCompat.PlaybackInfo! getPlaybackInfo();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! getQueue();
    method public CharSequence! getQueueTitle();
    method public int getRatingType();
    method public int getRepeatMode();
    method public android.app.PendingIntent! getSessionActivity();
    method public int getShuffleMode();
    method public android.support.v4.media.session.MediaControllerCompat.TransportControls! getTransportControls();
    method public boolean isCaptioningEnabled();
    method public boolean isSessionReady();
    method @GuardedBy("mLock") void processPendingCallbacksLocked();
    method public final void registerCallback(android.support.v4.media.session.MediaControllerCompat.Callback!, android.os.Handler!);
    method public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method private void requestExtraBinder();
    method public void sendCommand(String!, android.os.Bundle!, android.os.ResultReceiver!);
    method public void setVolumeTo(int, int);
    method public final void unregisterCallback(android.support.v4.media.session.MediaControllerCompat.Callback!);
    field private java.util.HashMap<android.support.v4.media.session.MediaControllerCompat.Callback,android.support.v4.media.session.MediaControllerCompat.MediaControllerImplApi21.ExtraCallback>! mCallbackMap;
    field protected final android.media.session.MediaController! mControllerFwk;
    field final Object! mLock;
    field @GuardedBy("mLock") private final java.util.List<android.support.v4.media.session.MediaControllerCompat.Callback>! mPendingCallbacks;
    field final android.support.v4.media.session.MediaSessionCompat.Token! mSessionToken;
  }

  private static class MediaControllerCompat.MediaControllerImplApi21.ExtraBinderRequestResultReceiver extends android.os.ResultReceiver {
    ctor MediaControllerCompat.MediaControllerImplApi21.ExtraBinderRequestResultReceiver(android.support.v4.media.session.MediaControllerCompat.MediaControllerImplApi21!);
    field private java.lang.ref.WeakReference<android.support.v4.media.session.MediaControllerCompat.MediaControllerImplApi21>! mMediaControllerImpl;
  }

  private static class MediaControllerCompat.MediaControllerImplApi21.ExtraCallback extends android.support.v4.media.session.MediaControllerCompat.Callback.StubCompat {
    ctor MediaControllerCompat.MediaControllerImplApi21.ExtraCallback(android.support.v4.media.session.MediaControllerCompat.Callback!);
    method public void onExtrasChanged(android.os.Bundle!) throws android.os.RemoteException;
    method public void onMetadataChanged(android.support.v4.media.MediaMetadataCompat!) throws android.os.RemoteException;
    method public void onQueueChanged(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!) throws android.os.RemoteException;
    method public void onQueueTitleChanged(CharSequence!) throws android.os.RemoteException;
    method public void onSessionDestroyed() throws android.os.RemoteException;
    method public void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo!) throws android.os.RemoteException;
  }

  static class MediaControllerCompat.MediaControllerImplBase implements android.support.v4.media.session.MediaControllerCompat.MediaControllerImpl {
    ctor public MediaControllerCompat.MediaControllerImplBase(android.support.v4.media.session.MediaSessionCompat.Token!);
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!, int);
    method public void adjustVolume(int, int);
    method public boolean dispatchMediaButtonEvent(android.view.KeyEvent!);
    method public android.os.Bundle! getExtras();
    method public long getFlags();
    method public Object! getMediaController();
    method public android.support.v4.media.MediaMetadataCompat! getMetadata();
    method public String! getPackageName();
    method public android.support.v4.media.session.MediaControllerCompat.PlaybackInfo! getPlaybackInfo();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! getQueue();
    method public CharSequence! getQueueTitle();
    method public int getRatingType();
    method public int getRepeatMode();
    method public android.app.PendingIntent! getSessionActivity();
    method public int getShuffleMode();
    method public android.support.v4.media.session.MediaControllerCompat.TransportControls! getTransportControls();
    method public boolean isCaptioningEnabled();
    method public boolean isSessionReady();
    method public void registerCallback(android.support.v4.media.session.MediaControllerCompat.Callback!, android.os.Handler!);
    method public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void sendCommand(String!, android.os.Bundle!, android.os.ResultReceiver!);
    method public void setVolumeTo(int, int);
    method public void unregisterCallback(android.support.v4.media.session.MediaControllerCompat.Callback!);
    field private IMediaSession! mBinder;
    field private android.support.v4.media.session.MediaControllerCompat.TransportControls! mTransportControls;
  }

  public static final class MediaControllerCompat.PlaybackInfo {
    ctor MediaControllerCompat.PlaybackInfo(int, int, int, int, int);
    method @RequiresApi(21) static int toLegacyStreamType(android.media.AudioAttributes!);
    field private final int mAudioStream;
    field private final int mCurrentVolume;
    field private final int mMaxVolume;
    field private final int mPlaybackType;
    field private final int mVolumeControl;
  }

  public abstract static class MediaControllerCompat.TransportControls {
    ctor MediaControllerCompat.TransportControls();
  }

  @RequiresApi(21) static class MediaControllerCompat.TransportControlsApi21 extends android.support.v4.media.session.MediaControllerCompat.TransportControls {
    ctor MediaControllerCompat.TransportControlsApi21(android.media.session.MediaController.TransportControls!);
    field protected final android.media.session.MediaController.TransportControls! mControlsFwk;
  }

  static class MediaControllerCompat.TransportControlsBase extends android.support.v4.media.session.MediaControllerCompat.TransportControls {
    ctor public MediaControllerCompat.TransportControlsBase(IMediaSession!);
    field private IMediaSession! mBinder;
  }

  public class MediaSessionCompat {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public MediaSessionCompat(android.content.Context!, String!, androidx.versionedparcelable.VersionedParcelable!);
    ctor private MediaSessionCompat(android.content.Context!, String!, android.content.ComponentName!, android.app.PendingIntent!, androidx.versionedparcelable.VersionedParcelable!);
    ctor private MediaSessionCompat(android.content.Context!, android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void ensureClassLoader(android.os.Bundle?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public String! getCallingPackage();
    method static android.support.v4.media.session.PlaybackStateCompat! getStateWithUpdatedPosition(android.support.v4.media.session.PlaybackStateCompat!, android.support.v4.media.MediaMetadataCompat!);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_CAPTIONING_ENABLED = "android.support.v4.media.session.action.ARGUMENT_CAPTIONING_ENABLED";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_EXTRAS = "android.support.v4.media.session.action.ARGUMENT_EXTRAS";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_MEDIA_ID = "android.support.v4.media.session.action.ARGUMENT_MEDIA_ID";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_QUERY = "android.support.v4.media.session.action.ARGUMENT_QUERY";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_RATING = "android.support.v4.media.session.action.ARGUMENT_RATING";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_REPEAT_MODE = "android.support.v4.media.session.action.ARGUMENT_REPEAT_MODE";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_SHUFFLE_MODE = "android.support.v4.media.session.action.ARGUMENT_SHUFFLE_MODE";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_ARGUMENT_URI = "android.support.v4.media.session.action.ARGUMENT_URI";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_PLAY_FROM_URI = "android.support.v4.media.session.action.PLAY_FROM_URI";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_PREPARE = "android.support.v4.media.session.action.PREPARE";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_PREPARE_FROM_MEDIA_ID = "android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_PREPARE_FROM_SEARCH = "android.support.v4.media.session.action.PREPARE_FROM_SEARCH";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_PREPARE_FROM_URI = "android.support.v4.media.session.action.PREPARE_FROM_URI";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_SET_CAPTIONING_ENABLED = "android.support.v4.media.session.action.SET_CAPTIONING_ENABLED";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_SET_RATING = "android.support.v4.media.session.action.SET_RATING";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_SET_REPEAT_MODE = "android.support.v4.media.session.action.SET_REPEAT_MODE";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String ACTION_SET_SHUFFLE_MODE = "android.support.v4.media.session.action.SET_SHUFFLE_MODE";
    field private static final String DATA_CALLING_PACKAGE = "data_calling_pkg";
    field private static final String DATA_CALLING_PID = "data_calling_pid";
    field private static final String DATA_CALLING_UID = "data_calling_uid";
    field private static final String DATA_EXTRAS = "data_extras";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String KEY_EXTRA_BINDER = "android.support.v4.media.session.EXTRA_BINDER";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String KEY_SESSION_TOKEN2 = "android.support.v4.media.session.SESSION_TOKEN2";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String KEY_TOKEN = "android.support.v4.media.session.TOKEN";
    field private static final int MAX_BITMAP_SIZE_IN_DP = 320; // 0x140
    field static final String TAG = "MediaSessionCompat";
    field private final java.util.ArrayList<android.support.v4.media.session.MediaSessionCompat.OnActiveChangeListener>! mActiveListeners;
    field private final android.support.v4.media.session.MediaControllerCompat! mController;
    field private final android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl! mImpl;
    field static int sMaxBitmapSize;
  }

  public abstract static class MediaSessionCompat.Callback {
    method void handleMediaPlayPauseKeySingleTapIfPending();
    method void setSessionImpl(android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl!, android.os.Handler!);
    field final android.media.session.MediaSession.Callback! mCallbackFwk;
    field private android.support.v4.media.session.MediaSessionCompat.Callback.CallbackHandler! mCallbackHandler;
    field private boolean mMediaPlayPauseKeyPending;
    field java.lang.ref.WeakReference<android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl>! mSessionImpl;
  }

  private class MediaSessionCompat.Callback.CallbackHandler extends android.os.Handler {
    ctor MediaSessionCompat.Callback.CallbackHandler(android.os.Looper!);
    field private static final int MSG_MEDIA_PLAY_PAUSE_KEY_DOUBLE_TAP_TIMEOUT = 1; // 0x1
  }

  @RequiresApi(21) private class MediaSessionCompat.Callback.MediaSessionCallbackApi21 extends android.media.session.MediaSession.Callback {
    ctor MediaSessionCompat.Callback.MediaSessionCallbackApi21();
    method void clearCurrentControllerInfo();
    method public void onSetRating(android.media.Rating!, android.os.Bundle!);
    method void setCurrentControllerInfo();
  }

  static interface MediaSessionCompat.MediaSessionImpl {
    method public String! getCallingPackage();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentControllerInfo();
    method public Object! getMediaSession();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public Object! getRemoteControlClient();
    method public android.support.v4.media.session.MediaSessionCompat.Token! getSessionToken();
    method public boolean isActive();
    method public void release();
    method public void sendSessionEvent(String!, android.os.Bundle!);
    method public void setActive(boolean);
    method public void setCallback(android.support.v4.media.session.MediaSessionCompat.Callback!, android.os.Handler!);
    method public void setCaptioningEnabled(boolean);
    method public void setCurrentControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method public void setExtras(android.os.Bundle!);
    method public void setFlags(int);
    method public void setMediaButtonReceiver(android.app.PendingIntent!);
    method public void setMetadata(android.support.v4.media.MediaMetadataCompat!);
    method public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat!);
    method public void setPlaybackToLocal(int);
    method public void setPlaybackToRemote(androidx.media.VolumeProviderCompat!);
    method public void setQueue(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!);
    method public void setQueueTitle(CharSequence!);
    method public void setRatingType(int);
    method public void setRepeatMode(int);
    method public void setSessionActivity(android.app.PendingIntent!);
    method public void setShuffleMode(int);
  }

  @RequiresApi(18) static class MediaSessionCompat.MediaSessionImplApi18 extends android.support.v4.media.session.MediaSessionCompat.MediaSessionImplBase {
    ctor MediaSessionCompat.MediaSessionImplApi18(android.content.Context!, String!, android.content.ComponentName!, android.app.PendingIntent!);
    method int getRccTransportControlFlagsFromActions(long);
    method void registerMediaButtonEventReceiver(android.app.PendingIntent!, android.content.ComponentName!);
    method public void setCallback(android.support.v4.media.session.MediaSessionCompat.Callback!, android.os.Handler!);
    method void setRccState(android.support.v4.media.session.PlaybackStateCompat!);
    method void unregisterMediaButtonEventReceiver(android.app.PendingIntent!, android.content.ComponentName!);
    field private static boolean sIsMbrPendingIntentSupported;
  }

  @RequiresApi(19) static class MediaSessionCompat.MediaSessionImplApi19 extends android.support.v4.media.session.MediaSessionCompat.MediaSessionImplApi18 {
    ctor MediaSessionCompat.MediaSessionImplApi19(android.content.Context!, String!, android.content.ComponentName!, android.app.PendingIntent!);
    method android.media.RemoteControlClient.MetadataEditor! buildRccMetadata(android.os.Bundle!);
    method int getRccTransportControlFlagsFromActions(long);
    method public void setCallback(android.support.v4.media.session.MediaSessionCompat.Callback!, android.os.Handler!);
  }

  @RequiresApi(21) static class MediaSessionCompat.MediaSessionImplApi21 implements android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl {
    ctor MediaSessionCompat.MediaSessionImplApi21(android.content.Context!, String!, androidx.versionedparcelable.VersionedParcelable!);
    ctor MediaSessionCompat.MediaSessionImplApi21(Object!);
    method public String! getCallingPackage();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentControllerInfo();
    method public Object! getMediaSession();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public Object! getRemoteControlClient();
    method public android.support.v4.media.session.MediaSessionCompat.Token! getSessionToken();
    method public boolean isActive();
    method public void release();
    method public void sendSessionEvent(String!, android.os.Bundle!);
    method public void setActive(boolean);
    method public void setCallback(android.support.v4.media.session.MediaSessionCompat.Callback!, android.os.Handler!);
    method public void setCaptioningEnabled(boolean);
    method public void setCurrentControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method public void setExtras(android.os.Bundle!);
    method public void setFlags(int);
    method public void setMediaButtonReceiver(android.app.PendingIntent!);
    method public void setMetadata(android.support.v4.media.MediaMetadataCompat!);
    method public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat!);
    method public void setPlaybackToLocal(int);
    method public void setPlaybackToRemote(androidx.media.VolumeProviderCompat!);
    method public void setQueue(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!);
    method public void setQueueTitle(CharSequence!);
    method public void setRatingType(int);
    method public void setRepeatMode(int);
    method public void setSessionActivity(android.app.PendingIntent!);
    method public void setShuffleMode(int);
    field boolean mCaptioningEnabled;
    field boolean mDestroyed;
    field final android.os.RemoteCallbackList<IMediaControllerCallback>! mExtraControllerCallbacks;
    field final Object! mLock;
    field android.support.v4.media.MediaMetadataCompat! mMetadata;
    field android.support.v4.media.session.PlaybackStateCompat! mPlaybackState;
    field java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! mQueue;
    field int mRatingType;
    field @GuardedBy("mLock") androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
    field int mRepeatMode;
    field final android.media.session.MediaSession! mSessionFwk;
    field int mShuffleMode;
    field final android.support.v4.media.session.MediaSessionCompat.Token! mToken;
  }

  class MediaSessionCompat.MediaSessionImplApi21.ExtraSession {
    ctor MediaSessionCompat.MediaSessionImplApi21.ExtraSession();
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void addQueueItemAt(android.support.v4.media.MediaDescriptionCompat!, int);
    method public void adjustVolume(int, int, String!);
    method public void fastForward() throws android.os.RemoteException;
    method public android.os.Bundle! getExtras();
    method public long getFlags();
    method public android.app.PendingIntent! getLaunchPendingIntent();
    method public android.support.v4.media.MediaMetadataCompat! getMetadata();
    method public String! getPackageName();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! getQueue();
    method public CharSequence! getQueueTitle();
    method public int getRatingType();
    method public int getRepeatMode();
    method public int getShuffleMode();
    method public String! getTag();
    method public android.support.v4.media.session.ParcelableVolumeInfo! getVolumeAttributes();
    method public boolean isCaptioningEnabled();
    method public boolean isShuffleModeEnabledRemoved();
    method public boolean isTransportControlEnabled();
    method public void next() throws android.os.RemoteException;
    method public void pause() throws android.os.RemoteException;
    method public void play() throws android.os.RemoteException;
    method public void playFromMediaId(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void playFromSearch(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void playFromUri(android.net.Uri!, android.os.Bundle!) throws android.os.RemoteException;
    method public void prepare() throws android.os.RemoteException;
    method public void prepareFromMediaId(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void prepareFromSearch(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void prepareFromUri(android.net.Uri!, android.os.Bundle!) throws android.os.RemoteException;
    method public void previous() throws android.os.RemoteException;
    method public void rate(android.support.v4.media.RatingCompat!) throws android.os.RemoteException;
    method public void rateWithExtras(android.support.v4.media.RatingCompat!, android.os.Bundle!) throws android.os.RemoteException;
    method public void registerCallbackListener(IMediaControllerCallback!);
    method public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void removeQueueItemAt(int);
    method public void rewind() throws android.os.RemoteException;
    method public void seekTo(long) throws android.os.RemoteException;
    method public void sendCommand(String!, android.os.Bundle!, android.support.v4.media.session.MediaSessionCompat.ResultReceiverWrapper!);
    method public void sendCustomAction(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public boolean sendMediaButton(android.view.KeyEvent!);
    method public void setCaptioningEnabled(boolean) throws android.os.RemoteException;
    method public void setRepeatMode(int) throws android.os.RemoteException;
    method public void setShuffleMode(int) throws android.os.RemoteException;
    method public void setShuffleModeEnabledRemoved(boolean) throws android.os.RemoteException;
    method public void setVolumeTo(int, int, String!);
    method public void skipToQueueItem(long);
    method public void stop() throws android.os.RemoteException;
    method public void unregisterCallbackListener(IMediaControllerCallback!);
  }

  @RequiresApi(28) static class MediaSessionCompat.MediaSessionImplApi28 extends android.support.v4.media.session.MediaSessionCompat.MediaSessionImplApi21 {
    ctor MediaSessionCompat.MediaSessionImplApi28(android.content.Context!, String!, androidx.versionedparcelable.VersionedParcelable!);
    ctor MediaSessionCompat.MediaSessionImplApi28(Object!);
    method public final androidx.media.MediaSessionManager.RemoteUserInfo getCurrentControllerInfo();
    method public void setCurrentControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
  }

  static class MediaSessionCompat.MediaSessionImplBase implements android.support.v4.media.session.MediaSessionCompat.MediaSessionImpl {
    ctor public MediaSessionCompat.MediaSessionImplBase(android.content.Context!, String!, android.content.ComponentName!, android.app.PendingIntent!);
    method void adjustVolume(int, int);
    method android.media.RemoteControlClient.MetadataEditor! buildRccMetadata(android.os.Bundle!);
    method public String! getCallingPackage();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentControllerInfo();
    method public Object! getMediaSession();
    method String! getPackageNameForUid(int);
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method int getRccStateFromState(int);
    method int getRccTransportControlFlagsFromActions(long);
    method public Object! getRemoteControlClient();
    method public android.support.v4.media.session.MediaSessionCompat.Token! getSessionToken();
    method public boolean isActive();
    method void postToHandler(int, int, int, Object!, android.os.Bundle!);
    method void registerMediaButtonEventReceiver(android.app.PendingIntent!, android.content.ComponentName!);
    method public void release();
    method private void sendCaptioningEnabled(boolean);
    method private void sendEvent(String!, android.os.Bundle!);
    method private void sendExtras(android.os.Bundle!);
    method private void sendMetadata(android.support.v4.media.MediaMetadataCompat!);
    method private void sendQueue(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!);
    method private void sendQueueTitle(CharSequence!);
    method private void sendRepeatMode(int);
    method private void sendSessionDestroyed();
    method public void sendSessionEvent(String!, android.os.Bundle!);
    method private void sendShuffleMode(int);
    method private void sendState(android.support.v4.media.session.PlaybackStateCompat!);
    method void sendVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo!);
    method public void setActive(boolean);
    method public void setCallback(android.support.v4.media.session.MediaSessionCompat.Callback!, android.os.Handler!);
    method public void setCaptioningEnabled(boolean);
    method public void setCurrentControllerInfo(androidx.media.MediaSessionManager.RemoteUserInfo!);
    method public void setExtras(android.os.Bundle!);
    method public void setFlags(int);
    method public void setMediaButtonReceiver(android.app.PendingIntent!);
    method public void setMetadata(android.support.v4.media.MediaMetadataCompat!);
    method public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat!);
    method public void setPlaybackToLocal(int);
    method public void setPlaybackToRemote(androidx.media.VolumeProviderCompat!);
    method public void setQueue(java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>!);
    method public void setQueueTitle(CharSequence!);
    method public void setRatingType(int);
    method void setRccState(android.support.v4.media.session.PlaybackStateCompat!);
    method public void setRepeatMode(int);
    method public void setSessionActivity(android.app.PendingIntent!);
    method public void setShuffleMode(int);
    method void setVolumeTo(int, int);
    method void unregisterMediaButtonEventReceiver(android.app.PendingIntent!, android.content.ComponentName!);
    method void updateMbrAndRcc();
    field static final int RCC_PLAYSTATE_NONE = 0; // 0x0
    field final android.media.AudioManager! mAudioManager;
    field volatile android.support.v4.media.session.MediaSessionCompat.Callback! mCallback;
    field boolean mCaptioningEnabled;
    field private final android.content.Context! mContext;
    field final android.os.RemoteCallbackList<IMediaControllerCallback>! mControllerCallbacks;
    field boolean mDestroyed;
    field android.os.Bundle! mExtras;
    field int mFlags;
    field private android.support.v4.media.session.MediaSessionCompat.MediaSessionImplBase.MessageHandler! mHandler;
    field boolean mIsActive;
    field int mLocalStream;
    field final Object! mLock;
    field private final android.content.ComponentName! mMediaButtonReceiverComponentName;
    field private final android.app.PendingIntent! mMediaButtonReceiverIntent;
    field android.support.v4.media.MediaMetadataCompat! mMetadata;
    field final String! mPackageName;
    field java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! mQueue;
    field CharSequence! mQueueTitle;
    field int mRatingType;
    field final android.media.RemoteControlClient! mRcc;
    field private androidx.media.MediaSessionManager.RemoteUserInfo! mRemoteUserInfo;
    field int mRepeatMode;
    field android.app.PendingIntent! mSessionActivity;
    field int mShuffleMode;
    field android.support.v4.media.session.PlaybackStateCompat! mState;
    field private final android.support.v4.media.session.MediaSessionCompat.MediaSessionImplBase.MediaSessionStub! mStub;
    field final String! mTag;
    field private final android.support.v4.media.session.MediaSessionCompat.Token! mToken;
    field private androidx.media.VolumeProviderCompat.Callback! mVolumeCallback;
    field androidx.media.VolumeProviderCompat! mVolumeProvider;
    field int mVolumeType;
  }

  private static final class MediaSessionCompat.MediaSessionImplBase.Command {
    ctor public MediaSessionCompat.MediaSessionImplBase.Command(String!, android.os.Bundle!, android.os.ResultReceiver!);
    field public final String! command;
    field public final android.os.Bundle! extras;
    field public final android.os.ResultReceiver! stub;
  }

  class MediaSessionCompat.MediaSessionImplBase.MediaSessionStub {
    ctor MediaSessionCompat.MediaSessionImplBase.MediaSessionStub();
    method public void addQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void addQueueItemAt(android.support.v4.media.MediaDescriptionCompat!, int);
    method public void adjustVolume(int, int, String!);
    method public void fastForward() throws android.os.RemoteException;
    method public android.os.Bundle! getExtras();
    method public long getFlags();
    method public android.app.PendingIntent! getLaunchPendingIntent();
    method public android.support.v4.media.MediaMetadataCompat! getMetadata();
    method public String! getPackageName();
    method public android.support.v4.media.session.PlaybackStateCompat! getPlaybackState();
    method public java.util.List<android.support.v4.media.session.MediaSessionCompat.QueueItem>! getQueue();
    method public CharSequence! getQueueTitle();
    method public int getRatingType();
    method public int getRepeatMode();
    method public int getShuffleMode();
    method public String! getTag();
    method public android.support.v4.media.session.ParcelableVolumeInfo! getVolumeAttributes();
    method public boolean isCaptioningEnabled();
    method public boolean isShuffleModeEnabledRemoved();
    method public boolean isTransportControlEnabled();
    method public void next() throws android.os.RemoteException;
    method public void pause() throws android.os.RemoteException;
    method public void play() throws android.os.RemoteException;
    method public void playFromMediaId(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void playFromSearch(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void playFromUri(android.net.Uri!, android.os.Bundle!) throws android.os.RemoteException;
    method void postToHandler(int);
    method void postToHandler(int, int);
    method void postToHandler(int, Object!);
    method void postToHandler(int, Object!, int);
    method void postToHandler(int, Object!, android.os.Bundle!);
    method public void prepare() throws android.os.RemoteException;
    method public void prepareFromMediaId(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void prepareFromSearch(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public void prepareFromUri(android.net.Uri!, android.os.Bundle!) throws android.os.RemoteException;
    method public void previous() throws android.os.RemoteException;
    method public void rate(android.support.v4.media.RatingCompat!) throws android.os.RemoteException;
    method public void rateWithExtras(android.support.v4.media.RatingCompat!, android.os.Bundle!) throws android.os.RemoteException;
    method public void registerCallbackListener(IMediaControllerCallback!);
    method public void removeQueueItem(android.support.v4.media.MediaDescriptionCompat!);
    method public void removeQueueItemAt(int);
    method public void rewind() throws android.os.RemoteException;
    method public void seekTo(long) throws android.os.RemoteException;
    method public void sendCommand(String!, android.os.Bundle!, android.support.v4.media.session.MediaSessionCompat.ResultReceiverWrapper!);
    method public void sendCustomAction(String!, android.os.Bundle!) throws android.os.RemoteException;
    method public boolean sendMediaButton(android.view.KeyEvent!);
    method public void setCaptioningEnabled(boolean) throws android.os.RemoteException;
    method public void setRepeatMode(int) throws android.os.RemoteException;
    method public void setShuffleMode(int) throws android.os.RemoteException;
    method public void setShuffleModeEnabledRemoved(boolean) throws android.os.RemoteException;
    method public void setVolumeTo(int, int, String!);
    method public void skipToQueueItem(long);
    method public void stop() throws android.os.RemoteException;
    method public void unregisterCallbackListener(IMediaControllerCallback!);
  }

  class MediaSessionCompat.MediaSessionImplBase.MessageHandler extends android.os.Handler {
    ctor public MediaSessionCompat.MediaSessionImplBase.MessageHandler(android.os.Looper!);
    method private void onMediaButtonEvent(android.view.KeyEvent!, android.support.v4.media.session.MediaSessionCompat.Callback!);
    field private static final int KEYCODE_MEDIA_PAUSE = 127; // 0x7f
    field private static final int KEYCODE_MEDIA_PLAY = 126; // 0x7e
    field private static final int MSG_ADD_QUEUE_ITEM = 25; // 0x19
    field private static final int MSG_ADD_QUEUE_ITEM_AT = 26; // 0x1a
    field private static final int MSG_ADJUST_VOLUME = 2; // 0x2
    field private static final int MSG_COMMAND = 1; // 0x1
    field private static final int MSG_CUSTOM_ACTION = 20; // 0x14
    field private static final int MSG_FAST_FORWARD = 16; // 0x10
    field private static final int MSG_MEDIA_BUTTON = 21; // 0x15
    field private static final int MSG_NEXT = 14; // 0xe
    field private static final int MSG_PAUSE = 12; // 0xc
    field private static final int MSG_PLAY = 7; // 0x7
    field private static final int MSG_PLAY_MEDIA_ID = 8; // 0x8
    field private static final int MSG_PLAY_SEARCH = 9; // 0x9
    field private static final int MSG_PLAY_URI = 10; // 0xa
    field private static final int MSG_PREPARE = 3; // 0x3
    field private static final int MSG_PREPARE_MEDIA_ID = 4; // 0x4
    field private static final int MSG_PREPARE_SEARCH = 5; // 0x5
    field private static final int MSG_PREPARE_URI = 6; // 0x6
    field private static final int MSG_PREVIOUS = 15; // 0xf
    field private static final int MSG_RATE = 19; // 0x13
    field private static final int MSG_RATE_EXTRA = 31; // 0x1f
    field private static final int MSG_REMOVE_QUEUE_ITEM = 27; // 0x1b
    field private static final int MSG_REMOVE_QUEUE_ITEM_AT = 28; // 0x1c
    field private static final int MSG_REWIND = 17; // 0x11
    field private static final int MSG_SEEK_TO = 18; // 0x12
    field private static final int MSG_SET_CAPTIONING_ENABLED = 29; // 0x1d
    field private static final int MSG_SET_REPEAT_MODE = 23; // 0x17
    field private static final int MSG_SET_SHUFFLE_MODE = 30; // 0x1e
    field private static final int MSG_SET_VOLUME = 22; // 0x16
    field private static final int MSG_SKIP_TO_ITEM = 11; // 0xb
    field private static final int MSG_STOP = 13; // 0xd
  }

  public static final class MediaSessionCompat.QueueItem implements android.os.Parcelable {
    ctor private MediaSessionCompat.QueueItem(android.media.session.MediaSession.QueueItem!, android.support.v4.media.MediaDescriptionCompat!, long);
    ctor MediaSessionCompat.QueueItem(android.os.Parcel!);
    field private final android.support.v4.media.MediaDescriptionCompat! mDescription;
    field private final long mId;
    field private android.media.session.MediaSession.QueueItem! mItemFwk;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final class MediaSessionCompat.ResultReceiverWrapper implements android.os.Parcelable {
    ctor public MediaSessionCompat.ResultReceiverWrapper(android.os.ResultReceiver);
    ctor MediaSessionCompat.ResultReceiverWrapper(android.os.Parcel!);
    field public static final android.os.Parcelable.Creator<android.support.v4.media.session.MediaSessionCompat.ResultReceiverWrapper>! CREATOR;
    field android.os.ResultReceiver! mResultReceiver;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(flag=true, value={android.support.v4.media.session.MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS, android.support.v4.media.session.MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS, android.support.v4.media.session.MediaSessionCompat.FLAG_HANDLES_QUEUE_COMMANDS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface MediaSessionCompat.SessionFlags {
  }

  public static final class MediaSessionCompat.Token implements android.os.Parcelable {
    ctor MediaSessionCompat.Token(Object!);
    ctor MediaSessionCompat.Token(Object!, IMediaSession!);
    ctor MediaSessionCompat.Token(Object!, IMediaSession!, androidx.versionedparcelable.VersionedParcelable!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.support.v4.media.session.MediaSessionCompat.Token! fromBundle(android.os.Bundle!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.support.v4.media.session.MediaSessionCompat.Token! fromToken(Object!, IMediaSession!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public IMediaSession! getExtraBinder();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.versionedparcelable.VersionedParcelable! getSessionToken2();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setExtraBinder(IMediaSession!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setSessionToken2(androidx.versionedparcelable.VersionedParcelable!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.os.Bundle! toBundle();
    field private IMediaSession! mExtraBinder;
    field private final Object! mInner;
    field private androidx.versionedparcelable.VersionedParcelable! mSessionToken2;
  }

  public final class PlaybackStateCompat implements android.os.Parcelable {
    ctor PlaybackStateCompat(int, long, long, float, long, int, CharSequence!, long, java.util.List<android.support.v4.media.session.PlaybackStateCompat.CustomAction>!, long, android.os.Bundle!);
    ctor PlaybackStateCompat(android.os.Parcel!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public long getCurrentPosition(Long!);
    field private static final int KEYCODE_MEDIA_PAUSE = 127; // 0x7f
    field private static final int KEYCODE_MEDIA_PLAY = 126; // 0x7e
    field final long mActions;
    field final long mActiveItemId;
    field final long mBufferedPosition;
    field java.util.List<android.support.v4.media.session.PlaybackStateCompat.CustomAction>! mCustomActions;
    field final int mErrorCode;
    field final CharSequence! mErrorMessage;
    field final android.os.Bundle! mExtras;
    field final long mPosition;
    field final float mSpeed;
    field final int mState;
    field private android.media.session.PlaybackState! mStateFwk;
    field final long mUpdateTime;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @LongDef(flag=true, value={android.support.v4.media.session.PlaybackStateCompat.ACTION_STOP, android.support.v4.media.session.PlaybackStateCompat.ACTION_PAUSE, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY, android.support.v4.media.session.PlaybackStateCompat.ACTION_REWIND, android.support.v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS, android.support.v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_NEXT, android.support.v4.media.session.PlaybackStateCompat.ACTION_FAST_FORWARD, android.support.v4.media.session.PlaybackStateCompat.ACTION_SET_RATING, android.support.v4.media.session.PlaybackStateCompat.ACTION_SEEK_TO, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY_PAUSE, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_MEDIA_ID, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_SEARCH, android.support.v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_QUEUE_ITEM, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY_FROM_URI, android.support.v4.media.session.PlaybackStateCompat.ACTION_PREPARE, android.support.v4.media.session.PlaybackStateCompat.ACTION_PREPARE_FROM_MEDIA_ID, android.support.v4.media.session.PlaybackStateCompat.ACTION_PREPARE_FROM_SEARCH, android.support.v4.media.session.PlaybackStateCompat.ACTION_PREPARE_FROM_URI, android.support.v4.media.session.PlaybackStateCompat.ACTION_SET_REPEAT_MODE, android.support.v4.media.session.PlaybackStateCompat.ACTION_SET_SHUFFLE_MODE, android.support.v4.media.session.PlaybackStateCompat.ACTION_SET_CAPTIONING_ENABLED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.Actions {
  }

  public static final class PlaybackStateCompat.Builder {
    field private long mActions;
    field private long mActiveItemId;
    field private long mBufferedPosition;
    field private final java.util.List<android.support.v4.media.session.PlaybackStateCompat.CustomAction>! mCustomActions;
    field private int mErrorCode;
    field private CharSequence! mErrorMessage;
    field private android.os.Bundle! mExtras;
    field private long mPosition;
    field private float mRate;
    field private int mState;
    field private long mUpdateTime;
  }

  public static final class PlaybackStateCompat.CustomAction implements android.os.Parcelable {
    ctor PlaybackStateCompat.CustomAction(String!, CharSequence!, int, android.os.Bundle!);
    ctor PlaybackStateCompat.CustomAction(android.os.Parcel!);
    field private final String! mAction;
    field private android.media.session.PlaybackState.CustomAction! mCustomActionFwk;
    field private final android.os.Bundle! mExtras;
    field private final int mIcon;
    field private final CharSequence! mName;
  }

  public static final class PlaybackStateCompat.CustomAction.Builder {
    field private final String! mAction;
    field private android.os.Bundle! mExtras;
    field private final int mIcon;
    field private final CharSequence! mName;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_UNKNOWN_ERROR, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_APP_ERROR, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_NOT_SUPPORTED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_AUTHENTICATION_EXPIRED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_PREMIUM_ACCOUNT_REQUIRED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_CONCURRENT_STREAM_LIMIT, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_PARENTAL_CONTROL_RESTRICTED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_NOT_AVAILABLE_IN_REGION, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_CONTENT_ALREADY_PLAYING, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_SKIP_LIMIT_REACHED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_ACTION_ABORTED, android.support.v4.media.session.PlaybackStateCompat.ERROR_CODE_END_OF_QUEUE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.ErrorCode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @LongDef({android.support.v4.media.session.PlaybackStateCompat.ACTION_STOP, android.support.v4.media.session.PlaybackStateCompat.ACTION_PAUSE, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY, android.support.v4.media.session.PlaybackStateCompat.ACTION_REWIND, android.support.v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS, android.support.v4.media.session.PlaybackStateCompat.ACTION_SKIP_TO_NEXT, android.support.v4.media.session.PlaybackStateCompat.ACTION_FAST_FORWARD, android.support.v4.media.session.PlaybackStateCompat.ACTION_PLAY_PAUSE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.MediaKeyAction {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.session.PlaybackStateCompat.REPEAT_MODE_INVALID, android.support.v4.media.session.PlaybackStateCompat.REPEAT_MODE_NONE, android.support.v4.media.session.PlaybackStateCompat.REPEAT_MODE_ONE, android.support.v4.media.session.PlaybackStateCompat.REPEAT_MODE_ALL, android.support.v4.media.session.PlaybackStateCompat.REPEAT_MODE_GROUP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.RepeatMode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.session.PlaybackStateCompat.SHUFFLE_MODE_INVALID, android.support.v4.media.session.PlaybackStateCompat.SHUFFLE_MODE_NONE, android.support.v4.media.session.PlaybackStateCompat.SHUFFLE_MODE_ALL, android.support.v4.media.session.PlaybackStateCompat.SHUFFLE_MODE_GROUP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.ShuffleMode {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.support.v4.media.session.PlaybackStateCompat.STATE_NONE, android.support.v4.media.session.PlaybackStateCompat.STATE_STOPPED, android.support.v4.media.session.PlaybackStateCompat.STATE_PAUSED, android.support.v4.media.session.PlaybackStateCompat.STATE_PLAYING, android.support.v4.media.session.PlaybackStateCompat.STATE_FAST_FORWARDING, android.support.v4.media.session.PlaybackStateCompat.STATE_REWINDING, android.support.v4.media.session.PlaybackStateCompat.STATE_BUFFERING, android.support.v4.media.session.PlaybackStateCompat.STATE_ERROR, android.support.v4.media.session.PlaybackStateCompat.STATE_CONNECTING, android.support.v4.media.session.PlaybackStateCompat.STATE_SKIPPING_TO_PREVIOUS, android.support.v4.media.session.PlaybackStateCompat.STATE_SKIPPING_TO_NEXT, android.support.v4.media.session.PlaybackStateCompat.STATE_SKIPPING_TO_QUEUE_ITEM}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PlaybackStateCompat.State {
  }

}

package androidx.media {

  public class AudioAttributesCompat implements androidx.versionedparcelable.VersionedParcelable {
    ctor AudioAttributesCompat();
    ctor AudioAttributesCompat(androidx.media.AudioAttributesImpl!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.media.AudioAttributesCompat! fromBundle(android.os.Bundle!);
    method int getRawLegacyStreamType();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void setForceLegacyBehavior(boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.os.Bundle toBundle();
    method static int toVolumeStreamType(boolean, androidx.media.AudioAttributesCompat!);
    method static int toVolumeStreamType(boolean, int, int);
    method static int usageForStreamType(int);
    method static String! usageToString(int);
    field static final String AUDIO_ATTRIBUTES_CONTENT_TYPE = "androidx.media.audio_attrs.CONTENT_TYPE";
    field static final String AUDIO_ATTRIBUTES_FLAGS = "androidx.media.audio_attrs.FLAGS";
    field static final String AUDIO_ATTRIBUTES_FRAMEWORKS = "androidx.media.audio_attrs.FRAMEWORKS";
    field static final String AUDIO_ATTRIBUTES_LEGACY_STREAM_TYPE = "androidx.media.audio_attrs.LEGACY_STREAM_TYPE";
    field static final String AUDIO_ATTRIBUTES_USAGE = "androidx.media.audio_attrs.USAGE";
    field static final int FLAG_ALL = 1023; // 0x3ff
    field static final int FLAG_ALL_PUBLIC = 273; // 0x111
    field static final int FLAG_BEACON = 8; // 0x8
    field static final int FLAG_BYPASS_INTERRUPTION_POLICY = 64; // 0x40
    field static final int FLAG_BYPASS_MUTE = 128; // 0x80
    field static final int FLAG_DEEP_BUFFER = 512; // 0x200
    field static final int FLAG_HW_HOTWORD = 32; // 0x20
    field static final int FLAG_LOW_LATENCY = 256; // 0x100
    field static final int FLAG_SCO = 4; // 0x4
    field static final int FLAG_SECURE = 2; // 0x2
    field static final int INVALID_STREAM_TYPE = -1; // 0xffffffff
    field private static final int[]! SDK_USAGES;
    field private static final int SUPPRESSIBLE_CALL = 2; // 0x2
    field private static final int SUPPRESSIBLE_NOTIFICATION = 1; // 0x1
    field private static final android.util.SparseIntArray! SUPPRESSIBLE_USAGES;
    field private static final String TAG = "AudioAttributesCompat";
    field private static final int USAGE_VIRTUAL_SOURCE = 15; // 0xf
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.media.AudioAttributesImpl! mImpl;
    field static boolean sForceLegacyBehavior;
  }

  @IntDef({androidx.media.AudioAttributesCompat.CONTENT_TYPE_UNKNOWN, androidx.media.AudioAttributesCompat.CONTENT_TYPE_SPEECH, androidx.media.AudioAttributesCompat.CONTENT_TYPE_MUSIC, androidx.media.AudioAttributesCompat.CONTENT_TYPE_MOVIE, androidx.media.AudioAttributesCompat.CONTENT_TYPE_SONIFICATION}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface AudioAttributesCompat.AttributeContentType {
  }

  @IntDef({androidx.media.AudioAttributesCompat.USAGE_UNKNOWN, androidx.media.AudioAttributesCompat.USAGE_MEDIA, androidx.media.AudioAttributesCompat.USAGE_VOICE_COMMUNICATION, androidx.media.AudioAttributesCompat.USAGE_VOICE_COMMUNICATION_SIGNALLING, androidx.media.AudioAttributesCompat.USAGE_ALARM, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION_RINGTONE, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION_COMMUNICATION_REQUEST, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION_COMMUNICATION_INSTANT, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION_COMMUNICATION_DELAYED, androidx.media.AudioAttributesCompat.USAGE_NOTIFICATION_EVENT, androidx.media.AudioAttributesCompat.USAGE_ASSISTANCE_ACCESSIBILITY, androidx.media.AudioAttributesCompat.USAGE_ASSISTANCE_NAVIGATION_GUIDANCE, androidx.media.AudioAttributesCompat.USAGE_ASSISTANCE_SONIFICATION, androidx.media.AudioAttributesCompat.USAGE_GAME, androidx.media.AudioAttributesCompat.USAGE_ASSISTANT}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface AudioAttributesCompat.AttributeUsage {
  }

  abstract static class AudioAttributesCompat.AudioManagerHidden {
    ctor private AudioAttributesCompat.AudioManagerHidden();
    field public static final int STREAM_ACCESSIBILITY = 10; // 0xa
    field public static final int STREAM_BLUETOOTH_SCO = 6; // 0x6
    field public static final int STREAM_SYSTEM_ENFORCED = 7; // 0x7
    field public static final int STREAM_TTS = 9; // 0x9
  }

  public static class AudioAttributesCompat.Builder {
    method androidx.media.AudioAttributesCompat.Builder! setInternalLegacyStreamType(int);
    field private int mContentType;
    field private int mFlags;
    field private int mLegacyStream;
    field private int mUsage;
  }

  interface AudioAttributesImpl extends androidx.versionedparcelable.VersionedParcelable {
    method public Object! getAudioAttributes();
    method public int getContentType();
    method public int getFlags();
    method public int getLegacyStreamType();
    method public int getRawLegacyStreamType();
    method public int getUsage();
    method public int getVolumeControlStream();
    method public android.os.Bundle toBundle();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(21) public class AudioAttributesImplApi21 implements androidx.media.AudioAttributesImpl {
    ctor AudioAttributesImplApi21();
    ctor AudioAttributesImplApi21(android.media.AudioAttributes!);
    ctor AudioAttributesImplApi21(android.media.AudioAttributes!, int);
    method public static androidx.media.AudioAttributesImpl! fromBundle(android.os.Bundle!);
    method public Object! getAudioAttributes();
    method static java.lang.reflect.Method! getAudioAttributesToLegacyStreamTypeMethod();
    method public int getContentType();
    method public int getFlags();
    method public int getLegacyStreamType();
    method public int getRawLegacyStreamType();
    method public int getUsage();
    method public int getVolumeControlStream();
    method public android.os.Bundle toBundle();
    field private static final String TAG = "AudioAttributesCompat21";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.media.AudioAttributes! mAudioAttributes;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mLegacyStreamType;
    field static java.lang.reflect.Method! sAudioAttributesToLegacyStreamType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class AudioAttributesImplBase implements androidx.media.AudioAttributesImpl {
    ctor AudioAttributesImplBase();
    ctor AudioAttributesImplBase(int, int, int, int);
    method public static androidx.media.AudioAttributesImpl! fromBundle(android.os.Bundle!);
    method public Object! getAudioAttributes();
    method public int getContentType();
    method public int getFlags();
    method public int getLegacyStreamType();
    method public int getRawLegacyStreamType();
    method public int getUsage();
    method public int getVolumeControlStream();
    method public android.os.Bundle toBundle();
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mContentType;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mFlags;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mLegacyStream;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mUsage;
  }

  public class AudioFocusRequestCompat {
    ctor AudioFocusRequestCompat(int, android.media.AudioManager.OnAudioFocusChangeListener!, android.os.Handler!, androidx.media.AudioAttributesCompat!, boolean);
    method @RequiresApi(android.os.Build.VERSION_CODES.LOLLIPOP) android.media.AudioAttributes! getAudioAttributes();
    method @RequiresApi(android.os.Build.VERSION_CODES.O) android.media.AudioFocusRequest! getAudioFocusRequest();
    field static final androidx.media.AudioAttributesCompat! FOCUS_DEFAULT_ATTR;
    field private final androidx.media.AudioAttributesCompat! mAudioAttributesCompat;
    field private final android.os.Handler! mFocusChangeHandler;
    field private final int mFocusGain;
    field private final Object! mFrameworkAudioFocusRequest;
    field private final android.media.AudioManager.OnAudioFocusChangeListener! mOnAudioFocusChangeListener;
    field private final boolean mPauseOnDuck;
  }

  public static final class AudioFocusRequestCompat.Builder {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) static boolean isValidFocusGain(int);
    field private boolean mAcceptsDelayedFocusGain;
    field private androidx.media.AudioAttributesCompat! mAudioAttributesCompat;
    field private android.os.Handler! mFocusChangeHandler;
    field private int mFocusGain;
    field private android.media.AudioManager.OnAudioFocusChangeListener! mOnAudioFocusChangeListener;
    field private boolean mPauseOnDuck;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.media.AudioManagerCompat.AUDIOFOCUS_GAIN, androidx.media.AudioManagerCompat.AUDIOFOCUS_GAIN_TRANSIENT, androidx.media.AudioManagerCompat.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK, androidx.media.AudioManagerCompat.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}) public static @interface AudioFocusRequestCompat.FocusGainType {
  }

  private static class AudioFocusRequestCompat.OnAudioFocusChangeListenerHandlerCompat implements android.media.AudioManager.OnAudioFocusChangeListener android.os.Handler.Callback {
    ctor AudioFocusRequestCompat.OnAudioFocusChangeListenerHandlerCompat(android.media.AudioManager.OnAudioFocusChangeListener, android.os.Handler);
    field private static final int FOCUS_CHANGE = 2782386; // 0x2a74b2
    field private final android.os.Handler! mHandler;
    field private final android.media.AudioManager.OnAudioFocusChangeListener! mListener;
  }

  public final class AudioManagerCompat {
    ctor private AudioManagerCompat();
    field private static final String TAG = "AudioManCompat";
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class MediaBrowserCompatUtils {
    ctor private MediaBrowserCompatUtils();
    method public static boolean areSameOptions(android.os.Bundle!, android.os.Bundle!);
    method public static boolean hasDuplicatedItems(android.os.Bundle!, android.os.Bundle!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public class MediaBrowserProtocol {
    ctor private MediaBrowserProtocol();
    field public static final int CLIENT_MSG_ADD_SUBSCRIPTION = 3; // 0x3
    field public static final int CLIENT_MSG_CONNECT = 1; // 0x1
    field public static final int CLIENT_MSG_DISCONNECT = 2; // 0x2
    field public static final int CLIENT_MSG_GET_MEDIA_ITEM = 5; // 0x5
    field public static final int CLIENT_MSG_REGISTER_CALLBACK_MESSENGER = 6; // 0x6
    field public static final int CLIENT_MSG_REMOVE_SUBSCRIPTION = 4; // 0x4
    field public static final int CLIENT_MSG_SEARCH = 8; // 0x8
    field public static final int CLIENT_MSG_SEND_CUSTOM_ACTION = 9; // 0x9
    field public static final int CLIENT_MSG_UNREGISTER_CALLBACK_MESSENGER = 7; // 0x7
    field public static final int CLIENT_VERSION_1 = 1; // 0x1
    field public static final int CLIENT_VERSION_CURRENT = 1; // 0x1
    field public static final String DATA_CALLBACK_TOKEN = "data_callback_token";
    field public static final String DATA_CALLING_PID = "data_calling_pid";
    field public static final String DATA_CALLING_UID = "data_calling_uid";
    field public static final String DATA_CUSTOM_ACTION = "data_custom_action";
    field public static final String DATA_CUSTOM_ACTION_EXTRAS = "data_custom_action_extras";
    field public static final String DATA_MEDIA_ITEM_ID = "data_media_item_id";
    field public static final String DATA_MEDIA_ITEM_LIST = "data_media_item_list";
    field public static final String DATA_MEDIA_SESSION_TOKEN = "data_media_session_token";
    field public static final String DATA_NOTIFY_CHILDREN_CHANGED_OPTIONS = "data_notify_children_changed_options";
    field public static final String DATA_OPTIONS = "data_options";
    field public static final String DATA_PACKAGE_NAME = "data_package_name";
    field public static final String DATA_RESULT_RECEIVER = "data_result_receiver";
    field public static final String DATA_ROOT_HINTS = "data_root_hints";
    field public static final String DATA_SEARCH_EXTRAS = "data_search_extras";
    field public static final String DATA_SEARCH_QUERY = "data_search_query";
    field public static final String EXTRA_CLIENT_VERSION = "extra_client_version";
    field public static final String EXTRA_MESSENGER_BINDER = "extra_messenger";
    field public static final String EXTRA_SERVICE_VERSION = "extra_service_version";
    field public static final String EXTRA_SESSION_BINDER = "extra_session_binder";
    field public static final int SERVICE_MSG_ON_CONNECT = 1; // 0x1
    field public static final int SERVICE_MSG_ON_CONNECT_FAILED = 2; // 0x2
    field public static final int SERVICE_MSG_ON_LOAD_CHILDREN = 3; // 0x3
    field public static final int SERVICE_VERSION_1 = 1; // 0x1
    field public static final int SERVICE_VERSION_2 = 2; // 0x2
    field public static final int SERVICE_VERSION_CURRENT = 2; // 0x2
  }

  public abstract class MediaBrowserServiceCompat extends android.app.Service {
    method void addSubscription(String!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.os.IBinder!, android.os.Bundle!);
    method java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>! applyOptions(java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>!, android.os.Bundle!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public void attachToBaseContext(android.content.Context!);
    method boolean isValidPackage(String!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void notifyChildrenChanged(androidx.media.MediaSessionManager.RemoteUserInfo, String, android.os.Bundle);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onSubscribe(String!, android.os.Bundle!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void onUnsubscribe(String!);
    method void performCustomAction(String!, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.support.v4.os.ResultReceiver!);
    method void performLoadChildren(String!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.os.Bundle!, android.os.Bundle!);
    method void performLoadItem(String!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.support.v4.os.ResultReceiver!);
    method void performSearch(String!, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.support.v4.os.ResultReceiver!);
    method boolean removeSubscription(String!, androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, android.os.IBinder!);
    field static final boolean DEBUG;
    field private static final float EPSILON = 1.0E-5f;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String KEY_MEDIA_ITEM = "media_item";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final String KEY_SEARCH_RESULTS = "search_results";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final int RESULT_ERROR = -1; // 0xffffffff
    field static final int RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED = 2; // 0x2
    field static final int RESULT_FLAG_ON_SEARCH_NOT_IMPLEMENTED = 4; // 0x4
    field static final int RESULT_FLAG_OPTION_NOT_HANDLED = 1; // 0x1
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final int RESULT_OK = 0; // 0x0
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static final int RESULT_PROGRESS_UPDATE = 1; // 0x1
    field static final String TAG = "MBServiceCompat";
    field final androidx.collection.ArrayMap<android.os.IBinder,androidx.media.MediaBrowserServiceCompat.ConnectionRecord>! mConnections;
    field androidx.media.MediaBrowserServiceCompat.ConnectionRecord! mCurConnection;
    field final androidx.media.MediaBrowserServiceCompat.ServiceHandler! mHandler;
    field private androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImpl! mImpl;
    field android.support.v4.media.session.MediaSessionCompat.Token! mSession;
  }

  public static final class MediaBrowserServiceCompat.BrowserRoot {
    field private final android.os.Bundle! mExtras;
    field private final String! mRootId;
  }

  private class MediaBrowserServiceCompat.ConnectionRecord implements android.os.IBinder.DeathRecipient {
    ctor MediaBrowserServiceCompat.ConnectionRecord(String!, int, int, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    field public final androidx.media.MediaSessionManager.RemoteUserInfo! browserInfo;
    field public final androidx.media.MediaBrowserServiceCompat.ServiceCallbacks! callbacks;
    field public final int pid;
    field public final String! pkg;
    field public androidx.media.MediaBrowserServiceCompat.BrowserRoot! root;
    field public final android.os.Bundle! rootHints;
    field public final java.util.HashMap<java.lang.String,java.util.List<androidx.core.util.Pair<android.os.IBinder,android.os.Bundle>>>! subscriptions;
    field public final int uid;
  }

  static interface MediaBrowserServiceCompat.MediaBrowserServiceImpl {
    method public android.os.Bundle! getBrowserRootHints();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentBrowserInfo();
    method public void notifyChildrenChanged(String!, android.os.Bundle!);
    method public void notifyChildrenChanged(androidx.media.MediaSessionManager.RemoteUserInfo!, String!, android.os.Bundle!);
    method public android.os.IBinder! onBind(android.content.Intent!);
    method public void onCreate();
    method public void setSessionToken(android.support.v4.media.session.MediaSessionCompat.Token!);
  }

  @RequiresApi(21) class MediaBrowserServiceCompat.MediaBrowserServiceImplApi21 implements androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImpl {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi21();
    method public android.os.Bundle! getBrowserRootHints();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentBrowserInfo();
    method public void notifyChildrenChanged(String!, android.os.Bundle!);
    method public void notifyChildrenChanged(androidx.media.MediaSessionManager.RemoteUserInfo!, String!, android.os.Bundle!);
    method void notifyChildrenChangedForCompat(String!, android.os.Bundle!);
    method void notifyChildrenChangedForCompat(androidx.media.MediaSessionManager.RemoteUserInfo!, String!, android.os.Bundle!);
    method void notifyChildrenChangedForCompatOnHandler(androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, String!, android.os.Bundle!);
    method void notifyChildrenChangedForFramework(String!, android.os.Bundle!);
    method public android.os.IBinder! onBind(android.content.Intent!);
    method public void onCreate();
    method public androidx.media.MediaBrowserServiceCompat.BrowserRoot! onGetRoot(String!, int, android.os.Bundle!);
    method public void onLoadChildren(String!, androidx.media.MediaBrowserServiceCompat.ResultWrapper<java.util.List<android.os.Parcel>>!);
    method public void setSessionToken(android.support.v4.media.session.MediaSessionCompat.Token!);
    field android.os.Messenger! mMessenger;
    field final java.util.List<android.os.Bundle>! mRootExtrasList;
    field android.service.media.MediaBrowserService! mServiceFwk;
  }

  class MediaBrowserServiceCompat.MediaBrowserServiceImplApi21.MediaBrowserServiceApi21 extends android.service.media.MediaBrowserService {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi21.MediaBrowserServiceApi21(android.content.Context!);
  }

  @RequiresApi(23) class MediaBrowserServiceCompat.MediaBrowserServiceImplApi23 extends androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImplApi21 {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi23();
    method public void onCreate();
    method public void onLoadItem(String!, androidx.media.MediaBrowserServiceCompat.ResultWrapper<android.os.Parcel>!);
  }

  class MediaBrowserServiceCompat.MediaBrowserServiceImplApi23.MediaBrowserServiceApi23 extends androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImplApi21.MediaBrowserServiceApi21 {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi23.MediaBrowserServiceApi23(android.content.Context!);
  }

  @RequiresApi(26) class MediaBrowserServiceCompat.MediaBrowserServiceImplApi26 extends androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImplApi23 {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi26();
    method public android.os.Bundle! getBrowserRootHints();
    method void notifyChildrenChangedForFramework(String!, android.os.Bundle!);
    method public void onCreate();
    method public void onLoadChildren(String!, androidx.media.MediaBrowserServiceCompat.ResultWrapper<java.util.List<android.os.Parcel>>!, android.os.Bundle!);
  }

  class MediaBrowserServiceCompat.MediaBrowserServiceImplApi26.MediaBrowserServiceApi26 extends androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImplApi23.MediaBrowserServiceApi23 {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi26.MediaBrowserServiceApi26(android.content.Context!);
  }

  @RequiresApi(28) class MediaBrowserServiceCompat.MediaBrowserServiceImplApi28 extends androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImplApi26 {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplApi28();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentBrowserInfo();
  }

  class MediaBrowserServiceCompat.MediaBrowserServiceImplBase implements androidx.media.MediaBrowserServiceCompat.MediaBrowserServiceImpl {
    ctor MediaBrowserServiceCompat.MediaBrowserServiceImplBase();
    method public android.os.Bundle! getBrowserRootHints();
    method public androidx.media.MediaSessionManager.RemoteUserInfo! getCurrentBrowserInfo();
    method public void notifyChildrenChanged(String, android.os.Bundle!);
    method public void notifyChildrenChanged(androidx.media.MediaSessionManager.RemoteUserInfo, String, android.os.Bundle!);
    method void notifyChildrenChangedOnHandler(androidx.media.MediaBrowserServiceCompat.ConnectionRecord!, String!, android.os.Bundle!);
    method public android.os.IBinder! onBind(android.content.Intent!);
    method public void onCreate();
    method public void setSessionToken(android.support.v4.media.session.MediaSessionCompat.Token!);
    field private android.os.Messenger! mMessenger;
  }

  public static class MediaBrowserServiceCompat.Result<T> {
    ctor MediaBrowserServiceCompat.Result(Object!);
    method private void checkExtraFields(android.os.Bundle!);
    method int getFlags();
    method boolean isDone();
    method void onErrorSent(android.os.Bundle!);
    method void onProgressUpdateSent(android.os.Bundle!);
    method void onResultSent(T!);
    method void setFlags(int);
    field private final Object! mDebug;
    field private boolean mDetachCalled;
    field private int mFlags;
    field private boolean mSendErrorCalled;
    field private boolean mSendProgressUpdateCalled;
    field private boolean mSendResultCalled;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef(flag=true, value={androidx.media.MediaBrowserServiceCompat.RESULT_FLAG_OPTION_NOT_HANDLED, androidx.media.MediaBrowserServiceCompat.RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED, androidx.media.MediaBrowserServiceCompat.RESULT_FLAG_ON_SEARCH_NOT_IMPLEMENTED}) private static @interface MediaBrowserServiceCompat.ResultFlags {
  }

  @RequiresApi(21) static class MediaBrowserServiceCompat.ResultWrapper<T> {
    ctor MediaBrowserServiceCompat.ResultWrapper(android.service.media.MediaBrowserService.Result!);
    method public void detach();
    method java.util.List<android.media.browse.MediaBrowser.MediaItem>! parcelListToItemList(java.util.List<android.os.Parcel>!);
    method public void sendResult(T!);
    field android.service.media.MediaBrowserService.Result! mResultFwk;
  }

  private class MediaBrowserServiceCompat.ServiceBinderImpl {
    ctor MediaBrowserServiceCompat.ServiceBinderImpl();
    method public void addSubscription(String!, android.os.IBinder!, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void connect(String!, int, int, android.os.Bundle!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void disconnect(androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void getMediaItem(String!, android.support.v4.os.ResultReceiver!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void registerCallbacks(androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!, String!, int, int, android.os.Bundle!);
    method public void removeSubscription(String!, android.os.IBinder!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void search(String!, android.os.Bundle!, android.support.v4.os.ResultReceiver!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void sendCustomAction(String!, android.os.Bundle!, android.support.v4.os.ResultReceiver!, androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
    method public void unregisterCallbacks(androidx.media.MediaBrowserServiceCompat.ServiceCallbacks!);
  }

  private static interface MediaBrowserServiceCompat.ServiceCallbacks {
    method public android.os.IBinder! asBinder();
    method public void onConnect(String!, android.support.v4.media.session.MediaSessionCompat.Token!, android.os.Bundle!) throws android.os.RemoteException;
    method public void onConnectFailed() throws android.os.RemoteException;
    method public void onLoadChildren(String!, java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>!, android.os.Bundle!, android.os.Bundle!) throws android.os.RemoteException;
  }

  private static class MediaBrowserServiceCompat.ServiceCallbacksCompat implements androidx.media.MediaBrowserServiceCompat.ServiceCallbacks {
    ctor MediaBrowserServiceCompat.ServiceCallbacksCompat(android.os.Messenger!);
    method public android.os.IBinder! asBinder();
    method public void onConnect(String!, android.support.v4.media.session.MediaSessionCompat.Token!, android.os.Bundle!) throws android.os.RemoteException;
    method public void onConnectFailed() throws android.os.RemoteException;
    method public void onLoadChildren(String!, java.util.List<android.support.v4.media.MediaBrowserCompat.MediaItem>!, android.os.Bundle!, android.os.Bundle!) throws android.os.RemoteException;
    method private void sendRequest(int, android.os.Bundle!) throws android.os.RemoteException;
    field final android.os.Messenger! mCallbacks;
  }

  private final class MediaBrowserServiceCompat.ServiceHandler extends android.os.Handler {
    ctor MediaBrowserServiceCompat.ServiceHandler();
    method public void postOrRun(Runnable!);
    field private final androidx.media.MediaBrowserServiceCompat.ServiceBinderImpl! mServiceBinderImpl;
  }

  public final class MediaSessionManager {
    ctor private MediaSessionManager(android.content.Context!);
    method android.content.Context! getContext();
    field static final boolean DEBUG;
    field static final String TAG = "MediaSessionManager";
    field androidx.media.MediaSessionManager.MediaSessionManagerImpl! mImpl;
    field private static final Object! sLock;
    field private static volatile androidx.media.MediaSessionManager! sSessionManager;
  }

  static interface MediaSessionManager.MediaSessionManagerImpl {
    method public android.content.Context! getContext();
    method public boolean isTrustedForMediaControl(androidx.media.MediaSessionManager.RemoteUserInfoImpl!);
  }

  public static final class MediaSessionManager.RemoteUserInfo {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(28) public MediaSessionManager.RemoteUserInfo(android.media.session.MediaSessionManager.RemoteUserInfo!);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int UNKNOWN_PID = -1; // 0xffffffff
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int UNKNOWN_UID = -1; // 0xffffffff
    field androidx.media.MediaSessionManager.RemoteUserInfoImpl! mImpl;
  }

  static interface MediaSessionManager.RemoteUserInfoImpl {
    method public String! getPackageName();
    method public int getPid();
    method public int getUid();
  }

  @RequiresApi(21) class MediaSessionManagerImplApi21 extends androidx.media.MediaSessionManagerImplBase {
    ctor MediaSessionManagerImplApi21(android.content.Context!);
    method private boolean hasMediaControlPermission(androidx.media.MediaSessionManager.RemoteUserInfoImpl);
    method public boolean isTrustedForMediaControl(androidx.media.MediaSessionManager.RemoteUserInfoImpl);
  }

  @RequiresApi(28) class MediaSessionManagerImplApi28 extends androidx.media.MediaSessionManagerImplApi21 {
    ctor MediaSessionManagerImplApi28(android.content.Context!);
    method public boolean isTrustedForMediaControl(androidx.media.MediaSessionManager.RemoteUserInfoImpl!);
    field android.media.session.MediaSessionManager! mObject;
  }

  static final class MediaSessionManagerImplApi28.RemoteUserInfoImplApi28 implements androidx.media.MediaSessionManager.RemoteUserInfoImpl {
    ctor MediaSessionManagerImplApi28.RemoteUserInfoImplApi28(String!, int, int);
    ctor MediaSessionManagerImplApi28.RemoteUserInfoImplApi28(android.media.session.MediaSessionManager.RemoteUserInfo!);
    method public String! getPackageName();
    method public int getPid();
    method public int getUid();
    field final android.media.session.MediaSessionManager.RemoteUserInfo! mObject;
  }

  class MediaSessionManagerImplBase implements androidx.media.MediaSessionManager.MediaSessionManagerImpl {
    ctor MediaSessionManagerImplBase(android.content.Context!);
    method public android.content.Context! getContext();
    method boolean isEnabledNotificationListener(androidx.media.MediaSessionManager.RemoteUserInfoImpl);
    method private boolean isPermissionGranted(androidx.media.MediaSessionManager.RemoteUserInfoImpl!, String!);
    method public boolean isTrustedForMediaControl(androidx.media.MediaSessionManager.RemoteUserInfoImpl);
    field private static final boolean DEBUG;
    field private static final String ENABLED_NOTIFICATION_LISTENERS = "enabled_notification_listeners";
    field private static final String PERMISSION_MEDIA_CONTENT_CONTROL = "android.permission.MEDIA_CONTENT_CONTROL";
    field private static final String PERMISSION_STATUS_BAR_SERVICE = "android.permission.STATUS_BAR_SERVICE";
    field private static final String TAG = "MediaSessionManager";
    field android.content.ContentResolver! mContentResolver;
    field android.content.Context! mContext;
  }

  static class MediaSessionManagerImplBase.RemoteUserInfoImplBase implements androidx.media.MediaSessionManager.RemoteUserInfoImpl {
    ctor MediaSessionManagerImplBase.RemoteUserInfoImplBase(String!, int, int);
    method public String! getPackageName();
    method public int getPid();
    method public int getUid();
    field private String! mPackageName;
    field private int mPid;
    field private int mUid;
  }

  public abstract class VolumeProviderCompat {
    field private androidx.media.VolumeProviderCompat.Callback! mCallback;
    field private final int mControlType;
    field private int mCurrentVolume;
    field private final int mMaxVolume;
    field private android.media.VolumeProvider! mVolumeProviderFwk;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.media.VolumeProviderCompat.VOLUME_CONTROL_FIXED, androidx.media.VolumeProviderCompat.VOLUME_CONTROL_RELATIVE, androidx.media.VolumeProviderCompat.VOLUME_CONTROL_ABSOLUTE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface VolumeProviderCompat.ControlType {
  }

}

package androidx.media.app {

  public class NotificationCompat {
    ctor private NotificationCompat();
  }

  public static class NotificationCompat.DecoratedMediaCustomViewStyle extends androidx.media.app.NotificationCompat.MediaStyle {
    method int getBigContentViewLayoutResource(int);
    method int getContentViewLayoutResource();
    method private void setBackgroundColor(android.widget.RemoteViews!);
  }

  public static class NotificationCompat.MediaStyle extends androidx.core.app.NotificationCompat.Style {
    method @RequiresApi(21) android.app.Notification.MediaStyle! fillInMediaStyle(android.app.Notification.MediaStyle!);
    method android.widget.RemoteViews! generateBigContentView();
    method android.widget.RemoteViews! generateContentView();
    method private android.widget.RemoteViews! generateMediaActionButton(androidx.core.app.NotificationCompat.Action!);
    method int getBigContentViewLayoutResource(int);
    method int getContentViewLayoutResource();
    field private static final int MAX_MEDIA_BUTTONS = 5; // 0x5
    field private static final int MAX_MEDIA_BUTTONS_IN_COMPACT = 3; // 0x3
    field int[]! mActionsToShowInCompact;
    field android.app.PendingIntent! mCancelButtonIntent;
    field boolean mShowCancelButton;
    field android.support.v4.media.session.MediaSessionCompat.Token! mToken;
  }

}

package androidx.media.session {

  public class MediaButtonReceiver extends android.content.BroadcastReceiver {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static android.content.ComponentName! getMediaButtonReceiverComponent(android.content.Context!);
    method private static android.content.ComponentName! getServiceComponentByAction(android.content.Context!, String!);
    method private static void startForegroundService(android.content.Context!, android.content.Intent!);
    field private static final String TAG = "MediaButtonReceiver";
  }

  private static class MediaButtonReceiver.MediaButtonConnectionCallback extends android.support.v4.media.MediaBrowserCompat.ConnectionCallback {
    ctor MediaButtonReceiver.MediaButtonConnectionCallback(android.content.Context!, android.content.Intent!, android.content.BroadcastReceiver.PendingResult!);
    method private void finish();
    method void setMediaBrowser(android.support.v4.media.MediaBrowserCompat!);
    field private final android.content.Context! mContext;
    field private final android.content.Intent! mIntent;
    field private android.support.v4.media.MediaBrowserCompat! mMediaBrowser;
    field private final android.content.BroadcastReceiver.PendingResult! mPendingResult;
  }

}

