{
  "comments": [
    {
      "key": {
        "uuid": "5dc74206_5a5d6fc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 9,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Don\u0027t comment about what each patchset does, only how it differs from the base.",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8275197d_3690d713",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 9,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dc74206_5a5d6fc5",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f38864b6_76963154",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "TEST_ are all android test libraries - they shouldn\u0027t be used in TestImplementation (though that\u0027s super unclear naming, please filing a bug to the root AndroidX component)\n\nIf you want to use regular src/test directories, I\u0027m all for it, but I think we should move the whole library\u0027s tests all at once, since they don\u0027t seem to need android (and then we just drop the runner / test size annotation).\n\nMind making that a follow up, and just keeping the tests in androidSrc for now?",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5c8379b_294834d6",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:10:16Z",
      "side": 1,
      "message": "actually, double check this part - I\u0027m not sure what we use arch:core-runtime for.\n\nIf it\u0027s RxPagedListBuilder, then this is fine as is.",
      "parentUuid": "f38864b6_76963154",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b67df0c8_b43acb18",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done - I\u0027ll post a separate CL to rename it.",
      "parentUuid": "d5c8379b_294834d6",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b82362d_59c41527",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-08T16:31:26Z",
      "side": 1,
      "message": "I also ended up just moving them into the test dir in one shot.",
      "parentUuid": "b67df0c8_b43acb18",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fa00f87_684f7957",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 14
      },
      "lineNbr": 39,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-08T17:54:06Z",
      "side": 1,
      "message": "Here\u0027s the promised CL: https://android-review.googlesource.com/c/platform/frameworks/support/+/941140\n\nWaiting to get presubmit to pass before opening up to review / discussion.",
      "parentUuid": "7b82362d_59c41527",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6327e36e_9b5ad0e9",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 52,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "why is this needed?",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d59c12b_cda0c698",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 52,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-08T16:28:27Z",
      "side": 1,
      "message": "We need to collect references to all disposables to make sure they get disposed synchronously when the future is cancelled - which is how subscriptions get cancelled normally in rx.\n\nThe alternative would be to throw an exception, I guess it depends on what PagedList expects - the weird thing about throwing an exception though is that we don\u0027t control the original emitter / source (which may or may not have been completed), so we would need to wrap the source here with our own emitter",
      "parentUuid": "6327e36e_9b5ad0e9",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa260d59_912e9f22",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 52,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-08T16:35:43Z",
      "side": 1,
      "message": "Paging expects errors to flow *from* the DataSource as exceptions, but doesn\u0027t have an opinion on how cancellation flows out to the DataSource - if synchronous cancellation is RX standard, SGTM.\n\nAdd some comments for how these parts all fit together - probably in the singleToListenableFuture method",
      "parentUuid": "1d59c12b_cda0c698",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "925986ec_d4ac5598",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 52,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-08T16:54:32Z",
      "side": 1,
      "message": "It\u0027s not so much that synchronous cancellation is standard, but that it\u0027s disposing subscriptions vs. throwing an exception. Unlike futures, rx doesn\u0027t really have a concept of cancelling an observable, you can only cancel listening for updates - I think there\u0027s a bigger picture thing here that might explain why Rx\u0027s toFuture() method is synchronous.\n\nEither way though, let me think about this a bit since it would be good to emit an exception if that\u0027s what paging expects.",
      "parentUuid": "fa260d59_912e9f22",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8b2bfa6_2ce76b47",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 52,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-08T17:06:07Z",
      "side": 1,
      "message": "So when we cancel listening for updates, it\u0027s up to the details of the impl of the Single that you passed whether to stop doing work, right? That sounds like what we want.\n\nBasically, if you have a network request that then gets mapped into something else, and we cancel before the network request completes, we\u0027d like extra transformations after the still-ongoing network request to not be performed.",
      "parentUuid": "925986ec_d4ac5598",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b83979_ea106053",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "use an \u0027else\u0027 here - the future will ignore the set after setException, so code here should make it clear that only one makes it through",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a77355f_e5ffc09d",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxDataSourceUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 90,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69b83979_ea106053",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac4bdf1f_41c09ad1",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "instead of storing this as an executor, store this as a scheduler.\n\nthen modify RxPagedListBuilder to use create something like a \u0027ScheduledExecutor\u0027 instead of the anonymous ones it does now in setFetchScheduler/setNotifyScheduler.\n\nThen, change \u0027getScheduledExecutor\u0027 to \u0027getScheduler\u0027 and do a instanceof ScheduledExecutor to see if you can just get the underlying scheduler. If not, Schedulers.from(executor)",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f93c1ea_ee761077",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "If I\u0027m reading correctly - I think the main point is to condense the Schedulers.from call inside RxPagedListBuilder and ScheduledExecutor?\n\nCan we think of a way to avoid doing the instanceof check and casting? I feel like it would be ideal if we could preserve static type checking for developer sanity.",
      "parentUuid": "ac4bdf1f_41c09ad1",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c7efc5_78cf6bff",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-08T16:32:02Z",
      "side": 1,
      "message": "What do you mean developer sanity? You mean the complexity in the method:\n\n    abstract Scheduler retrieveScheduler(Executor executor) {\n        if (executor instanceof SchedulerExecutor) {\n            // Minor optimization avoiding a wrapper -\n            // Root object was a scheduler, retrieve it.\n            return ((SchedulerExecutor) executor).scheduler();\n        } else {\n            return Schedulers.of(executor);\n        }\n    }\n\nMy goal was to avoid avoiding going from scheduler to executor, back to scheduler. It\u0027s extra wrappers, and I assume (though maybe you know) loses some features of rx scheduler semantics, like being able to easily schedule multiple tasks on a single thread.\n\nThe problem is that RxPagedListBuilder doesn\u0027t know what type of DataSource it\u0027s dealing with, and the DataSource base class can\u0027t use an RxJava type internally.\n\nWe could avoid the instanceof by having all datasources have a \u0027Object mScheduler\u0027 that can be overridden by initExecutor(), and otherwise ignored. (Or some variant of that idea). I think the simplicity of the above method is better though, since checking \u0027instanceof SomeClass\u0027 is much cheaper that \u0027instanceof SomeInterface\u0027, so I don\u0027t think it\u0027s not that bad.",
      "parentUuid": "3f93c1ea_ee761077",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc9ae791_a88094ef",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 66,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "move these \u0027rx extension\u0027 parts to be the 2nd paragraph.\n\nonly the first paragraph will show up as a summary, and that\u0027s the important one",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5ead14b_c4191d7a",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 66,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc9ae791_a88094ef",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a62dc09_f0dc755f",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "convention (at least in paging) is no \u003cp\u003e after the first paragraph, in order to highlight that it\u0027s the summary line",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5af35eb2_0bcbb1f6",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a62dc09_f0dc755f",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d70e47d_5a9c437d",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Invoked to load initial data from this DataSource as an Single\u003c\u003e",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 71
      },
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b85fa17f_3158a286",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d70e47d_5a9c437d",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 71
      },
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c1910b5_8fae727c",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/PagedListTestUtil.kt",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Add a comment here: initialize data source and trigger initial load.\n\nI don\u0027t think the name is clear though, how about DataSource.performInitialLoad()?\n\nNot sure why you\u0027re not returning a ListenableFuture, so you can observe the result",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "950df548_747523f5",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/PagedListTestUtil.kt",
        "patchSetId": 14
      },
      "lineNbr": 27,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Avoid baking in Configs like this outside of the test file itself, it makes it very hard to read the test and know e.g. how big the initial load will be. (even if you\u0027re not testing for that, those tests will often get added)\n\nAlso, suggest a page size of 2 when you don\u0027t need anything bigger - it makes debugging easier when you can compare smaller lists.",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b25fc12e_ed284bb0",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 14
      },
      "lineNbr": 110,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "if you\u0027re just initializing the executor, just call dataSource.initExecutor",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cd7dd76_c0097c13",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 14
      },
      "lineNbr": 123,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Don\u0027t feel super strongly, but I\u0027d prefer against hamcrest matchers - I find them slightly harder to read (especially with `is` in kotlin).",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d75ec5e_d10c6b09",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "make the load sizes smaller - I\u0027d recommend 5 at most\n\nIt\u0027s always nicer to read a failed assert of smaller list sizes :)",
      "range": {
        "startLine": 128,
        "startChar": 46,
        "endLine": 128,
        "endChar": 48
      },
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d287da0e_ed29a0fd",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 14
      },
      "lineNbr": 145,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "put a \u0027fail()\u0027 after these gets that should throw",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d5d504a_fea7d6ac",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/TestExecutor.kt",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-05T16:06:23Z",
      "side": 1,
      "message": "Good follow up would be to move this to an internal test-only artifact, (along with ListDataSource, I think), since it should just be shared by tests.",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "821a6385_57c3bb1c",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/TestExecutor.kt",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-04-06T07:26:55Z",
      "side": 1,
      "message": "By artifact do you mean module?\n\nTracked here: https://b.corp.google.com/issues/130065661",
      "parentUuid": "9d5d504a_fea7d6ac",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa411f51_56e11925",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/TestExecutor.kt",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-04-08T16:32:02Z",
      "side": 1,
      "message": "Yep",
      "parentUuid": "821a6385_57c3bb1c",
      "revId": "2e30a90486f27ac48f4cc2aa301c24c7314f0d47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}