{
  "comments": [
    {
      "key": {
        "uuid": "da486785_f7329fab",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2018-10-19T22:28:33Z",
      "side": 1,
      "message": "Need to add something about when another handler is added after, it will be called prior to this handler. If a handler returns true, all other handlers will be skipped along with the default onBackPressed() behavior.",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a27bd05b_55967e85",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-22T16:59:28Z",
      "side": 1,
      "message": "Done. The note around the default onBackPressed() behavior is already covered in the ComponentActivity#onBackPressed() Javadoc.",
      "parentUuid": "da486785_f7329fab",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dba0c17f_4aea3ba4",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1060493
      },
      "writtenOn": "2018-10-19T22:28:33Z",
      "side": 1,
      "message": "You don\u0027t have any info on what happens if the same handler is added multiple times. I suspect that you want to move it to the new position rather than leave it at the previous position?",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a8c0229_bfc00961",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-22T16:59:28Z",
      "side": 1,
      "message": "It was just going to do what the method says it does - add a Handler. Do you think it should have some Set like behavior?",
      "parentUuid": "dba0c17f_4aea3ba4",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b51b9720_8eef0ee5",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-19T21:17:03Z",
      "side": 1,
      "message": "do you really want to support multithreading here? synchronized + copy on write looks like overkill",
      "range": {
        "startLine": 114,
        "startChar": 8,
        "endLine": 114,
        "endChar": 20
      },
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5427b8b4_a787d40d",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-19T22:03:47Z",
      "side": 1,
      "message": "I wanted to support calling addOnBackPressedHandler on any thread (so needed synchronized) and removing yourself in onBackPressed() (so needed CopyOnWrite).",
      "parentUuid": "b51b9720_8eef0ee5",
      "range": {
        "startLine": 114,
        "startChar": 8,
        "endLine": 114,
        "endChar": 20
      },
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65604008_e5e30274",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-22T10:49:51Z",
      "side": 1,
      "message": "Why do  you need to lock then, because CopyOnWrite is safe for multithreading operations?\n\nI guess, you can get rid of locks.\nAlternatively, you can keep locks, but use SafeIterableMap - it will be quite handy for your use case. It stores elements in addition order and has descending iterator, also it supports modifications during iterations (you can have map from handler to wrapper, so remove method will be simplified a lot)",
      "parentUuid": "5427b8b4_a787d40d",
      "range": {
        "startLine": 114,
        "startChar": 8,
        "endLine": 114,
        "endChar": 20
      },
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6b23c6c_cb918c2d",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-22T16:59:28Z",
      "side": 1,
      "message": "Removed the locks.\n\nYes, I had looked at SafeIterableMap, but it wasn\u0027t public. Are there plans for making a public copy of it in androidx.collections?",
      "parentUuid": "65604008_e5e30274",
      "range": {
        "startLine": 114,
        "startChar": 8,
        "endLine": 114,
        "endChar": 20
      },
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59e62fa0_ebe4a415",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-19T21:17:03Z",
      "side": 1,
      "message": "do we care about handlers removing each other or during dispatching onBack? (so we don\u0027t dispatch to removed listeners?)",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81f4bdc3_59eb136a",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-19T22:03:47Z",
      "side": 1,
      "message": "I suspect that most of the use case is removing yourself (which is supported) vs removing some other handler. Do you think Javadoc on the method is enough or should we also support the later case?",
      "parentUuid": "59e62fa0_ebe4a415",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "742b6d68_bf893c94",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-22T16:59:28Z",
      "side": 1,
      "message": "Added a comment clarifying the behavior.",
      "parentUuid": "81f4bdc3_59eb136a",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b01131b_f9f3a3c4",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2018-10-19T21:17:03Z",
      "side": 1,
      "message": "if you depend on lifecycle 2.1.0, depend on LifecycleEventObserver instead",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c433c38_cb870cc0",
        "filename": "activity/src/main/java/androidx/activity/ComponentActivity.java",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1060451
      },
      "writtenOn": "2018-10-19T22:03:47Z",
      "side": 1,
      "message": "The plan for androidx.activity 1.0.0-alpha01 is to depend on Lifecycle 2.0. Will this code as written have a problem if developers are using 2.1?",
      "parentUuid": "2b01131b_f9f3a3c4",
      "revId": "1f99a06862e8c07338d10bc56ccf12f8b168e109",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}