{
  "comments": [
    {
      "key": {
        "uuid": "ad95e7b0_bcad79a9",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-19T18:51:15Z",
      "side": 1,
      "message": "I would document this differently, more like \"never assign meaning to this value\".\n\nUsing the identity of a Job as part of dispatch logic is pretty sketchy.",
      "range": {
        "startLine": 83,
        "startChar": 73,
        "endLine": 84,
        "endChar": 24
      },
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9b56e08_16b9bb00",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 84,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-19T21:44:59Z",
      "side": 1,
      "message": "Updated phrase.\n\nThe identity of the job is used as a marker for threads that where dispatched into the transaction coroutine. Since there is one control job per transaction coroutine, and nested transactions are in the same job then in my mind I think this is \u0027ok\u0027.",
      "parentUuid": "ad95e7b0_bcad79a9",
      "range": {
        "startLine": 83,
        "startChar": 73,
        "endLine": 84,
        "endChar": 24
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecba4243_68e094a1",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 99,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-19T18:51:15Z",
      "side": 1,
      "message": "Adding methods to Executor is an unusual way to do this. Why not create a scope from the Executor instead of using its execute() and within that running the coroutine?\n\nI *think* this acquireTransactionThread setup is basically SuspendableUiThreadExecutor, just with background threads. It does the same capture logic.\n\nFactoring this as a first-class scoping concept instead of bolting it onto Executor would result both in more reusable logic (upstreamable to Coroutines, even) and a more understandable patch here.",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 28
      },
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49e43b07_485dd761",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 99,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-19T21:44:59Z",
      "side": 1,
      "message": "We can\u0027t simply use the Executor as-is an create a Dispatcher out of it (using asCoroutineDispatcher), because if the Executor has multiple threads, coroutines will get dispatched to any of its threads, which is not quite what we want. We want to take ownership of a single thread of the executor to dispatch DB operations into it while in a transaction.\n\nI took a quick look at SuspendableUiThreadExecutor and I guess in essence they are similar, \"run things serially in a specific thread\", but the key here is that we use a background thread that we don\u0027t create, we take it from a provided executor, we don\u0027t want to create a non-instrumentable thread for transactions.\n\nI\u0027m not sure if there is value in factoring this out, after-all this dispatching strategy is very specific to Android\u0027s SQLiteSession being thread-confined.",
      "parentUuid": "ecba4243_68e094a1",
      "range": {
        "startLine": 99,
        "startChar": 20,
        "endLine": 99,
        "endChar": 28
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca9c77a_bc649ac1",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 122,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-19T18:51:15Z",
      "side": 1,
      "message": "Cancel should accept a reason.",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3083da92_7678a1a9",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 122,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-19T21:44:59Z",
      "side": 1,
      "message": "There is no API for providing a cancel reason (https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/).",
      "parentUuid": "fca9c77a_bc649ac1",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 27
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb628be0_403f8b6b",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 123,
      "author": {
        "id": 1274960
      },
      "writtenOn": "2019-02-19T18:51:15Z",
      "side": 1,
      "message": "http://go/java-practices/exceptions#chaining",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 123,
        "endChar": 26
      },
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557ed692_2b67d3ce",
        "filename": "room/coroutines/src/main/java/androidx/room/RoomDatabase.kt",
        "patchSetId": 13
      },
      "lineNbr": 123,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2019-02-19T21:44:59Z",
      "side": 1,
      "message": "Not sure which bullet point you are trying to point out but we can\u0027t wrap the exception in a different one, the CancellationException has to keep going up the call stack so that coroutines get correctly cancelled, note that CancellationException is considered to be a normal reason for coroutine completion.",
      "parentUuid": "cb628be0_403f8b6b",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 123,
        "endChar": 26
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "1687df0814aa7daf146023f28e95d41c961649e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}