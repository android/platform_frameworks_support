// Signature format: 2.0
package android.support.v4.os {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ResultReceiver implements android.os.Parcelable {
    ctor public ResultReceiver(android.os.Handler!);
    ctor ResultReceiver(android.os.Parcel!);
    method protected void onReceiveResult(int, android.os.Bundle!);
    method public void send(int, android.os.Bundle!);
    field public static final android.os.Parcelable.Creator<android.support.v4.os.ResultReceiver>! CREATOR;
    field final android.os.Handler! mHandler;
    field final boolean mLocal;
    field IResultReceiver! mReceiver;
  }

  class ResultReceiver.MyResultReceiver {
    ctor ResultReceiver.MyResultReceiver();
    method public void send(int, android.os.Bundle!);
  }

  class ResultReceiver.MyRunnable implements java.lang.Runnable {
    ctor ResultReceiver.MyRunnable(int, android.os.Bundle!);
    field final int mResultCode;
    field final android.os.Bundle! mResultData;
  }

}

package androidx.core.accessibilityservice {

  public final class AccessibilityServiceInfoCompat {
    ctor private AccessibilityServiceInfoCompat();
  }

}

package androidx.core.app {

  public class ActivityCompat extends androidx.core.content.ContextCompat {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.core.app.ActivityCompat.PermissionCompatDelegate! getPermissionCompatDelegate();
    field private static androidx.core.app.ActivityCompat.PermissionCompatDelegate! sDelegate;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface ActivityCompat.RequestPermissionsRequestCodeValidator {
    method public void validateRequestPermissionsRequestCode(int);
  }

  @RequiresApi(21) private static class ActivityCompat.SharedElementCallback21Impl extends android.app.SharedElementCallback {
    ctor ActivityCompat.SharedElementCallback21Impl(androidx.core.app.SharedElementCallback!);
    field private final androidx.core.app.SharedElementCallback! mCallback;
  }

  public final class ActivityManagerCompat {
    ctor private ActivityManagerCompat();
  }

  @RequiresApi(16) private static class ActivityOptionsCompat.ActivityOptionsCompatImpl extends androidx.core.app.ActivityOptionsCompat {
    ctor ActivityOptionsCompat.ActivityOptionsCompatImpl(android.app.ActivityOptions!);
    field private final android.app.ActivityOptions! mActivityOptions;
  }

  public final class AlarmManagerCompat {
    ctor private AlarmManagerCompat();
  }

  public class AppLaunchChecker {
    field private static final String KEY_STARTED_FROM_LAUNCHER = "startedFromLauncher";
    field private static final String SHARED_PREFS_NAME = "android.support.AppLaunchChecker";
  }

  public final class AppOpsManagerCompat {
    ctor private AppOpsManagerCompat();
  }

  public final class BundleCompat {
    ctor private BundleCompat();
  }

  static class BundleCompat.BundleCompatBaseImpl {
    ctor private BundleCompat.BundleCompatBaseImpl();
    method public static android.os.IBinder! getBinder(android.os.Bundle!, String!);
    method public static void putBinder(android.os.Bundle!, String!, android.os.IBinder!);
    field private static final String TAG = "BundleCompatBaseImpl";
    field private static java.lang.reflect.Method! sGetIBinderMethod;
    field private static boolean sGetIBinderMethodFetched;
    field private static java.lang.reflect.Method! sPutIBinderMethod;
    field private static boolean sPutIBinderMethodFetched;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class ComponentActivity extends android.app.Activity implements androidx.core.view.KeyEventDispatcher.Component {
    ctor public ComponentActivity();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public <T extends androidx.core.app.ComponentActivity.ExtraData> T! getExtraData(Class<T>!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void putExtraData(androidx.core.app.ComponentActivity.ExtraData!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean superDispatchKeyEvent(android.view.KeyEvent!);
    field private androidx.collection.SimpleArrayMap<java.lang.Class<? extends androidx.core.app.ComponentActivity.ExtraData>,androidx.core.app.ComponentActivity.ExtraData>! mExtraDataMap;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static class ComponentActivity.ExtraData {
    ctor public ComponentActivity.ExtraData();
  }

  @RequiresApi(api=28) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class CoreComponentFactory extends android.app.AppComponentFactory {
    ctor public CoreComponentFactory();
    method static <T> T! checkCompatWrapper(T!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface CoreComponentFactory.CompatWrapped {
    method public Object! getWrapper();
  }

  public class DialogCompat {
    ctor private DialogCompat();
  }

  public class FrameMetricsAggregator {
    field private static final int LAST_INDEX = 8; // 0x8
    field private androidx.core.app.FrameMetricsAggregator.FrameMetricsBaseImpl! mInstance;
  }

  @RequiresApi(24) private static class FrameMetricsAggregator.FrameMetricsApi24Impl extends androidx.core.app.FrameMetricsAggregator.FrameMetricsBaseImpl {
    ctor FrameMetricsAggregator.FrameMetricsApi24Impl(int);
    method public void add(android.app.Activity!);
    method void addDurationItem(android.util.SparseIntArray!, long);
    method public android.util.SparseIntArray[]! getMetrics();
    method public android.util.SparseIntArray[]! remove(android.app.Activity!);
    method public android.util.SparseIntArray[]! reset();
    method public android.util.SparseIntArray[]! stop();
    field private static final int NANOS_PER_MS = 1000000; // 0xf4240
    field private static final int NANOS_ROUNDING_VALUE = 500000; // 0x7a120
    field private java.util.ArrayList<java.lang.ref.WeakReference<android.app.Activity>>! mActivities;
    field android.view.Window.OnFrameMetricsAvailableListener! mListener;
    field android.util.SparseIntArray[]! mMetrics;
    field int mTrackingFlags;
    field private static android.os.Handler! sHandler;
    field private static android.os.HandlerThread! sHandlerThread;
  }

  private static class FrameMetricsAggregator.FrameMetricsBaseImpl {
    ctor FrameMetricsAggregator.FrameMetricsBaseImpl();
    method public void add(android.app.Activity!);
    method public android.util.SparseIntArray[]! getMetrics();
    method public android.util.SparseIntArray[]! remove(android.app.Activity!);
    method public android.util.SparseIntArray[]! reset();
    method public android.util.SparseIntArray[]! stop();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef(flag=true, value={androidx.core.app.FrameMetricsAggregator.TOTAL_DURATION, androidx.core.app.FrameMetricsAggregator.INPUT_DURATION, androidx.core.app.FrameMetricsAggregator.LAYOUT_MEASURE_DURATION, androidx.core.app.FrameMetricsAggregator.DRAW_DURATION, androidx.core.app.FrameMetricsAggregator.SYNC_DURATION, androidx.core.app.FrameMetricsAggregator.COMMAND_DURATION, androidx.core.app.FrameMetricsAggregator.SWAP_DURATION, androidx.core.app.FrameMetricsAggregator.DELAY_DURATION, androidx.core.app.FrameMetricsAggregator.ANIMATION_DURATION, androidx.core.app.FrameMetricsAggregator.EVERY_DURATION}) public static @interface FrameMetricsAggregator.MetricType {
  }

  public abstract class JobIntentService extends android.app.Service {
    method androidx.core.app.JobIntentService.GenericWorkItem! dequeueWork();
    method boolean doStopCurrentWork();
    method void ensureProcessorRunningLocked(boolean);
    method static androidx.core.app.JobIntentService.WorkEnqueuer! getWorkEnqueuer(android.content.Context!, android.content.ComponentName!, boolean, int);
    method void processorFinished();
    field static final boolean DEBUG = false;
    field static final String TAG = "JobIntentService";
    field final java.util.ArrayList<androidx.core.app.JobIntentService.CompatWorkItem>! mCompatQueue;
    field androidx.core.app.JobIntentService.WorkEnqueuer! mCompatWorkEnqueuer;
    field androidx.core.app.JobIntentService.CommandProcessor! mCurProcessor;
    field boolean mDestroyed;
    field boolean mInterruptIfStopped;
    field androidx.core.app.JobIntentService.CompatJobEngine! mJobImpl;
    field boolean mStopped;
    field static final java.util.HashMap<android.content.ComponentName,androidx.core.app.JobIntentService.WorkEnqueuer>! sClassWorkEnqueuer;
    field static final Object! sLock;
  }

  final class JobIntentService.CommandProcessor extends android.os.AsyncTask<java.lang.Void,java.lang.Void,java.lang.Void> {
    ctor JobIntentService.CommandProcessor();
  }

  static interface JobIntentService.CompatJobEngine {
    method public android.os.IBinder! compatGetBinder();
    method public androidx.core.app.JobIntentService.GenericWorkItem! dequeueWork();
  }

  static final class JobIntentService.CompatWorkEnqueuer extends androidx.core.app.JobIntentService.WorkEnqueuer {
    ctor JobIntentService.CompatWorkEnqueuer(android.content.Context!, android.content.ComponentName!);
    method void enqueueWork(android.content.Intent!);
    method public void serviceProcessingFinished();
    method public void serviceProcessingStarted();
    method public void serviceStartReceived();
    field private final android.content.Context! mContext;
    field private final android.os.PowerManager.WakeLock! mLaunchWakeLock;
    field boolean mLaunchingService;
    field private final android.os.PowerManager.WakeLock! mRunWakeLock;
    field boolean mServiceProcessing;
  }

  final class JobIntentService.CompatWorkItem implements androidx.core.app.JobIntentService.GenericWorkItem {
    ctor JobIntentService.CompatWorkItem(android.content.Intent!, int);
    method public void complete();
    method public android.content.Intent! getIntent();
    field final android.content.Intent! mIntent;
    field final int mStartId;
  }

  static interface JobIntentService.GenericWorkItem {
    method public void complete();
    method public android.content.Intent! getIntent();
  }

  @RequiresApi(26) static final class JobIntentService.JobServiceEngineImpl extends android.app.job.JobServiceEngine implements androidx.core.app.JobIntentService.CompatJobEngine {
    ctor JobIntentService.JobServiceEngineImpl(androidx.core.app.JobIntentService!);
    method public android.os.IBinder! compatGetBinder();
    method public androidx.core.app.JobIntentService.GenericWorkItem! dequeueWork();
    field static final boolean DEBUG = false;
    field static final String TAG = "JobServiceEngineImpl";
    field final Object! mLock;
    field android.app.job.JobParameters! mParams;
    field final androidx.core.app.JobIntentService! mService;
  }

  final class JobIntentService.JobServiceEngineImpl.WrapperWorkItem implements androidx.core.app.JobIntentService.GenericWorkItem {
    ctor JobIntentService.JobServiceEngineImpl.WrapperWorkItem(android.app.job.JobWorkItem!);
    method public void complete();
    method public android.content.Intent! getIntent();
    field final android.app.job.JobWorkItem! mJobWork;
  }

  @RequiresApi(26) static final class JobIntentService.JobWorkEnqueuer extends androidx.core.app.JobIntentService.WorkEnqueuer {
    ctor JobIntentService.JobWorkEnqueuer(android.content.Context!, android.content.ComponentName!, int);
    method void enqueueWork(android.content.Intent!);
    field private final android.app.job.JobInfo! mJobInfo;
    field private final android.app.job.JobScheduler! mJobScheduler;
  }

  abstract static class JobIntentService.WorkEnqueuer {
    ctor JobIntentService.WorkEnqueuer(android.content.ComponentName!);
    method abstract void enqueueWork(android.content.Intent!);
    method void ensureJobId(int);
    method public void serviceProcessingFinished();
    method public void serviceProcessingStarted();
    method public void serviceStartReceived();
    field final android.content.ComponentName! mComponentName;
    field boolean mHasJobId;
    field int mJobId;
  }

  public final class NavUtils {
    ctor private NavUtils();
    field private static final String TAG = "NavUtils";
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface NotificationBuilderWithBuilderAccessor {
    method public android.app.Notification.Builder! getBuilder();
  }

  public class NotificationCompat {
    method @RequiresApi(20) static androidx.core.app.NotificationCompat.Action! getActionCompatFromAction(android.app.Notification.Action!);
    method static android.app.Notification[]! getNotificationArrayFromBundle(android.os.Bundle!, String!);
  }

  public static class NotificationCompat.Action {
    ctor NotificationCompat.Action(int, CharSequence!, android.app.PendingIntent!, android.os.Bundle!, androidx.core.app.RemoteInput[]!, androidx.core.app.RemoteInput[]!, boolean, @androidx.core.app.NotificationCompat.Action.SemanticAction int, boolean);
    field static final String EXTRA_SEMANTIC_ACTION = "android.support.action.semanticAction";
    field static final String EXTRA_SHOWS_USER_INTERFACE = "android.support.action.showsUserInterface";
    field private boolean mAllowGeneratedReplies;
    field private final androidx.core.app.RemoteInput[]! mDataOnlyRemoteInputs;
    field final android.os.Bundle! mExtras;
    field private final androidx.core.app.RemoteInput[]! mRemoteInputs;
    field @androidx.core.app.NotificationCompat.Action.SemanticAction private final int mSemanticAction;
    field boolean mShowsUserInterface;
  }

  public static final class NotificationCompat.Action.Builder {
    ctor private NotificationCompat.Action.Builder(int, CharSequence!, android.app.PendingIntent!, android.os.Bundle!, androidx.core.app.RemoteInput[]!, boolean, @androidx.core.app.NotificationCompat.Action.SemanticAction int, boolean);
    field private boolean mAllowGeneratedReplies;
    field private final android.os.Bundle! mExtras;
    field private final int mIcon;
    field private final android.app.PendingIntent! mIntent;
    field private java.util.ArrayList<androidx.core.app.RemoteInput>! mRemoteInputs;
    field @androidx.core.app.NotificationCompat.Action.SemanticAction private int mSemanticAction;
    field private boolean mShowsUserInterface;
    field private final CharSequence! mTitle;
  }

  public static final class NotificationCompat.Action.WearableExtender implements androidx.core.app.NotificationCompat.Action.Extender {
    method private void setFlag(int, boolean);
    field private static final int DEFAULT_FLAGS = 1; // 0x1
    field private static final String EXTRA_WEARABLE_EXTENSIONS = "android.wearable.EXTENSIONS";
    field private static final int FLAG_AVAILABLE_OFFLINE = 1; // 0x1
    field private static final int FLAG_HINT_DISPLAY_INLINE = 4; // 0x4
    field private static final int FLAG_HINT_LAUNCHES_ACTIVITY = 2; // 0x2
    field private static final String KEY_CANCEL_LABEL = "cancelLabel";
    field private static final String KEY_CONFIRM_LABEL = "confirmLabel";
    field private static final String KEY_FLAGS = "flags";
    field private static final String KEY_IN_PROGRESS_LABEL = "inProgressLabel";
    field private CharSequence! mCancelLabel;
    field private CharSequence! mConfirmLabel;
    field private int mFlags;
    field private CharSequence! mInProgressLabel;
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.app.NotificationCompat.BADGE_ICON_NONE, androidx.core.app.NotificationCompat.BADGE_ICON_SMALL, androidx.core.app.NotificationCompat.BADGE_ICON_LARGE}) public static @interface NotificationCompat.BadgeIconType {
  }

  public static class NotificationCompat.BigPictureStyle extends androidx.core.app.NotificationCompat.Style {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    field private android.graphics.Bitmap! mBigLargeIcon;
    field private boolean mBigLargeIconSet;
    field private android.graphics.Bitmap! mPicture;
  }

  public static class NotificationCompat.BigTextStyle extends androidx.core.app.NotificationCompat.Style {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    field private CharSequence! mBigText;
  }

  public static class NotificationCompat.Builder {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! getBigContentView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int getColor();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! getContentView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! getHeadsUpContentView();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int getPriority();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public long getWhenIfShowing();
    method private android.graphics.Bitmap! reduceLargeIconSize(android.graphics.Bitmap!);
    method private void setFlag(int, boolean);
    field private static final int MAX_CHARSEQUENCE_LENGTH = 5120; // 0x1400
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public java.util.ArrayList<androidx.core.app.NotificationCompat.Action>! mActions;
    field int mBadgeIcon;
    field android.widget.RemoteViews! mBigContentView;
    field String! mCategory;
    field String! mChannelId;
    field int mColor;
    field boolean mColorized;
    field boolean mColorizedSet;
    field CharSequence! mContentInfo;
    field android.app.PendingIntent! mContentIntent;
    field CharSequence! mContentText;
    field CharSequence! mContentTitle;
    field android.widget.RemoteViews! mContentView;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.content.Context! mContext;
    field android.os.Bundle! mExtras;
    field android.app.PendingIntent! mFullScreenIntent;
    field int mGroupAlertBehavior;
    field String! mGroupKey;
    field boolean mGroupSummary;
    field android.widget.RemoteViews! mHeadsUpContentView;
    field java.util.ArrayList<androidx.core.app.NotificationCompat.Action>! mInvisibleActions;
    field android.graphics.Bitmap! mLargeIcon;
    field boolean mLocalOnly;
    field android.app.Notification! mNotification;
    field int mNumber;
    field int mPriority;
    field int mProgress;
    field boolean mProgressIndeterminate;
    field int mProgressMax;
    field android.app.Notification! mPublicVersion;
    field CharSequence[]! mRemoteInputHistory;
    field String! mShortcutId;
    field boolean mShowWhen;
    field String! mSortKey;
    field androidx.core.app.NotificationCompat.Style! mStyle;
    field CharSequence! mSubText;
    field android.widget.RemoteViews! mTickerView;
    field long mTimeout;
    field boolean mUseChronometer;
    field int mVisibility;
  }

  public static final class NotificationCompat.CarExtender implements androidx.core.app.NotificationCompat.Extender {
    method @RequiresApi(21) private static android.os.Bundle! getBundleForUnreadConversation(androidx.core.app.NotificationCompat.CarExtender.UnreadConversation);
    method @RequiresApi(21) private static androidx.core.app.NotificationCompat.CarExtender.UnreadConversation! getUnreadConversationFromBundle(android.os.Bundle?);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) static final String EXTRA_CAR_EXTENDER = "android.car.EXTENSIONS";
    field private static final String EXTRA_COLOR = "app_color";
    field private static final String EXTRA_CONVERSATION = "car_conversation";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) static final String EXTRA_INVISIBLE_ACTIONS = "invisible_actions";
    field private static final String EXTRA_LARGE_ICON = "large_icon";
    field private static final String KEY_AUTHOR = "author";
    field private static final String KEY_MESSAGES = "messages";
    field private static final String KEY_ON_READ = "on_read";
    field private static final String KEY_ON_REPLY = "on_reply";
    field private static final String KEY_PARTICIPANTS = "participants";
    field private static final String KEY_REMOTE_INPUT = "remote_input";
    field private static final String KEY_TEXT = "text";
    field private static final String KEY_TIMESTAMP = "timestamp";
    field private int mColor;
    field private android.graphics.Bitmap! mLargeIcon;
    field private androidx.core.app.NotificationCompat.CarExtender.UnreadConversation! mUnreadConversation;
  }

  public static class NotificationCompat.CarExtender.UnreadConversation {
    ctor NotificationCompat.CarExtender.UnreadConversation(String[]!, androidx.core.app.RemoteInput!, android.app.PendingIntent!, android.app.PendingIntent!, String[]!, long);
    field private final long mLatestTimestamp;
    field private final String[]! mMessages;
    field private final String[]! mParticipants;
    field private final android.app.PendingIntent! mReadPendingIntent;
    field private final androidx.core.app.RemoteInput! mRemoteInput;
    field private final android.app.PendingIntent! mReplyPendingIntent;
  }

  public static class NotificationCompat.CarExtender.UnreadConversation.Builder {
    field private long mLatestTimestamp;
    field private final java.util.List<java.lang.String>! mMessages;
    field private final String! mParticipant;
    field private android.app.PendingIntent! mReadPendingIntent;
    field private androidx.core.app.RemoteInput! mRemoteInput;
    field private android.app.PendingIntent! mReplyPendingIntent;
  }

  public static class NotificationCompat.DecoratedCustomViewStyle extends androidx.core.app.NotificationCompat.Style {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method private android.widget.RemoteViews! createRemoteViews(android.widget.RemoteViews!, boolean);
    method private android.widget.RemoteViews! generateActionButton(androidx.core.app.NotificationCompat.Action!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeBigContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeHeadsUpContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    field private static final int MAX_ACTION_BUTTONS = 3; // 0x3
  }

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.app.NotificationCompat.GROUP_ALERT_ALL, androidx.core.app.NotificationCompat.GROUP_ALERT_SUMMARY, androidx.core.app.NotificationCompat.GROUP_ALERT_CHILDREN}) public static @interface NotificationCompat.GroupAlertBehavior {
  }

  public static class NotificationCompat.InboxStyle extends androidx.core.app.NotificationCompat.Style {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    field private java.util.ArrayList<java.lang.CharSequence>! mTexts;
  }

  public static class NotificationCompat.MessagingStyle extends androidx.core.app.NotificationCompat.Style {
    ctor private NotificationCompat.MessagingStyle();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method private androidx.core.app.NotificationCompat.MessagingStyle.Message? findLatestIncomingMessage();
    method private boolean hasMessagesWithoutSender();
    method private android.text.style.TextAppearanceSpan makeFontColorSpan(int);
    method private CharSequence! makeMessageLine(androidx.core.app.NotificationCompat.MessagingStyle.Message!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected void restoreFromCompatExtras(android.os.Bundle!);
    field private CharSequence? mConversationTitle;
    field private Boolean? mIsGroupConversation;
    field private final java.util.List<androidx.core.app.NotificationCompat.MessagingStyle.Message>! mMessages;
    field private androidx.core.app.Person! mUser;
  }

  public static final class NotificationCompat.MessagingStyle.Message {
    method static android.os.Bundle[] getBundleArrayForMessages(java.util.List<androidx.core.app.NotificationCompat.MessagingStyle.Message>!);
    method static androidx.core.app.NotificationCompat.MessagingStyle.Message? getMessageFromBundle(android.os.Bundle!);
    method static java.util.List<androidx.core.app.NotificationCompat.MessagingStyle.Message> getMessagesFromBundleArray(android.os.Parcelable[]!);
    method private android.os.Bundle! toBundle();
    field static final String KEY_DATA_MIME_TYPE = "type";
    field static final String KEY_DATA_URI = "uri";
    field static final String KEY_EXTRAS_BUNDLE = "extras";
    field static final String KEY_NOTIFICATION_PERSON = "sender_person";
    field static final String KEY_PERSON = "person";
    field static final String KEY_SENDER = "sender";
    field static final String KEY_TEXT = "text";
    field static final String KEY_TIMESTAMP = "time";
    field private String? mDataMimeType;
    field private android.net.Uri? mDataUri;
    field private android.os.Bundle! mExtras;
    field private final androidx.core.app.Person? mPerson;
    field private final CharSequence! mText;
    field private final long mTimestamp;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.core.app.NotificationCompat.VISIBILITY_PUBLIC, androidx.core.app.NotificationCompat.VISIBILITY_PRIVATE, androidx.core.app.NotificationCompat.VISIBILITY_SECRET}) public static @interface NotificationCompat.NotificationVisibility {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.media.AudioManager.STREAM_VOICE_CALL, android.media.AudioManager.STREAM_SYSTEM, android.media.AudioManager.STREAM_RING, android.media.AudioManager.STREAM_MUSIC, android.media.AudioManager.STREAM_ALARM, android.media.AudioManager.STREAM_NOTIFICATION, android.media.AudioManager.STREAM_DTMF, android.media.AudioManager.STREAM_ACCESSIBILITY}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface NotificationCompat.StreamType {
  }

  public abstract static class NotificationCompat.Style {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addCompatExtras(android.os.Bundle!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! applyStandardTemplate(boolean, int, boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void buildIntoRemoteViews(android.widget.RemoteViews!, android.widget.RemoteViews!);
    method private int calculateTopPadding();
    method private static float constrain(float, float, float);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.graphics.Bitmap! createColoredBitmap(int, int);
    method private android.graphics.Bitmap! createColoredBitmap(int, int, int);
    method private android.graphics.Bitmap! createIconWithBackground(int, int, int, int);
    method private void hideNormalContent(android.widget.RemoteViews!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeBigContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.widget.RemoteViews! makeHeadsUpContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected void restoreFromCompatExtras(android.os.Bundle!);
    field CharSequence! mBigContentTitle;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) protected androidx.core.app.NotificationCompat.Builder! mBuilder;
    field CharSequence! mSummaryText;
    field boolean mSummaryTextSet;
  }

  public static final class NotificationCompat.WearableExtender implements androidx.core.app.NotificationCompat.Extender {
    method @RequiresApi(20) private static android.app.Notification.Action! getActionFromActionCompat(androidx.core.app.NotificationCompat.Action!);
    method private void setFlag(int, boolean);
    field private static final int DEFAULT_CONTENT_ICON_GRAVITY = 8388613; // 0x800005
    field private static final int DEFAULT_FLAGS = 1; // 0x1
    field private static final int DEFAULT_GRAVITY = 80; // 0x50
    field private static final String EXTRA_WEARABLE_EXTENSIONS = "android.wearable.EXTENSIONS";
    field private static final int FLAG_BIG_PICTURE_AMBIENT = 32; // 0x20
    field private static final int FLAG_CONTENT_INTENT_AVAILABLE_OFFLINE = 1; // 0x1
    field private static final int FLAG_HINT_AVOID_BACKGROUND_CLIPPING = 16; // 0x10
    field private static final int FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY = 64; // 0x40
    field private static final int FLAG_HINT_HIDE_ICON = 2; // 0x2
    field private static final int FLAG_HINT_SHOW_BACKGROUND_ONLY = 4; // 0x4
    field private static final int FLAG_START_SCROLL_BOTTOM = 8; // 0x8
    field private static final String KEY_ACTIONS = "actions";
    field private static final String KEY_BACKGROUND = "background";
    field private static final String KEY_BRIDGE_TAG = "bridgeTag";
    field private static final String KEY_CONTENT_ACTION_INDEX = "contentActionIndex";
    field private static final String KEY_CONTENT_ICON = "contentIcon";
    field private static final String KEY_CONTENT_ICON_GRAVITY = "contentIconGravity";
    field private static final String KEY_CUSTOM_CONTENT_HEIGHT = "customContentHeight";
    field private static final String KEY_CUSTOM_SIZE_PRESET = "customSizePreset";
    field private static final String KEY_DISMISSAL_ID = "dismissalId";
    field private static final String KEY_DISPLAY_INTENT = "displayIntent";
    field private static final String KEY_FLAGS = "flags";
    field private static final String KEY_GRAVITY = "gravity";
    field private static final String KEY_HINT_SCREEN_TIMEOUT = "hintScreenTimeout";
    field private static final String KEY_PAGES = "pages";
    field private java.util.ArrayList<androidx.core.app.NotificationCompat.Action>! mActions;
    field private android.graphics.Bitmap! mBackground;
    field private String! mBridgeTag;
    field private int mContentActionIndex;
    field private int mContentIcon;
    field private int mContentIconGravity;
    field private int mCustomContentHeight;
    field private int mCustomSizePreset;
    field private String! mDismissalId;
    field private android.app.PendingIntent! mDisplayIntent;
    field private int mFlags;
    field private int mGravity;
    field private int mHintScreenTimeout;
    field private java.util.ArrayList<android.app.Notification>! mPages;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class NotificationCompatBuilder implements androidx.core.app.NotificationBuilderWithBuilderAccessor {
    ctor NotificationCompatBuilder(androidx.core.app.NotificationCompat.Builder!);
    method private void addAction(androidx.core.app.NotificationCompat.Action!);
    method public android.app.Notification! build();
    method protected android.app.Notification! buildInternal();
    method public android.app.Notification.Builder! getBuilder();
    method private void removeSoundAndVibration(android.app.Notification!);
    field private final java.util.List<android.os.Bundle>! mActionExtrasList;
    field private android.widget.RemoteViews! mBigContentView;
    field private final android.app.Notification.Builder! mBuilder;
    field private final androidx.core.app.NotificationCompat.Builder! mBuilderCompat;
    field private android.widget.RemoteViews! mContentView;
    field private final android.os.Bundle! mExtras;
    field private int mGroupAlertBehavior;
    field private android.widget.RemoteViews! mHeadsUpContentView;
  }

  public final class NotificationCompatExtras {
    ctor private NotificationCompatExtras();
  }

  @RequiresApi(16) class NotificationCompatJellybean {
    ctor private NotificationCompatJellybean();
    method public static android.util.SparseArray<android.os.Bundle>! buildActionExtrasMap(java.util.List<android.os.Bundle>!);
    method private static boolean ensureActionReflectionReadyLocked();
    method private static androidx.core.app.RemoteInput! fromBundle(android.os.Bundle!);
    method private static androidx.core.app.RemoteInput[]! fromBundleArray(android.os.Bundle[]!);
    method public static androidx.core.app.NotificationCompat.Action! getAction(android.app.Notification!, int);
    method public static int getActionCount(android.app.Notification!);
    method static androidx.core.app.NotificationCompat.Action! getActionFromBundle(android.os.Bundle!);
    method private static Object[]! getActionObjectsLocked(android.app.Notification!);
    method private static android.os.Bundle[]! getBundleArrayFromBundle(android.os.Bundle!, String!);
    method static android.os.Bundle! getBundleForAction(androidx.core.app.NotificationCompat.Action!);
    method public static android.os.Bundle! getExtras(android.app.Notification!);
    method public static androidx.core.app.NotificationCompat.Action! readAction(int, CharSequence!, android.app.PendingIntent!, android.os.Bundle!);
    method private static android.os.Bundle! toBundle(androidx.core.app.RemoteInput!);
    method private static android.os.Bundle[]! toBundleArray(androidx.core.app.RemoteInput[]!);
    method public static android.os.Bundle! writeActionAndGetExtras(android.app.Notification.Builder!, androidx.core.app.NotificationCompat.Action!);
    field static final String EXTRA_ALLOW_GENERATED_REPLIES = "android.support.allowGeneratedReplies";
    field static final String EXTRA_DATA_ONLY_REMOTE_INPUTS = "android.support.dataRemoteInputs";
    field private static final String KEY_ACTION_INTENT = "actionIntent";
    field private static final String KEY_ALLOWED_DATA_TYPES = "allowedDataTypes";
    field private static final String KEY_ALLOW_FREE_FORM_INPUT = "allowFreeFormInput";
    field private static final String KEY_CHOICES = "choices";
    field private static final String KEY_DATA_ONLY_REMOTE_INPUTS = "dataOnlyRemoteInputs";
    field private static final String KEY_EXTRAS = "extras";
    field private static final String KEY_ICON = "icon";
    field private static final String KEY_LABEL = "label";
    field private static final String KEY_REMOTE_INPUTS = "remoteInputs";
    field private static final String KEY_RESULT_KEY = "resultKey";
    field private static final String KEY_SEMANTIC_ACTION = "semanticAction";
    field private static final String KEY_SHOWS_USER_INTERFACE = "showsUserInterface";
    field private static final String KEY_TITLE = "title";
    field public static final String TAG = "NotificationCompat";
    field private static java.lang.reflect.Field! sActionIconField;
    field private static java.lang.reflect.Field! sActionIntentField;
    field private static java.lang.reflect.Field! sActionTitleField;
    field private static boolean sActionsAccessFailed;
    field private static java.lang.reflect.Field! sActionsField;
    field private static final Object! sActionsLock;
    field private static java.lang.reflect.Field! sExtrasField;
    field private static boolean sExtrasFieldAccessFailed;
    field private static final Object! sExtrasLock;
  }

  public abstract class NotificationCompatSideChannelService extends android.app.Service {
    method void checkPermission(int, String!);
  }

  private class NotificationCompatSideChannelService.NotificationSideChannelStub {
    ctor NotificationCompatSideChannelService.NotificationSideChannelStub();
    method public void cancel(String!, int, String!) throws android.os.RemoteException;
    method public void cancelAll(String!);
    method public void notify(String!, int, String!, android.app.Notification!) throws android.os.RemoteException;
  }

  public final class NotificationManagerCompat {
    ctor private NotificationManagerCompat(android.content.Context!);
    method private void pushSideChannelQueue(androidx.core.app.NotificationManagerCompat.Task!);
    method private static boolean useSideChannelForNotification(android.app.Notification!);
    field private static final String CHECK_OP_NO_THROW = "checkOpNoThrow";
    field static final int MAX_SIDE_CHANNEL_SDK_VERSION = 19; // 0x13
    field private static final String OP_POST_NOTIFICATION = "OP_POST_NOTIFICATION";
    field private static final String SETTING_ENABLED_NOTIFICATION_LISTENERS = "enabled_notification_listeners";
    field private static final int SIDE_CHANNEL_RETRY_BASE_INTERVAL_MS = 1000; // 0x3e8
    field private static final int SIDE_CHANNEL_RETRY_MAX_COUNT = 6; // 0x6
    field private static final String TAG = "NotifManCompat";
    field private final android.content.Context! mContext;
    field private final android.app.NotificationManager! mNotificationManager;
    field @GuardedBy("sEnabledNotificationListenersLock") private static java.util.Set<java.lang.String>! sEnabledNotificationListenerPackages;
    field @GuardedBy("sEnabledNotificationListenersLock") private static String! sEnabledNotificationListeners;
    field private static final Object! sEnabledNotificationListenersLock;
    field private static final Object! sLock;
    field @GuardedBy("sLock") private static androidx.core.app.NotificationManagerCompat.SideChannelManager! sSideChannelManager;
  }

  private static class NotificationManagerCompat.CancelTask implements androidx.core.app.NotificationManagerCompat.Task {
    ctor NotificationManagerCompat.CancelTask(String!);
    ctor NotificationManagerCompat.CancelTask(String!, int, String!);
    method public void send(INotificationSideChannel!) throws android.os.RemoteException;
    field final boolean all;
    field final int id;
    field final String! packageName;
    field final String! tag;
  }

  private static class NotificationManagerCompat.NotifyTask implements androidx.core.app.NotificationManagerCompat.Task {
    ctor NotificationManagerCompat.NotifyTask(String!, int, String!, android.app.Notification!);
    method public void send(INotificationSideChannel!) throws android.os.RemoteException;
    field final int id;
    field final android.app.Notification! notif;
    field final String! packageName;
    field final String! tag;
  }

  private static class NotificationManagerCompat.ServiceConnectedEvent {
    ctor NotificationManagerCompat.ServiceConnectedEvent(android.content.ComponentName!, android.os.IBinder!);
    field final android.content.ComponentName! componentName;
    field final android.os.IBinder! iBinder;
  }

  private static class NotificationManagerCompat.SideChannelManager implements android.os.Handler.Callback android.content.ServiceConnection {
    ctor NotificationManagerCompat.SideChannelManager(android.content.Context!);
    method private boolean ensureServiceBound(androidx.core.app.NotificationManagerCompat.SideChannelManager.ListenerRecord!);
    method private void ensureServiceUnbound(androidx.core.app.NotificationManagerCompat.SideChannelManager.ListenerRecord!);
    method private void handleQueueTask(androidx.core.app.NotificationManagerCompat.Task!);
    method private void handleRetryListenerQueue(android.content.ComponentName!);
    method private void handleServiceConnected(android.content.ComponentName!, android.os.IBinder!);
    method private void handleServiceDisconnected(android.content.ComponentName!);
    method private void processListenerQueue(androidx.core.app.NotificationManagerCompat.SideChannelManager.ListenerRecord!);
    method public void queueTask(androidx.core.app.NotificationManagerCompat.Task!);
    method private void scheduleListenerRetry(androidx.core.app.NotificationManagerCompat.SideChannelManager.ListenerRecord!);
    method private void updateListenerMap();
    field private static final int MSG_QUEUE_TASK = 0; // 0x0
    field private static final int MSG_RETRY_LISTENER_QUEUE = 3; // 0x3
    field private static final int MSG_SERVICE_CONNECTED = 1; // 0x1
    field private static final int MSG_SERVICE_DISCONNECTED = 2; // 0x2
    field private java.util.Set<java.lang.String>! mCachedEnabledPackages;
    field private final android.content.Context! mContext;
    field private final android.os.Handler! mHandler;
    field private final android.os.HandlerThread! mHandlerThread;
    field private final java.util.Map<android.content.ComponentName,androidx.core.app.NotificationManagerCompat.SideChannelManager.ListenerRecord>! mRecordMap;
  }

  private static class NotificationManagerCompat.SideChannelManager.ListenerRecord {
    ctor NotificationManagerCompat.SideChannelManager.ListenerRecord(android.content.ComponentName!);
    field boolean bound;
    field final android.content.ComponentName! componentName;
    field int retryCount;
    field INotificationSideChannel! service;
    field java.util.ArrayDeque<androidx.core.app.NotificationManagerCompat.Task>! taskQueue;
  }

  private static interface NotificationManagerCompat.Task {
    method public void send(INotificationSideChannel!) throws android.os.RemoteException;
  }

  public class Person {
    ctor Person(androidx.core.app.Person.Builder!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(28) public static androidx.core.app.Person fromAndroidPerson(android.app.Person);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(22) public static androidx.core.app.Person fromPersistableBundle(android.os.PersistableBundle);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(28) public android.app.Person toAndroidPerson();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(22) public android.os.PersistableBundle toPersistableBundle();
    field private static final String ICON_KEY = "icon";
    field private static final String IS_BOT_KEY = "isBot";
    field private static final String IS_IMPORTANT_KEY = "isImportant";
    field private static final String KEY_KEY = "key";
    field private static final String NAME_KEY = "name";
    field private static final String URI_KEY = "uri";
    field androidx.core.graphics.drawable.IconCompat? mIcon;
    field boolean mIsBot;
    field boolean mIsImportant;
    field String? mKey;
    field CharSequence? mName;
    field String? mUri;
  }

  public static class Person.Builder {
    ctor Person.Builder(androidx.core.app.Person!);
    field androidx.core.graphics.drawable.IconCompat? mIcon;
    field boolean mIsBot;
    field boolean mIsImportant;
    field String? mKey;
    field CharSequence? mName;
    field String? mUri;
  }

  public final class RemoteActionCompat {
    field private static final String EXTRA_ACTION_INTENT = "action";
    field private static final String EXTRA_CONTENT_DESCRIPTION = "desc";
    field private static final String EXTRA_ENABLED = "enabled";
    field private static final String EXTRA_ICON = "icon";
    field private static final String EXTRA_SHOULD_SHOW_ICON = "showicon";
    field private static final String EXTRA_TITLE = "title";
    field private final android.app.PendingIntent! mActionIntent;
    field private final CharSequence! mContentDescription;
    field private boolean mEnabled;
    field private final androidx.core.graphics.drawable.IconCompat! mIcon;
    field private boolean mShouldShowIcon;
    field private final CharSequence! mTitle;
  }

  public final class RemoteInput {
    ctor RemoteInput(String!, CharSequence!, CharSequence[]!, boolean, android.os.Bundle!, java.util.Set<java.lang.String>!);
    method @RequiresApi(20) static android.app.RemoteInput[]! fromCompat(androidx.core.app.RemoteInput[]!);
    method @RequiresApi(20) static android.app.RemoteInput! fromCompat(androidx.core.app.RemoteInput!);
    method @RequiresApi(16) private static android.content.Intent! getClipDataIntentFromIntent(android.content.Intent!);
    method private static String! getExtraResultsKeyForData(String!);
    field private static final String EXTRA_DATA_TYPE_RESULTS_DATA = "android.remoteinput.dataTypeResultsData";
    field private static final String EXTRA_RESULTS_SOURCE = "android.remoteinput.resultsSource";
    field private static final String TAG = "RemoteInput";
    field private final boolean mAllowFreeFormTextInput;
    field private final java.util.Set<java.lang.String>! mAllowedDataTypes;
    field private final CharSequence[]! mChoices;
    field private final android.os.Bundle! mExtras;
    field private final CharSequence! mLabel;
    field private final String! mResultKey;
  }

  public static final class RemoteInput.Builder {
    field private boolean mAllowFreeFormTextInput;
    field private final java.util.Set<java.lang.String>! mAllowedDataTypes;
    field private CharSequence[]! mChoices;
    field private final android.os.Bundle! mExtras;
    field private CharSequence! mLabel;
    field private final String! mResultKey;
  }

  @IntDef({androidx.core.app.RemoteInput.SOURCE_FREE_FORM_INPUT, androidx.core.app.RemoteInput.SOURCE_CHOICE}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface RemoteInput.Source {
  }

  public final class ServiceCompat {
    ctor private ServiceCompat();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(flag=true, value={androidx.core.app.ServiceCompat.STOP_FOREGROUND_REMOVE, androidx.core.app.ServiceCompat.STOP_FOREGROUND_DETACH}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface ServiceCompat.StopForegroundFlags {
  }

  public final class ShareCompat {
    ctor private ShareCompat();
    field private static final String HISTORY_FILENAME_PREFIX = ".sharecompat_";
  }

  public static class ShareCompat.IntentBuilder {
    ctor private ShareCompat.IntentBuilder(android.app.Activity!);
    method private void combineArrayExtra(String!, java.util.ArrayList<java.lang.String>!);
    method private void combineArrayExtra(String!, String[]!);
    method android.app.Activity! getActivity();
    field private android.app.Activity! mActivity;
    field private java.util.ArrayList<java.lang.String>! mBccAddresses;
    field private java.util.ArrayList<java.lang.String>! mCcAddresses;
    field private CharSequence! mChooserTitle;
    field private android.content.Intent! mIntent;
    field private java.util.ArrayList<android.net.Uri>! mStreams;
    field private java.util.ArrayList<java.lang.String>! mToAddresses;
  }

  public static class ShareCompat.IntentReader {
    ctor private ShareCompat.IntentReader(android.app.Activity!);
    method private static void withinStyle(StringBuilder!, CharSequence!, int, int);
    field private static final String TAG = "IntentReader";
    field private android.app.Activity! mActivity;
    field private android.content.ComponentName! mCallingActivity;
    field private String! mCallingPackage;
    field private android.content.Intent! mIntent;
    field private java.util.ArrayList<android.net.Uri>! mStreams;
  }

  public abstract class SharedElementCallback {
    method private static android.graphics.Bitmap! createDrawableBitmap(android.graphics.drawable.Drawable!);
    field private static final String BUNDLE_SNAPSHOT_BITMAP = "sharedElement:snapshot:bitmap";
    field private static final String BUNDLE_SNAPSHOT_IMAGE_MATRIX = "sharedElement:snapshot:imageMatrix";
    field private static final String BUNDLE_SNAPSHOT_IMAGE_SCALETYPE = "sharedElement:snapshot:imageScaleType";
    field private static final int MAX_IMAGE_SIZE = 1048576; // 0x100000
    field private android.graphics.Matrix! mTempMatrix;
  }

  public final class TaskStackBuilder implements java.lang.Iterable<android.content.Intent> {
    ctor private TaskStackBuilder(android.content.Context!);
    field private static final String TAG = "TaskStackBuilder";
    field private final java.util.ArrayList<android.content.Intent>! mIntents;
    field private final android.content.Context! mSourceContext;
  }

}

package androidx.core.content {

  public final class ContentResolverCompat {
    ctor private ContentResolverCompat();
  }

  public class ContextCompat {
    method private static java.io.File! createFilesDir(java.io.File!);
    field private static final String TAG = "ContextCompat";
    field private static final Object! sLock;
    field private static android.util.TypedValue! sTempValue;
  }

  private static final class ContextCompat.LegacyServiceMapHolder {
    ctor private ContextCompat.LegacyServiceMapHolder();
    field static final java.util.HashMap<java.lang.Class<?>,java.lang.String>! SERVICES;
  }

  private static class ContextCompat.MainHandlerExecutor implements java.util.concurrent.Executor {
    ctor ContextCompat.MainHandlerExecutor(android.os.Handler);
    field private final android.os.Handler! mHandler;
  }

  public class FileProvider extends android.content.ContentProvider {
    method private static java.io.File! buildPath(java.io.File!, java.lang.String...!);
    method private static String[]! copyOf(String[]!, int);
    method private static Object[]! copyOf(Object[]!, int);
    method private static androidx.core.content.FileProvider.PathStrategy! getPathStrategy(android.content.Context!, String!);
    method private static int modeToMode(String!);
    method private static androidx.core.content.FileProvider.PathStrategy! parsePathStrategy(android.content.Context!, String!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    field private static final String ATTR_NAME = "name";
    field private static final String ATTR_PATH = "path";
    field private static final String[]! COLUMNS;
    field private static final java.io.File! DEVICE_ROOT;
    field private static final String META_DATA_FILE_PROVIDER_PATHS = "android.support.FILE_PROVIDER_PATHS";
    field private static final String TAG_CACHE_PATH = "cache-path";
    field private static final String TAG_EXTERNAL = "external-path";
    field private static final String TAG_EXTERNAL_CACHE = "external-cache-path";
    field private static final String TAG_EXTERNAL_FILES = "external-files-path";
    field private static final String TAG_EXTERNAL_MEDIA = "external-media-path";
    field private static final String TAG_FILES_PATH = "files-path";
    field private static final String TAG_ROOT_PATH = "root-path";
    field private androidx.core.content.FileProvider.PathStrategy! mStrategy;
    field @GuardedBy("sCache") private static java.util.HashMap<java.lang.String,androidx.core.content.FileProvider.PathStrategy>! sCache;
  }

  static interface FileProvider.PathStrategy {
    method public java.io.File! getFileForUri(android.net.Uri!);
    method public android.net.Uri! getUriForFile(java.io.File!);
  }

  static class FileProvider.SimplePathStrategy implements androidx.core.content.FileProvider.PathStrategy {
    ctor FileProvider.SimplePathStrategy(String!);
    method void addRoot(String!, java.io.File!);
    method public java.io.File! getFileForUri(android.net.Uri!);
    method public android.net.Uri! getUriForFile(java.io.File!);
    field private final String! mAuthority;
    field private final java.util.HashMap<java.lang.String,java.io.File>! mRoots;
  }

  public final class IntentCompat {
    ctor private IntentCompat();
  }

  public final class MimeTypeFilter {
    ctor private MimeTypeFilter();
    method private static boolean mimeTypeAgainstFilter(String[], String[]);
  }

  public final class PermissionChecker {
    ctor private PermissionChecker();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.content.PermissionChecker.PERMISSION_GRANTED, androidx.core.content.PermissionChecker.PERMISSION_DENIED, androidx.core.content.PermissionChecker.PERMISSION_DENIED_APP_OP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PermissionChecker.PermissionResult {
  }

  @Deprecated public final class SharedPreferencesCompat {
    ctor private SharedPreferencesCompat();
  }

  @Deprecated public static final class SharedPreferencesCompat.EditorCompat {
    ctor private SharedPreferencesCompat.EditorCompat();
    field private final androidx.core.content.SharedPreferencesCompat.EditorCompat.Helper! mHelper;
    field private static androidx.core.content.SharedPreferencesCompat.EditorCompat! sInstance;
  }

  private static class SharedPreferencesCompat.EditorCompat.Helper {
    ctor SharedPreferencesCompat.EditorCompat.Helper();
    method public void apply(android.content.SharedPreferences.Editor);
  }

}

package androidx.core.content.pm {

  @Deprecated public final class ActivityInfoCompat {
    ctor private ActivityInfoCompat();
  }

  public final class PackageInfoCompat {
    ctor private PackageInfoCompat();
  }

  public final class PermissionInfoCompat {
    ctor private PermissionInfoCompat();
  }

  @IntDef(flag=false, value={android.content.pm.PermissionInfo.PROTECTION_NORMAL, android.content.pm.PermissionInfo.PROTECTION_DANGEROUS, android.content.pm.PermissionInfo.PROTECTION_SIGNATURE, android.content.pm.PermissionInfo.PROTECTION_SIGNATURE_OR_SYSTEM}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PermissionInfoCompat.Protection {
  }

  @IntDef(flag=true, value={android.content.pm.PermissionInfo.PROTECTION_FLAG_PRIVILEGED, android.content.pm.PermissionInfo.PROTECTION_FLAG_SYSTEM, android.content.pm.PermissionInfo.PROTECTION_FLAG_DEVELOPMENT, android.content.pm.PermissionInfo.PROTECTION_FLAG_APPOP, android.content.pm.PermissionInfo.PROTECTION_FLAG_PRE23, android.content.pm.PermissionInfo.PROTECTION_FLAG_INSTALLER, android.content.pm.PermissionInfo.PROTECTION_FLAG_VERIFIER, android.content.pm.PermissionInfo.PROTECTION_FLAG_PREINSTALLED, android.content.pm.PermissionInfo.PROTECTION_FLAG_SETUP, android.content.pm.PermissionInfo.PROTECTION_FLAG_INSTANT, android.content.pm.PermissionInfo.PROTECTION_FLAG_RUNTIME_ONLY}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface PermissionInfoCompat.ProtectionFlags {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class ShareTargetCompat {
    ctor ShareTargetCompat(androidx.core.content.pm.ShareTargetCompat.TargetData[]!, String!, String[]!);
    field final String[]! mCategories;
    field final String! mTargetClass;
    field final androidx.core.content.pm.ShareTargetCompat.TargetData[]! mTargetData;
  }

  static class ShareTargetCompat.TargetData {
    ctor ShareTargetCompat.TargetData(String!, String!, String!, String!, String!, String!, String!);
    field final String! mHost;
    field final String! mMimeType;
    field final String! mPath;
    field final String! mPathPattern;
    field final String! mPathPrefix;
    field final String! mPort;
    field final String! mScheme;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class ShareTargetXmlParser {
    ctor private ShareTargetXmlParser();
    method private static String! getAttributeValue(android.content.res.XmlResourceParser!, String!);
    method @WorkerThread static java.util.ArrayList<androidx.core.content.pm.ShareTargetCompat>! getShareTargets(android.content.Context!);
    method private static android.content.res.XmlResourceParser! getXmlResourceParser(android.content.Context!);
    method private static androidx.core.content.pm.ShareTargetCompat! parseShareTarget(android.content.res.XmlResourceParser!) throws java.lang.Exception;
    method private static java.util.ArrayList<androidx.core.content.pm.ShareTargetCompat>! parseShareTargets(android.content.Context!);
    method private static androidx.core.content.pm.ShareTargetCompat.TargetData! parseTargetData(android.content.res.XmlResourceParser!);
    field private static final String ATTR_HOST = "host";
    field private static final String ATTR_MIME_TYPE = "mimeType";
    field private static final String ATTR_NAME = "name";
    field private static final String ATTR_PATH = "path";
    field private static final String ATTR_PATH_PATTERN = "pathPattern";
    field private static final String ATTR_PATH_PREFIX = "pathPrefix";
    field private static final String ATTR_PORT = "port";
    field private static final String ATTR_SCHEME = "scheme";
    field private static final String ATTR_TARGET_CLASS = "targetClass";
    field static final String TAG = "ShareTargetXmlParser";
    field private static final String TAG_CATEGORY = "category";
    field private static final String TAG_DATA = "data";
    field private static final String TAG_SHARE_TARGET = "share-target";
    field private static java.util.ArrayList<androidx.core.content.pm.ShareTargetCompat>! sShareTargets;
  }

  public class ShortcutInfoCompat {
    ctor ShortcutInfoCompat();
    method android.content.Intent! addToIntent(android.content.Intent!);
    method @RequiresApi(22) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) private android.os.PersistableBundle! buildExtrasBundle();
    method @RequiresApi(25) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @VisibleForTesting static boolean getLongLivedFromExtra(android.os.PersistableBundle);
    method @RequiresApi(25) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @VisibleForTesting static androidx.core.app.Person[]? getPersonsFromExtra(android.os.PersistableBundle);
    field private static final String EXTRA_LONG_LIVED = "extraLongLived";
    field private static final String EXTRA_PERSON_ = "extraPerson_";
    field private static final String EXTRA_PERSON_COUNT = "extraPersonCount";
    field android.content.ComponentName! mActivity;
    field java.util.Set<java.lang.String>! mCategories;
    field android.content.Context! mContext;
    field CharSequence! mDisabledMessage;
    field androidx.core.graphics.drawable.IconCompat! mIcon;
    field String! mId;
    field android.content.Intent[]! mIntents;
    field boolean mIsAlwaysBadged;
    field boolean mIsLongLived;
    field CharSequence! mLabel;
    field CharSequence! mLongLabel;
    field androidx.core.app.Person[]! mPersons;
  }

  public static class ShortcutInfoCompat.Builder {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public ShortcutInfoCompat.Builder(androidx.core.content.pm.ShortcutInfoCompat);
    field private final androidx.core.content.pm.ShortcutInfoCompat! mInfo;
  }

  @RequiresApi(19) class ShortcutInfoCompatSaver {
    ctor @AnyThread ShortcutInfoCompatSaver(android.content.Context!, java.util.concurrent.ExecutorService!, java.util.concurrent.ExecutorService!);
    method com.google.common.util.concurrent.ListenableFuture<java.lang.Void>! addShortcuts(java.util.List<androidx.core.content.pm.ShortcutInfoCompat>!);
    method androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer! containerFrom(androidx.core.content.pm.ShortcutInfoCompat!);
    method @AnyThread static java.util.concurrent.ExecutorService! createExecutorService();
    method void deleteDanglingBitmaps(java.util.List<androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer>!);
    method static boolean ensureDir(java.io.File!);
    method @AnyThread static androidx.core.content.pm.ShortcutInfoCompatSaver! getInstance(android.content.Context!);
    method @WorkerThread androidx.core.graphics.drawable.IconCompat! getShortcutIcon(String!) throws java.lang.Exception;
    method @WorkerThread java.util.List<androidx.core.content.pm.ShortcutInfoCompat>! getShortcuts() throws java.lang.Exception;
    method @AnyThread com.google.common.util.concurrent.ListenableFuture<java.lang.Void>! removeAllShortcuts();
    method @AnyThread com.google.common.util.concurrent.ListenableFuture<java.lang.Void>! removeShortcuts(java.util.List<java.lang.String>!);
    method @WorkerThread void saveBitmap(android.graphics.Bitmap!, String!);
    method com.google.common.util.concurrent.ListenableFuture<java.lang.Void>! scheduleBitmapSaving(android.graphics.Bitmap!, String!);
    method void scheduleSyncCurrentState(androidx.concurrent.futures.ResolvableFuture<java.lang.Void>!);
    method private com.google.common.util.concurrent.ListenableFuture<java.lang.Void>! submitDiskOperation(Runnable!);
    field private static final String DIRECTORY_BITMAPS = "ShortcutInfoCompatSaver_share_targets_bitmaps";
    field private static final String DIRECTORY_TARGETS = "ShortcutInfoCompatSaver_share_targets";
    field private static final int EXECUTOR_KEEP_ALIVE_TIME_SECS = 20; // 0x14
    field private static final String FILENAME_XML = "targets.xml";
    field private static final Object! GET_INSTANCE_LOCK;
    field static final String TAG = "ShortcutInfoCompatSaver";
    field final java.io.File! mBitmapsDir;
    field final java.util.concurrent.ExecutorService! mCacheUpdateService;
    field final android.content.Context! mContext;
    field private final java.util.concurrent.ExecutorService! mDiskIoService;
    field final java.util.Map<java.lang.String,com.google.common.util.concurrent.ListenableFuture<?>>! mScheduledBitmapTasks;
    field final java.util.Map<java.lang.String,androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer>! mShortcutsMap;
    field final java.io.File! mTargetsXmlFile;
    field private static volatile androidx.core.content.pm.ShortcutInfoCompatSaver! sINSTANCE;
  }

  public class ShortcutManagerCompat {
    ctor private ShortcutManagerCompat();
    field @VisibleForTesting static final String ACTION_INSTALL_SHORTCUT = "com.android.launcher.action.INSTALL_SHORTCUT";
    field @VisibleForTesting static final String INSTALL_SHORTCUT_PERMISSION = "com.android.launcher.permission.INSTALL_SHORTCUT";
  }

  class ShortcutsInfoSerialization {
    ctor private ShortcutsInfoSerialization();
    method @WorkerThread private static String! getAttributeValue(org.xmlpull.v1.XmlPullParser!, String!);
    method @WorkerThread static java.util.Map<java.lang.String,androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer>! loadFromXml(java.io.File!, android.content.Context!);
    method @WorkerThread private static android.content.ComponentName! parseComponentName(org.xmlpull.v1.XmlPullParser!);
    method @WorkerThread private static android.content.Intent! parseIntent(org.xmlpull.v1.XmlPullParser!);
    method @WorkerThread private static androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer! parseShortcutContainer(org.xmlpull.v1.XmlPullParser!, android.content.Context!) throws java.lang.Exception;
    method static void saveAsXml(java.util.List<androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer>!, java.io.File!);
    method @WorkerThread private static void serializeAttribute(org.xmlpull.v1.XmlSerializer!, String!, String!) throws java.io.IOException;
    method @WorkerThread private static void serializeCategory(org.xmlpull.v1.XmlSerializer!, String!) throws java.io.IOException;
    method @WorkerThread private static void serializeIntent(org.xmlpull.v1.XmlSerializer!, android.content.Intent!) throws java.io.IOException;
    method @WorkerThread private static void serializeShortcutContainer(org.xmlpull.v1.XmlSerializer!, androidx.core.content.pm.ShortcutsInfoSerialization.ShortcutContainer!) throws java.io.IOException;
    field private static final String ATTR_ACTION = "action";
    field private static final String ATTR_COMPONENT = "component";
    field private static final String ATTR_DISABLED_MSG = "disabled_message";
    field private static final String ATTR_ICON_BMP_PATH = "icon_bitmap_path";
    field private static final String ATTR_ICON_RES_NAME = "icon_resource_name";
    field private static final String ATTR_ID = "id";
    field private static final String ATTR_LONG_LABEL = "long_label";
    field private static final String ATTR_NAME = "name";
    field private static final String ATTR_SHORT_LABEL = "short_label";
    field private static final String ATTR_TARGET_CLASS = "targetClass";
    field private static final String ATTR_TARGET_PACKAGE = "targetPackage";
    field private static final String TAG = "ShortcutInfoCompatSaver";
    field private static final String TAG_CATEGORY = "categories";
    field private static final String TAG_INTENT = "intent";
    field private static final String TAG_ROOT = "share_targets";
    field private static final String TAG_TARGET = "target";
  }

  static class ShortcutsInfoSerialization.ShortcutContainer {
    ctor @AnyThread ShortcutsInfoSerialization.ShortcutContainer(androidx.core.content.pm.ShortcutInfoCompat!, String!, String!);
    field final String! mBitmapPath;
    field final String! mResourceName;
    field final androidx.core.content.pm.ShortcutInfoCompat! mShortcutInfo;
  }

}

package androidx.core.content.res {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class ColorStateListInflaterCompat {
    ctor private ColorStateListInflaterCompat();
    method public static android.content.res.ColorStateList createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method public static android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method public static android.content.res.ColorStateList? inflate(android.content.res.Resources, @XmlRes int, android.content.res.Resources.Theme?);
    method private static android.content.res.ColorStateList! inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method @ColorInt private static int modulateColorAlpha(@ColorInt int, @FloatRange(from=0.0f, to=1.0f) float);
    method private static android.content.res.TypedArray! obtainAttributes(android.content.res.Resources!, android.content.res.Resources.Theme!, android.util.AttributeSet!, int[]!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class ComplexColorCompat {
    ctor private ComplexColorCompat(android.graphics.Shader!, android.content.res.ColorStateList!, @ColorInt int);
    method private static androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources, @ColorRes int, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method static androidx.core.content.res.ComplexColorCompat! from(android.graphics.Shader);
    method static androidx.core.content.res.ComplexColorCompat! from(android.content.res.ColorStateList);
    method static androidx.core.content.res.ComplexColorCompat! from(@ColorInt int);
    method @ColorInt public int getColor();
    method public android.graphics.Shader? getShader();
    method public static androidx.core.content.res.ComplexColorCompat? inflate(android.content.res.Resources, @ColorRes int, android.content.res.Resources.Theme?);
    method public boolean isGradient();
    method public boolean isStateful();
    method public boolean onStateChanged(int[]!);
    method public void setColor(@ColorInt int);
    method public boolean willDraw();
    field private static final String LOG_TAG = "ComplexColorCompat";
    field private int mColor;
    field private final android.content.res.ColorStateList! mColorStateList;
    field private final android.graphics.Shader! mShader;
  }

  public final class ConfigurationHelper {
    ctor private ConfigurationHelper();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class FontResourcesParserCompat {
    ctor private FontResourcesParserCompat();
    method private static int getType(android.content.res.TypedArray!, int);
    method public static androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry? parse(org.xmlpull.v1.XmlPullParser!, android.content.res.Resources!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method public static java.util.List<java.util.List<byte[]>>! readCerts(android.content.res.Resources!, @ArrayRes int);
    method private static androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry? readFamilies(org.xmlpull.v1.XmlPullParser!, android.content.res.Resources!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry? readFamily(org.xmlpull.v1.XmlPullParser!, android.content.res.Resources!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static androidx.core.content.res.FontResourcesParserCompat.FontFileResourceEntry! readFont(org.xmlpull.v1.XmlPullParser!, android.content.res.Resources!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static void skip(org.xmlpull.v1.XmlPullParser!) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static java.util.List<byte[]>! toByteArrayList(String[]!);
    field private static final int DEFAULT_TIMEOUT_MILLIS = 500; // 0x1f4
    field public static final int FETCH_STRATEGY_ASYNC = 1; // 0x1
    field public static final int FETCH_STRATEGY_BLOCKING = 0; // 0x0
    field public static final int INFINITE_TIMEOUT_VALUE = -1; // 0xffffffff
    field private static final int ITALIC = 1; // 0x1
    field private static final int NORMAL_WEIGHT = 400; // 0x190
  }

  public static interface FontResourcesParserCompat.FamilyResourceEntry {
  }

  @IntDef({androidx.core.content.res.FontResourcesParserCompat.FETCH_STRATEGY_BLOCKING, androidx.core.content.res.FontResourcesParserCompat.FETCH_STRATEGY_ASYNC}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface FontResourcesParserCompat.FetchStrategy {
  }

  public static final class FontResourcesParserCompat.FontFamilyFilesResourceEntry implements androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry {
    ctor public FontResourcesParserCompat.FontFamilyFilesResourceEntry(androidx.core.content.res.FontResourcesParserCompat.FontFileResourceEntry[]);
    method public androidx.core.content.res.FontResourcesParserCompat.FontFileResourceEntry[] getEntries();
    field private final androidx.core.content.res.FontResourcesParserCompat.FontFileResourceEntry[] mEntries;
  }

  public static final class FontResourcesParserCompat.FontFileResourceEntry {
    ctor public FontResourcesParserCompat.FontFileResourceEntry(String, int, boolean, String?, int, int);
    method public String getFileName();
    method public int getResourceId();
    method public int getTtcIndex();
    method public String? getVariationSettings();
    method public int getWeight();
    method public boolean isItalic();
    field private final String mFileName;
    field private boolean mItalic;
    field private int mResourceId;
    field private int mTtcIndex;
    field private String! mVariationSettings;
    field private int mWeight;
  }

  public static final class FontResourcesParserCompat.ProviderResourceEntry implements androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry {
    ctor public FontResourcesParserCompat.ProviderResourceEntry(androidx.core.provider.FontRequest, int, int);
    method public int getFetchStrategy();
    method public androidx.core.provider.FontRequest getRequest();
    method public int getTimeout();
    field private final androidx.core.provider.FontRequest mRequest;
    field private final int mStrategy;
    field private final int mTimeoutMs;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) final class GradientColorInflaterCompat {
    ctor private GradientColorInflaterCompat();
    method private static androidx.core.content.res.GradientColorInflaterCompat.ColorStops! checkColors(androidx.core.content.res.GradientColorInflaterCompat.ColorStops?, @ColorInt int, @ColorInt int, boolean, @ColorInt int);
    method static android.graphics.Shader! createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method static android.graphics.Shader! createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static androidx.core.content.res.GradientColorInflaterCompat.ColorStops! inflateChildElements(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources.Theme?) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method private static android.graphics.Shader.TileMode! parseTileMode(int);
    field private static final int TILE_MODE_CLAMP = 0; // 0x0
    field private static final int TILE_MODE_MIRROR = 2; // 0x2
    field private static final int TILE_MODE_REPEAT = 1; // 0x1
  }

  static final class GradientColorInflaterCompat.ColorStops {
    ctor GradientColorInflaterCompat.ColorStops(java.util.List<java.lang.Integer>, java.util.List<java.lang.Float>);
    ctor GradientColorInflaterCompat.ColorStops(@ColorInt int, @ColorInt int);
    ctor GradientColorInflaterCompat.ColorStops(@ColorInt int, @ColorInt int, @ColorInt int);
    field final int[]! mColors;
    field final float[]! mOffsets;
  }

  @IntDef({androidx.core.content.res.GradientColorInflaterCompat.TILE_MODE_CLAMP, androidx.core.content.res.GradientColorInflaterCompat.TILE_MODE_REPEAT, androidx.core.content.res.GradientColorInflaterCompat.TILE_MODE_MIRROR}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface GradientColorInflaterCompat.GradientTileMode {
  }

  final class GrowingArrayUtils {
    ctor private GrowingArrayUtils();
    method public static <T> T[]! append(T[]!, int, T!);
    method public static int[]! append(int[]!, int, int);
    method public static long[]! append(long[]!, int, long);
    method public static boolean[]! append(boolean[]!, int, boolean);
    method public static int growSize(int);
    method public static <T> T[]! insert(T[]!, int, int, T!);
    method public static int[]! insert(int[]!, int, int, int);
    method public static long[]! insert(long[]!, int, int, long);
    method public static boolean[]! insert(boolean[]!, int, int, boolean);
  }

  public final class ResourcesCompat {
    ctor private ResourcesCompat();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.graphics.Typeface! getFont(android.content.Context, @FontRes int, android.util.TypedValue!, int, androidx.core.content.res.ResourcesCompat.FontCallback?) throws android.content.res.Resources.NotFoundException;
    method private static android.graphics.Typeface! loadFont(android.content.Context, int, android.util.TypedValue!, int, androidx.core.content.res.ResourcesCompat.FontCallback?, android.os.Handler?, boolean);
    method private static android.graphics.Typeface! loadFont(android.content.Context, android.content.res.Resources!, android.util.TypedValue!, int, int, androidx.core.content.res.ResourcesCompat.FontCallback?, android.os.Handler?, boolean);
    field private static final String TAG = "ResourcesCompat";
  }

  public abstract static class ResourcesCompat.FontCallback {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final void callbackFailAsync(int, android.os.Handler?);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final void callbackSuccessAsync(android.graphics.Typeface!, android.os.Handler?);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TypedArrayUtils {
    ctor private TypedArrayUtils();
    method public static int getAttr(android.content.Context, int, int);
    method public static boolean getBoolean(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int, boolean);
    method public static android.graphics.drawable.Drawable? getDrawable(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int);
    method public static int getInt(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int, int);
    method public static boolean getNamedBoolean(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int, boolean);
    method @ColorInt public static int getNamedColor(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int, @ColorInt int);
    method public static android.content.res.ColorStateList? getNamedColorStateList(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, android.content.res.Resources.Theme?, String, @StyleableRes int);
    method private static android.content.res.ColorStateList getNamedColorStateListFromInt(android.util.TypedValue);
    method public static androidx.core.content.res.ComplexColorCompat! getNamedComplexColor(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, android.content.res.Resources.Theme?, String, @StyleableRes int, @ColorInt int);
    method public static float getNamedFloat(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int, float);
    method public static int getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int, int);
    method @AnyRes public static int getNamedResourceId(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int, @AnyRes int);
    method public static String? getNamedString(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, @StyleableRes int);
    method @AnyRes public static int getResourceId(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int, @AnyRes int);
    method public static String? getString(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int);
    method public static CharSequence? getText(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int);
    method public static CharSequence[]? getTextArray(android.content.res.TypedArray, @StyleableRes int, @StyleableRes int);
    method public static boolean hasAttribute(org.xmlpull.v1.XmlPullParser, String);
    method public static android.content.res.TypedArray obtainAttributes(android.content.res.Resources, android.content.res.Resources.Theme?, android.util.AttributeSet, int[]);
    method public static android.util.TypedValue? peekNamedValue(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, String, int);
    field private static final String NAMESPACE = "http://schemas.android.com/apk/res/android";
  }

}

package androidx.core.database {

  public final class CursorWindowCompat {
    ctor private CursorWindowCompat();
  }

  @Deprecated public final class DatabaseUtilsCompat {
    ctor private DatabaseUtilsCompat();
  }

}

package androidx.core.database.sqlite {

  public final class SQLiteCursorCompat {
    ctor private SQLiteCursorCompat();
  }

}

package androidx.core.graphics {

  public final class BitmapCompat {
    ctor private BitmapCompat();
  }

  public final class ColorUtils {
    ctor private ColorUtils();
    method @VisibleForTesting static float circularInterpolate(float, float, float);
    method private static int compositeAlpha(int, int);
    method private static int compositeComponent(int, int, int, int, int);
    method private static float constrain(float, float, float);
    method private static int constrain(int, int, int);
    method private static double[]! getTempDouble3Array();
    method private static double pivotXyzComponent(double);
    field private static final int MIN_ALPHA_SEARCH_MAX_ITERATIONS = 10; // 0xa
    field private static final int MIN_ALPHA_SEARCH_PRECISION = 1; // 0x1
    field private static final ThreadLocal<double[]>! TEMP_ARRAY;
    field private static final double XYZ_EPSILON = 0.008856;
    field private static final double XYZ_KAPPA = 903.3;
    field private static final double XYZ_WHITE_REFERENCE_X = 95.047;
    field private static final double XYZ_WHITE_REFERENCE_Y = 100.0;
    field private static final double XYZ_WHITE_REFERENCE_Z = 108.883;
  }

  public final class PaintCompat {
    ctor private PaintCompat();
    method private static androidx.core.util.Pair<android.graphics.Rect,android.graphics.Rect>! obtainEmptyRects();
    field private static final String EM_STRING = "m";
    field private static final String TOFU_STRING = "\udb3f\udffd";
    field private static final ThreadLocal<androidx.core.util.Pair<android.graphics.Rect,android.graphics.Rect>>! sRectThreadLocal;
  }

  public class PathParser {
    ctor private PathParser();
    method private static void addNode(java.util.ArrayList<androidx.core.graphics.PathParser.PathDataNode>!, char, float[]!);
    method public static boolean canMorph(androidx.core.graphics.PathParser.PathDataNode[]?, androidx.core.graphics.PathParser.PathDataNode[]?);
    method static float[]! copyOfRange(float[]!, int, int);
    method public static androidx.core.graphics.PathParser.PathDataNode[]! createNodesFromPathData(String!);
    method public static android.graphics.Path! createPathFromPathData(String!);
    method public static androidx.core.graphics.PathParser.PathDataNode[]! deepCopyNodes(androidx.core.graphics.PathParser.PathDataNode[]!);
    method private static void extract(String!, int, androidx.core.graphics.PathParser.ExtractFloatResult!);
    method private static float[]! getFloats(String!);
    method public static boolean interpolatePathDataNodes(androidx.core.graphics.PathParser.PathDataNode[]!, androidx.core.graphics.PathParser.PathDataNode[]!, androidx.core.graphics.PathParser.PathDataNode[]!, float);
    method private static int nextStart(String!, int);
    method public static void updateNodes(androidx.core.graphics.PathParser.PathDataNode[]!, androidx.core.graphics.PathParser.PathDataNode[]!);
    field private static final String LOGTAG = "PathParser";
  }

  private static class PathParser.ExtractFloatResult {
    ctor PathParser.ExtractFloatResult();
    field int mEndPosition;
    field boolean mEndWithNegOrDot;
  }

  public static class PathParser.PathDataNode {
    ctor PathParser.PathDataNode(char, float[]!);
    ctor PathParser.PathDataNode(androidx.core.graphics.PathParser.PathDataNode!);
    method private static void addCommand(android.graphics.Path!, float[]!, char, char, float[]!);
    method private static void arcToBezier(android.graphics.Path!, double, double, double, double, double, double, double, double, double);
    method private static void drawArc(android.graphics.Path!, float, float, float, float, float, float, float, boolean, boolean);
    method public void interpolatePathDataNode(androidx.core.graphics.PathParser.PathDataNode!, androidx.core.graphics.PathParser.PathDataNode!, float);
    method public static void nodesToPath(androidx.core.graphics.PathParser.PathDataNode[]!, android.graphics.Path!);
    field public float[]! mParams;
    field public char mType;
  }

  public final class PathSegment {
    field private final android.graphics.PointF! mEnd;
    field private final float mEndFraction;
    field private final android.graphics.PointF! mStart;
    field private final float mStartFraction;
  }

  public final class PathUtils {
    ctor private PathUtils();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TypefaceCompat {
    ctor private TypefaceCompat();
    method public static android.graphics.Typeface? createFromFontInfo(android.content.Context, android.os.CancellationSignal?, androidx.core.provider.FontsContractCompat.FontInfo[], int);
    method public static android.graphics.Typeface? createFromResourcesFamilyXml(android.content.Context, androidx.core.content.res.FontResourcesParserCompat.FamilyResourceEntry, android.content.res.Resources, int, int, androidx.core.content.res.ResourcesCompat.FontCallback?, android.os.Handler?, boolean);
    method public static android.graphics.Typeface? createFromResourcesFontFile(android.content.Context, android.content.res.Resources, int, String!, int);
    method private static String! createResourceUid(android.content.res.Resources!, int, int);
    method public static android.graphics.Typeface? findFromCache(android.content.res.Resources, int, int);
    field private static final androidx.collection.LruCache<java.lang.String,android.graphics.Typeface>! sTypefaceCache;
    field private static final androidx.core.graphics.TypefaceCompatBaseImpl! sTypefaceCompatImpl;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(21) class TypefaceCompatApi21Impl extends androidx.core.graphics.TypefaceCompatBaseImpl {
    ctor TypefaceCompatApi21Impl();
    method public android.graphics.Typeface! createFromFontInfo(android.content.Context!, android.os.CancellationSignal!, androidx.core.provider.FontsContractCompat.FontInfo[], int);
    method private java.io.File! getFile(android.os.ParcelFileDescriptor);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(24) class TypefaceCompatApi24Impl extends androidx.core.graphics.TypefaceCompatBaseImpl {
    ctor TypefaceCompatApi24Impl();
    method private static boolean addFontWeightStyle(Object!, java.nio.ByteBuffer!, int, int, boolean);
    method private static android.graphics.Typeface! createFromFamiliesWithDefault(Object!);
    method public android.graphics.Typeface! createFromFontFamilyFilesResourceEntry(android.content.Context!, androidx.core.content.res.FontResourcesParserCompat.FontFamilyFilesResourceEntry!, android.content.res.Resources!, int);
    method public android.graphics.Typeface! createFromFontInfo(android.content.Context!, android.os.CancellationSignal?, androidx.core.provider.FontsContractCompat.FontInfo[], int);
    method public static boolean isUsable();
    method private static Object! newFamily();
    field private static final String ADD_FONT_WEIGHT_STYLE_METHOD = "addFontWeightStyle";
    field private static final String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD = "createFromFamiliesWithDefault";
    field private static final String FONT_FAMILY_CLASS = "android.graphics.FontFamily";
    field private static final String TAG = "TypefaceCompatApi24Impl";
    field private static final java.lang.reflect.Method! sAddFontWeightStyle;
    field private static final java.lang.reflect.Method! sCreateFromFamiliesWithDefault;
    field private static final Class! sFontFamily;
    field private static final java.lang.reflect.Constructor! sFontFamilyCtor;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(26) public class TypefaceCompatApi26Impl extends androidx.core.graphics.TypefaceCompatApi21Impl {
    ctor public TypefaceCompatApi26Impl();
    method private void abortCreation(Object!);
    method private boolean addFontFromAssetManager(android.content.Context!, Object!, String!, int, int, int, android.graphics.fonts.FontVariationAxis[]?);
    method private boolean addFontFromBuffer(Object!, java.nio.ByteBuffer!, int, int, int);
    method protected android.graphics.Typeface! createFromFamiliesWithDefault(Object!);
    method public android.graphics.Typeface! createFromFontFamilyFilesResourceEntry(android.content.Context!, androidx.core.content.res.FontResourcesParserCompat.FontFamilyFilesResourceEntry!, android.content.res.Resources!, int);
    method public android.graphics.Typeface! createFromFontInfo(android.content.Context!, android.os.CancellationSignal?, androidx.core.provider.FontsContractCompat.FontInfo[], int);
    method public android.graphics.Typeface? createFromResourcesFontFile(android.content.Context!, android.content.res.Resources!, int, String!, int);
    method private boolean freeze(Object!);
    method private boolean isFontFamilyPrivateAPIAvailable();
    method private Object! newFamily();
    method protected java.lang.reflect.Method! obtainAbortCreationMethod(Class!) throws java.lang.NoSuchMethodException;
    method protected java.lang.reflect.Method! obtainAddFontFromAssetManagerMethod(Class!) throws java.lang.NoSuchMethodException;
    method protected java.lang.reflect.Method! obtainAddFontFromBufferMethod(Class!) throws java.lang.NoSuchMethodException;
    method protected java.lang.reflect.Method! obtainCreateFromFamiliesWithDefaultMethod(Class!) throws java.lang.NoSuchMethodException;
    method protected Class! obtainFontFamily() throws java.lang.ClassNotFoundException;
    method protected java.lang.reflect.Constructor! obtainFontFamilyCtor(Class!) throws java.lang.NoSuchMethodException;
    method protected java.lang.reflect.Method! obtainFreezeMethod(Class!) throws java.lang.NoSuchMethodException;
    field private static final String ABORT_CREATION_METHOD = "abortCreation";
    field private static final String ADD_FONT_FROM_ASSET_MANAGER_METHOD = "addFontFromAssetManager";
    field private static final String ADD_FONT_FROM_BUFFER_METHOD = "addFontFromBuffer";
    field private static final String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD = "createFromFamiliesWithDefault";
    field private static final String FONT_FAMILY_CLASS = "android.graphics.FontFamily";
    field private static final String FREEZE_METHOD = "freeze";
    field private static final int RESOLVE_BY_FONT_TABLE = -1; // 0xffffffff
    field private static final String TAG = "TypefaceCompatApi26Impl";
    field protected final java.lang.reflect.Method! mAbortCreation;
    field protected final java.lang.reflect.Method! mAddFontFromAssetManager;
    field protected final java.lang.reflect.Method! mAddFontFromBuffer;
    field protected final java.lang.reflect.Method! mCreateFromFamiliesWithDefault;
    field protected final Class! mFontFamily;
    field protected final java.lang.reflect.Constructor! mFontFamilyCtor;
    field protected final java.lang.reflect.Method! mFreeze;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(28) public class TypefaceCompatApi28Impl extends androidx.core.graphics.TypefaceCompatApi26Impl {
    ctor public TypefaceCompatApi28Impl();
    method protected android.graphics.Typeface! createFromFamiliesWithDefault(Object!);
    method protected java.lang.reflect.Method! obtainCreateFromFamiliesWithDefaultMethod(Class!) throws java.lang.NoSuchMethodException;
    field private static final String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD = "createFromFamiliesWithDefault";
    field private static final String DEFAULT_FAMILY = "sans-serif";
    field private static final int RESOLVE_BY_FONT_TABLE = -1; // 0xffffffff
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class TypefaceCompatBaseImpl {
    ctor TypefaceCompatBaseImpl();
    method public android.graphics.Typeface? createFromFontFamilyFilesResourceEntry(android.content.Context!, androidx.core.content.res.FontResourcesParserCompat.FontFamilyFilesResourceEntry!, android.content.res.Resources!, int);
    method public android.graphics.Typeface! createFromFontInfo(android.content.Context!, android.os.CancellationSignal?, androidx.core.provider.FontsContractCompat.FontInfo[], int);
    method protected android.graphics.Typeface! createFromInputStream(android.content.Context!, java.io.InputStream!);
    method public android.graphics.Typeface? createFromResourcesFontFile(android.content.Context!, android.content.res.Resources!, int, String!, int);
    method private androidx.core.content.res.FontResourcesParserCompat.FontFileResourceEntry! findBestEntry(androidx.core.content.res.FontResourcesParserCompat.FontFamilyFilesResourceEntry!, int);
    method private static <T> T! findBestFont(T[]!, int, androidx.core.graphics.TypefaceCompatBaseImpl.StyleExtractor<T>!);
    method protected androidx.core.provider.FontsContractCompat.FontInfo! findBestInfo(androidx.core.provider.FontsContractCompat.FontInfo[]!, int);
  }

  private static interface TypefaceCompatBaseImpl.StyleExtractor<T> {
    method public int getWeight(T!);
    method public boolean isItalic(T!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class TypefaceCompatUtil {
    ctor private TypefaceCompatUtil();
    method public static void closeQuietly(java.io.Closeable!);
    method @RequiresApi(19) public static java.nio.ByteBuffer? copyToDirectBuffer(android.content.Context!, android.content.res.Resources!, int);
    method public static boolean copyToFile(java.io.File!, java.io.InputStream!);
    method public static boolean copyToFile(java.io.File!, android.content.res.Resources!, int);
    method public static java.io.File? getTempFile(android.content.Context!);
    method @RequiresApi(19) private static java.nio.ByteBuffer? mmap(java.io.File!);
    method @RequiresApi(19) public static java.nio.ByteBuffer? mmap(android.content.Context!, android.os.CancellationSignal!, android.net.Uri!);
    field private static final String CACHE_FILE_PREFIX = ".font";
    field private static final String TAG = "TypefaceCompatUtil";
  }

}

package androidx.core.graphics.drawable {

  public final class DrawableCompat {
    ctor private DrawableCompat();
    field private static final String TAG = "DrawableCompat";
    field private static java.lang.reflect.Method! sGetLayoutDirectionMethod;
    field private static boolean sGetLayoutDirectionMethodFetched;
    field private static java.lang.reflect.Method! sSetLayoutDirectionMethod;
    field private static boolean sSetLayoutDirectionMethodFetched;
  }

  public class IconCompat extends androidx.versionedparcelable.CustomVersionedParcelable {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public IconCompat();
    ctor private IconCompat(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addToShortcutIntent(android.content.Intent, android.graphics.drawable.Drawable?, android.content.Context);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void checkResource(android.content.Context!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(23) public static androidx.core.graphics.drawable.IconCompat? createFromIcon(android.graphics.drawable.Icon);
    method @VisibleForTesting static android.graphics.Bitmap! createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap!, boolean);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public static androidx.core.graphics.drawable.IconCompat! createWithResource(android.content.res.Resources!, String!, @DrawableRes int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public android.graphics.Bitmap? getBitmap();
    method @IdRes @RequiresApi(23) @DrawableRes private static int getResId(android.graphics.drawable.Icon);
    method @RequiresApi(23) private static String? getResPackage(android.graphics.drawable.Icon);
    method private static android.content.res.Resources! getResources(android.content.Context!, String!);
    method @RequiresApi(23) private static int getType(android.graphics.drawable.Icon);
    method @RequiresApi(23) private static android.net.Uri? getUri(android.graphics.drawable.Icon);
    method private android.graphics.drawable.Drawable! loadDrawableInner(android.content.Context!);
    method private static String! typeToString(int);
    field private static final float ADAPTIVE_ICON_INSET_FACTOR = 0.25f;
    field private static final int AMBIENT_SHADOW_ALPHA = 30; // 0x1e
    field private static final float BLUR_FACTOR = 0.010416667f;
    field static final android.graphics.PorterDuff.Mode! DEFAULT_TINT_MODE;
    field private static final float DEFAULT_VIEW_PORT_SCALE = 0.6666667f;
    field private static final String EXTRA_INT1 = "int1";
    field private static final String EXTRA_INT2 = "int2";
    field private static final String EXTRA_OBJ = "obj";
    field private static final String EXTRA_TINT_LIST = "tint_list";
    field private static final String EXTRA_TINT_MODE = "tint_mode";
    field private static final String EXTRA_TYPE = "type";
    field private static final float ICON_DIAMETER_FACTOR = 0.9166667f;
    field private static final int KEY_SHADOW_ALPHA = 61; // 0x3d
    field private static final float KEY_SHADOW_OFFSET_FACTOR = 0.020833334f;
    field private static final String TAG = "IconCompat";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public byte[]! mData;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public int mInt1;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public int mInt2;
    field Object! mObj1;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public android.os.Parcelable! mParcelable;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public android.content.res.ColorStateList! mTintList;
    field android.graphics.PorterDuff.Mode! mTintMode;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public String! mTintModeStr;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public int mType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) @IntDef({androidx.core.graphics.drawable.IconCompat.TYPE_UNKNOWN, android.graphics.drawable.Icon.TYPE_BITMAP, android.graphics.drawable.Icon.TYPE_RESOURCE, android.graphics.drawable.Icon.TYPE_DATA, android.graphics.drawable.Icon.TYPE_URI, android.graphics.drawable.Icon.TYPE_ADAPTIVE_BITMAP}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface IconCompat.IconType {
  }

  public abstract class RoundedBitmapDrawable extends android.graphics.drawable.Drawable {
    ctor RoundedBitmapDrawable(android.content.res.Resources!, android.graphics.Bitmap!);
    method private void computeBitmapSize();
    method void gravityCompatApply(int, int, int, android.graphics.Rect!, android.graphics.Rect!);
    method private static boolean isGreaterThanZero(float);
    method private void updateCircularCornerRadius();
    method void updateDstRect();
    field private static final int DEFAULT_PAINT_FLAGS = 3; // 0x3
    field private boolean mApplyGravity;
    field final android.graphics.Bitmap! mBitmap;
    field private int mBitmapHeight;
    field private final android.graphics.BitmapShader! mBitmapShader;
    field private int mBitmapWidth;
    field private float mCornerRadius;
    field final android.graphics.Rect! mDstRect;
    field private final android.graphics.RectF! mDstRectF;
    field private int mGravity;
    field private boolean mIsCircular;
    field private final android.graphics.Paint! mPaint;
    field private final android.graphics.Matrix! mShaderMatrix;
    field private int mTargetDensity;
  }

  @RequiresApi(21) class RoundedBitmapDrawable21 extends androidx.core.graphics.drawable.RoundedBitmapDrawable {
    ctor protected RoundedBitmapDrawable21(android.content.res.Resources!, android.graphics.Bitmap!);
    method void gravityCompatApply(int, int, int, android.graphics.Rect!, android.graphics.Rect!);
  }

  public final class RoundedBitmapDrawableFactory {
    ctor private RoundedBitmapDrawableFactory();
    field private static final String TAG = "RoundedBitmapDrawableFa";
  }

  private static class RoundedBitmapDrawableFactory.DefaultRoundedBitmapDrawable extends androidx.core.graphics.drawable.RoundedBitmapDrawable {
    ctor RoundedBitmapDrawableFactory.DefaultRoundedBitmapDrawable(android.content.res.Resources!, android.graphics.Bitmap!);
    method void gravityCompatApply(int, int, int, android.graphics.Rect!, android.graphics.Rect!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface TintAwareDrawable {
    method public void setTint(@ColorInt int);
    method public void setTintList(android.content.res.ColorStateList!);
    method public void setTintMode(android.graphics.PorterDuff.Mode!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface WrappedDrawable {
    method public android.graphics.drawable.Drawable! getWrappedDrawable();
    method public void setWrappedDrawable(android.graphics.drawable.Drawable!);
  }

  class WrappedDrawableApi14 extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback androidx.core.graphics.drawable.TintAwareDrawable androidx.core.graphics.drawable.WrappedDrawable {
    ctor WrappedDrawableApi14(androidx.core.graphics.drawable.WrappedDrawableState, android.content.res.Resources?);
    ctor WrappedDrawableApi14(android.graphics.drawable.Drawable?);
    method public final android.graphics.drawable.Drawable! getWrappedDrawable();
    method protected boolean isCompatTintEnabled();
    method private androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState();
    method public final void setWrappedDrawable(android.graphics.drawable.Drawable!);
    method private void updateLocalState(android.content.res.Resources?);
    method private boolean updateTint(int[]!);
    field static final android.graphics.PorterDuff.Mode! DEFAULT_TINT_MODE;
    field private boolean mColorFilterSet;
    field private int mCurrentColor;
    field private android.graphics.PorterDuff.Mode! mCurrentMode;
    field android.graphics.drawable.Drawable! mDrawable;
    field private boolean mMutated;
    field androidx.core.graphics.drawable.WrappedDrawableState! mState;
  }

  @RequiresApi(21) class WrappedDrawableApi21 extends androidx.core.graphics.drawable.WrappedDrawableApi14 {
    ctor WrappedDrawableApi21(android.graphics.drawable.Drawable!);
    ctor WrappedDrawableApi21(androidx.core.graphics.drawable.WrappedDrawableState!, android.content.res.Resources!);
    method private void findAndCacheIsProjectedDrawableMethod();
    method protected boolean isCompatTintEnabled();
    method public boolean isProjected();
    field private static final String TAG = "WrappedDrawableApi21";
    field private static java.lang.reflect.Method! sIsProjectedDrawableMethod;
  }

  final class WrappedDrawableState extends android.graphics.drawable.Drawable.ConstantState {
    ctor WrappedDrawableState(androidx.core.graphics.drawable.WrappedDrawableState?);
    method boolean canConstantState();
    field int mChangingConfigurations;
    field android.graphics.drawable.Drawable.ConstantState! mDrawableState;
    field android.content.res.ColorStateList! mTint;
    field android.graphics.PorterDuff.Mode! mTintMode;
  }

}

package androidx.core.hardware.display {

  public final class DisplayManagerCompat {
    ctor private DisplayManagerCompat(android.content.Context!);
    field private final android.content.Context! mContext;
    field private static final java.util.WeakHashMap<android.content.Context,androidx.core.hardware.display.DisplayManagerCompat>! sInstances;
  }

}

package androidx.core.hardware.fingerprint {

  @Deprecated public final class FingerprintManagerCompat {
    ctor private FingerprintManagerCompat(android.content.Context!);
    method @RequiresApi(23) private static android.hardware.fingerprint.FingerprintManager? getFingerprintManagerOrNull(android.content.Context);
    method @RequiresApi(23) static androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject! unwrapCryptoObject(android.hardware.fingerprint.FingerprintManager.CryptoObject!);
    method @RequiresApi(23) private static android.hardware.fingerprint.FingerprintManager.AuthenticationCallback! wrapCallback(androidx.core.hardware.fingerprint.FingerprintManagerCompat.AuthenticationCallback!);
    method @RequiresApi(23) private static android.hardware.fingerprint.FingerprintManager.CryptoObject! wrapCryptoObject(androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject!);
    field private final android.content.Context! mContext;
  }

  @Deprecated public static final class FingerprintManagerCompat.AuthenticationResult {
    field private final androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject! mCryptoObject;
  }

  @Deprecated public static class FingerprintManagerCompat.CryptoObject {
    field private final javax.crypto.Cipher! mCipher;
    field private final javax.crypto.Mac! mMac;
    field private final java.security.Signature! mSignature;
  }

}

package androidx.core.internal.view {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface SupportMenu extends android.view.Menu {
    field public static final int CATEGORY_MASK = -65536; // 0xffff0000
    field public static final int CATEGORY_SHIFT = 16; // 0x10
    field public static final int FLAG_KEEP_OPEN_ON_SUBMENU_OPENED = 4; // 0x4
    field public static final int SUPPORTED_MODIFIERS_MASK = 69647; // 0x1100f
    field public static final int USER_MASK = 65535; // 0xffff
    field public static final int USER_SHIFT = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface SupportMenuItem extends android.view.MenuItem {
    method public androidx.core.view.ActionProvider! getSupportActionProvider();
    method public boolean requiresActionButton();
    method public boolean requiresOverflow();
    method public androidx.core.internal.view.SupportMenuItem! setSupportActionProvider(androidx.core.view.ActionProvider!);
    field public static final int SHOW_AS_ACTION_ALWAYS = 2; // 0x2
    field public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = 8; // 0x8
    field public static final int SHOW_AS_ACTION_IF_ROOM = 1; // 0x1
    field public static final int SHOW_AS_ACTION_NEVER = 0; // 0x0
    field public static final int SHOW_AS_ACTION_WITH_TEXT = 4; // 0x4
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface SupportSubMenu extends androidx.core.internal.view.SupportMenu android.view.SubMenu {
  }

}

package androidx.core.math {

  public class MathUtils {
    ctor private MathUtils();
  }

}

package androidx.core.net {

  public final class ConnectivityManagerCompat {
    ctor private ConnectivityManagerCompat();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef({androidx.core.net.ConnectivityManagerCompat.RESTRICT_BACKGROUND_STATUS_DISABLED, androidx.core.net.ConnectivityManagerCompat.RESTRICT_BACKGROUND_STATUS_WHITELISTED, androidx.core.net.ConnectivityManagerCompat.RESTRICT_BACKGROUND_STATUS_ENABLED}) public static @interface ConnectivityManagerCompat.RestrictBackgroundStatus {
  }

  class DatagramSocketWrapper extends java.net.Socket {
    ctor DatagramSocketWrapper(java.net.DatagramSocket!, java.io.FileDescriptor!) throws java.net.SocketException;
  }

  private static class DatagramSocketWrapper.DatagramSocketImplWrapper extends java.net.SocketImpl {
    ctor DatagramSocketWrapper.DatagramSocketImplWrapper(java.net.DatagramSocket!, java.io.FileDescriptor!);
  }

  public final class TrafficStatsCompat {
    ctor private TrafficStatsCompat();
  }

}

package androidx.core.os {

  public class BuildCompat {
    ctor private BuildCompat();
  }

  public final class CancellationSignal {
    method private void waitForCancelFinishedLocked();
    field private boolean mCancelInProgress;
    field private Object! mCancellationSignalObj;
    field private boolean mIsCanceled;
    field private androidx.core.os.CancellationSignal.OnCancelListener! mOnCancelListener;
  }

  public final class ConfigurationCompat {
    ctor private ConfigurationCompat();
  }

  public final class EnvironmentCompat {
    ctor private EnvironmentCompat();
    field private static final String TAG = "EnvironmentCompat";
  }

  public final class HandlerCompat {
    ctor private HandlerCompat();
    field private static final String TAG = "HandlerCompat";
  }

  public final class LocaleListCompat {
    ctor private LocaleListCompat(androidx.core.os.LocaleListInterface!);
    method static java.util.Locale! forLanguageTagCompat(String!);
    field private androidx.core.os.LocaleListInterface! mImpl;
    field private static final androidx.core.os.LocaleListCompat! sEmptyLocaleList;
  }

  final class LocaleListCompatWrapper implements androidx.core.os.LocaleListInterface {
    ctor LocaleListCompatWrapper(java.util.Locale...);
    method private java.util.Locale! computeFirstMatch(java.util.Collection<java.lang.String>!, boolean);
    method private int computeFirstMatchIndex(java.util.Collection<java.lang.String>!, boolean);
    method private int findFirstMatchIndex(java.util.Locale!);
    method public java.util.Locale! get(int);
    method public java.util.Locale! getFirstMatch(String[]);
    method private static String! getLikelyScript(java.util.Locale!);
    method public Object? getLocaleList();
    method public int indexOf(java.util.Locale!);
    method public boolean isEmpty();
    method private static boolean isPseudoLocale(java.util.Locale!);
    method @IntRange(from=0, to=1) private static int matchScore(java.util.Locale!, java.util.Locale!);
    method public int size();
    method @VisibleForTesting static void toLanguageTag(StringBuilder!, java.util.Locale!);
    method public String! toLanguageTags();
    field private static final java.util.Locale! EN_LATN;
    field private static final java.util.Locale! LOCALE_AR_XB;
    field private static final java.util.Locale! LOCALE_EN_XA;
    field private final java.util.Locale[]! mList;
    field private final String mStringRepresentation;
    field private static final java.util.Locale[]! sEmptyList;
  }

  interface LocaleListInterface {
    method public java.util.Locale! get(int);
    method public java.util.Locale? getFirstMatch(String[]);
    method public Object! getLocaleList();
    method @IntRange(from=0xffffffff) public int indexOf(java.util.Locale!);
    method public boolean isEmpty();
    method @IntRange(from=0) public int size();
    method public String! toLanguageTags();
  }

  @RequiresApi(24) final class LocaleListPlatformWrapper implements androidx.core.os.LocaleListInterface {
    ctor LocaleListPlatformWrapper(android.os.LocaleList!);
    method public java.util.Locale! get(int);
    method public java.util.Locale? getFirstMatch(String[]);
    method public Object! getLocaleList();
    method public int indexOf(java.util.Locale!);
    method public boolean isEmpty();
    method public int size();
    method public String! toLanguageTags();
    field private final android.os.LocaleList! mLocaleList;
  }

  public final class MessageCompat {
    ctor private MessageCompat();
    field private static boolean sTryIsAsynchronous;
    field private static boolean sTrySetAsynchronous;
  }

  public final class ParcelCompat {
    ctor private ParcelCompat();
  }

  @Deprecated public final class ParcelableCompat {
    ctor private ParcelableCompat();
  }

  static class ParcelableCompat.ParcelableCompatCreatorHoneycombMR2<T> implements android.os.Parcelable.ClassLoaderCreator<T> {
    ctor ParcelableCompat.ParcelableCompatCreatorHoneycombMR2(androidx.core.os.ParcelableCompatCreatorCallbacks<T>!);
    field private final androidx.core.os.ParcelableCompatCreatorCallbacks<T>! mCallbacks;
  }

  public final class TraceCompat {
    ctor private TraceCompat();
  }

  public class UserManagerCompat {
    ctor private UserManagerCompat();
  }

}

package androidx.core.provider {

  public final class FontRequest {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public String! getIdentifier();
    field private final java.util.List<java.util.List<byte[]>>! mCertificates;
    field private final int mCertificatesArray;
    field private final String! mIdentifier;
    field private final String! mProviderAuthority;
    field private final String! mProviderPackage;
    field private final String! mQuery;
  }

  public class FontsContractCompat {
    ctor private FontsContractCompat();
    method private static java.util.List<byte[]>! convertToByteArrayList(android.content.pm.Signature[]!);
    method private static boolean equalsByteArrayList(java.util.List<byte[]>!, java.util.List<byte[]>!);
    method private static java.util.List<java.util.List<byte[]>>! getCertificates(androidx.core.provider.FontRequest!, android.content.res.Resources!);
    method @VisibleForTesting static androidx.core.provider.FontsContractCompat.FontInfo[] getFontFromProvider(android.content.Context!, androidx.core.provider.FontRequest!, String!, android.os.CancellationSignal!);
    method static androidx.core.provider.FontsContractCompat.TypefaceResult getFontInternal(android.content.Context!, androidx.core.provider.FontRequest!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.graphics.Typeface! getFontSync(android.content.Context!, androidx.core.provider.FontRequest!, androidx.core.content.res.ResourcesCompat.FontCallback?, android.os.Handler?, boolean, int, int);
    method @VisibleForTesting @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.content.pm.ProviderInfo? getProvider(android.content.pm.PackageManager, androidx.core.provider.FontRequest, android.content.res.Resources?) throws android.content.pm.PackageManager.NameNotFoundException;
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(19) public static java.util.Map<android.net.Uri,java.nio.ByteBuffer>! prepareFontData(android.content.Context!, androidx.core.provider.FontsContractCompat.FontInfo[]!, android.os.CancellationSignal!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void resetCache();
    field private static final int BACKGROUND_THREAD_KEEP_ALIVE_DURATION_MS = 10000; // 0x2710
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String PARCEL_FONT_RESULTS = "font_results";
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) static final int RESULT_CODE_PROVIDER_NOT_FOUND = -1; // 0xffffffff
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) static final int RESULT_CODE_WRONG_CERTIFICATES = -2; // 0xfffffffe
    field private static final androidx.core.provider.SelfDestructiveThread! sBackgroundThread;
    field private static final java.util.Comparator<byte[]>! sByteArrayComparator;
    field static final Object! sLock;
    field @GuardedBy("sLock") static final androidx.collection.SimpleArrayMap<java.lang.String,java.util.ArrayList<androidx.core.provider.SelfDestructiveThread.ReplyCallback<androidx.core.provider.FontsContractCompat.TypefaceResult>>>! sPendingReplies;
    field static final androidx.collection.LruCache<java.lang.String,android.graphics.Typeface>! sTypefaceCache;
  }

  public static class FontsContractCompat.FontFamilyResult {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public FontsContractCompat.FontFamilyResult(int, androidx.core.provider.FontsContractCompat.FontInfo[]?);
    field private final androidx.core.provider.FontsContractCompat.FontInfo[]! mFonts;
    field private final int mStatusCode;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.provider.FontsContractCompat.FontFamilyResult.STATUS_OK, androidx.core.provider.FontsContractCompat.FontFamilyResult.STATUS_WRONG_CERTIFICATES, androidx.core.provider.FontsContractCompat.FontFamilyResult.STATUS_UNEXPECTED_DATA_PROVIDED}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) static @interface FontsContractCompat.FontFamilyResult.FontResultStatus {
  }

  public static class FontsContractCompat.FontInfo {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public FontsContractCompat.FontInfo(android.net.Uri, @IntRange(from=0) int, @IntRange(from=1, to=1000) int, boolean, int);
    field private final boolean mItalic;
    field private final int mResultCode;
    field private final int mTtcIndex;
    field private final android.net.Uri! mUri;
    field private final int mWeight;
  }

  public static class FontsContractCompat.FontRequestCallback {
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int RESULT_OK = 0; // 0x0
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_PROVIDER_NOT_FOUND, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_FONT_LOAD_ERROR, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_FONT_NOT_FOUND, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_FONT_UNAVAILABLE, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_MALFORMED_QUERY, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_WRONG_CERTIFICATES, androidx.core.provider.FontsContractCompat.FontRequestCallback.FAIL_REASON_SECURITY_VIOLATION, 0x0}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface FontsContractCompat.FontRequestCallback.FontRequestFailReason {
  }

  private static final class FontsContractCompat.TypefaceResult {
    ctor FontsContractCompat.TypefaceResult(android.graphics.Typeface?, int);
    field final int mResult;
    field final android.graphics.Typeface! mTypeface;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SelfDestructiveThread {
    ctor public SelfDestructiveThread(String!, int, int);
    method @VisibleForTesting public int getGeneration();
    method @VisibleForTesting public boolean isRunning();
    method void onDestruction();
    method void onInvokeRunnable(Runnable!);
    method private void post(Runnable!);
    method public <T> void postAndReply(java.util.concurrent.Callable<T>!, androidx.core.provider.SelfDestructiveThread.ReplyCallback<T>!);
    method public <T> T! postAndWait(java.util.concurrent.Callable<T>!, int) throws java.lang.InterruptedException;
    field private static final int MSG_DESTRUCTION = 0; // 0x0
    field private static final int MSG_INVOKE_RUNNABLE = 1; // 0x1
    field private android.os.Handler.Callback! mCallback;
    field private final int mDestructAfterMillisec;
    field @GuardedBy("mLock") private int mGeneration;
    field @GuardedBy("mLock") private android.os.Handler! mHandler;
    field private final Object! mLock;
    field private final int mPriority;
    field @GuardedBy("mLock") private android.os.HandlerThread! mThread;
    field private final String! mThreadName;
  }

  public static interface SelfDestructiveThread.ReplyCallback<T> {
    method public void onReply(T!);
  }

}

package androidx.core.telephony.mbms {

  public final class MbmsHelper {
    ctor private MbmsHelper();
  }

}

package androidx.core.text {

  public final class BidiFormatter {
    ctor BidiFormatter(boolean, int, androidx.core.text.TextDirectionHeuristicCompat!);
    method private static int getEntryDir(CharSequence!);
    method private static int getExitDir(CharSequence!);
    method static boolean isRtlLocale(java.util.Locale!);
    method private String! markAfter(CharSequence!, androidx.core.text.TextDirectionHeuristicCompat!);
    method private String! markBefore(CharSequence!, androidx.core.text.TextDirectionHeuristicCompat!);
    field private static final int DEFAULT_FLAGS = 2; // 0x2
    field static final androidx.core.text.BidiFormatter! DEFAULT_LTR_INSTANCE;
    field static final androidx.core.text.BidiFormatter! DEFAULT_RTL_INSTANCE;
    field static final androidx.core.text.TextDirectionHeuristicCompat! DEFAULT_TEXT_DIRECTION_HEURISTIC;
    field private static final int DIR_LTR = -1; // 0xffffffff
    field private static final int DIR_RTL = 1; // 0x1
    field private static final int DIR_UNKNOWN = 0; // 0x0
    field private static final String EMPTY_STRING = "";
    field private static final int FLAG_STEREO_RESET = 2; // 0x2
    field private static final char LRE = 8234; // 0x202a '\u202a'
    field private static final char LRM = 8206; // 0x200e '\u200e'
    field private static final String! LRM_STRING;
    field private static final char PDF = 8236; // 0x202c '\u202c'
    field private static final char RLE = 8235; // 0x202b '\u202b'
    field private static final char RLM = 8207; // 0x200f '\u200f'
    field private static final String! RLM_STRING;
    field private final androidx.core.text.TextDirectionHeuristicCompat! mDefaultTextDirectionHeuristicCompat;
    field private final int mFlags;
    field private final boolean mIsRtlContext;
  }

  public static final class BidiFormatter.Builder {
    method private static androidx.core.text.BidiFormatter! getDefaultInstanceFromContext(boolean);
    method private void initialize(boolean);
    field private int mFlags;
    field private boolean mIsRtlContext;
    field private androidx.core.text.TextDirectionHeuristicCompat! mTextDirectionHeuristicCompat;
  }

  private static class BidiFormatter.DirectionalityEstimator {
    ctor BidiFormatter.DirectionalityEstimator(CharSequence!, boolean);
    method byte dirTypeBackward();
    method byte dirTypeForward();
    method private static byte getCachedDirectionality(char);
    method int getEntryDir();
    method int getExitDir();
    method private byte skipEntityBackward();
    method private byte skipEntityForward();
    method private byte skipTagBackward();
    method private byte skipTagForward();
    field private static final byte[]! DIR_TYPE_CACHE;
    field private static final int DIR_TYPE_CACHE_SIZE = 1792; // 0x700
    field private int charIndex;
    field private final boolean isHtml;
    field private char lastChar;
    field private final int length;
    field private final CharSequence! text;
  }

  public final class HtmlCompat {
    ctor private HtmlCompat();
  }

  @IntDef(value={androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH, androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_HEADING, androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM, androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_LIST, androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_DIV, androidx.core.text.HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE, androidx.core.text.HtmlCompat.FROM_HTML_OPTION_USE_CSS_COLORS, androidx.core.text.HtmlCompat.FROM_HTML_MODE_COMPACT, androidx.core.text.HtmlCompat.FROM_HTML_MODE_LEGACY}, flag=true) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) static @interface HtmlCompat.FromHtmlFlags {
  }

  @IntDef({androidx.core.text.HtmlCompat.TO_HTML_PARAGRAPH_LINES_CONSECUTIVE, androidx.core.text.HtmlCompat.TO_HTML_PARAGRAPH_LINES_INDIVIDUAL}) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) static @interface HtmlCompat.ToHtmlOptions {
  }

  public final class ICUCompat {
    ctor private ICUCompat();
    method private static String! addLikelySubtags(java.util.Locale!);
    method private static String! getScript(String!);
    field private static final String TAG = "ICUCompat";
    field private static java.lang.reflect.Method! sAddLikelySubtagsMethod;
    field private static java.lang.reflect.Method! sGetScriptMethod;
  }

  public class PrecomputedTextCompat implements android.text.Spannable {
    ctor private PrecomputedTextCompat(CharSequence, androidx.core.text.PrecomputedTextCompat.Params, int[]);
    ctor @RequiresApi(28) private PrecomputedTextCompat(android.text.PrecomputedText, androidx.core.text.PrecomputedTextCompat.Params);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @RequiresApi(28) public android.text.PrecomputedText? getPrecomputedText();
    field private static final char LINE_FEED = 10; // 0x000a '\n'
    field private final int[] mParagraphEnds;
    field private final androidx.core.text.PrecomputedTextCompat.Params mParams;
    field private final android.text.Spannable mText;
    field private final android.text.PrecomputedText? mWrapped;
    field @GuardedBy("sLock") private static java.util.concurrent.Executor sExecutor;
    field private static final Object! sLock;
  }

  public static final class PrecomputedTextCompat.Params {
    ctor PrecomputedTextCompat.Params(android.text.TextPaint, android.text.TextDirectionHeuristic, int, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat.Params);
    field private final int mBreakStrategy;
    field private final int mHyphenationFrequency;
    field private final android.text.TextPaint mPaint;
    field private final android.text.TextDirectionHeuristic? mTextDir;
    field final android.text.PrecomputedText.Params! mWrapped;
  }

  public static class PrecomputedTextCompat.Params.Builder {
    field private int mBreakStrategy;
    field private int mHyphenationFrequency;
    field private final android.text.TextPaint mPaint;
    field private android.text.TextDirectionHeuristic! mTextDir;
  }

  private static class PrecomputedTextCompat.PrecomputedTextFutureTask extends java.util.concurrent.FutureTask<androidx.core.text.PrecomputedTextCompat> {
    ctor PrecomputedTextCompat.PrecomputedTextFutureTask(androidx.core.text.PrecomputedTextCompat.Params, CharSequence);
  }

  private static class PrecomputedTextCompat.PrecomputedTextFutureTask.PrecomputedTextCallback implements java.util.concurrent.Callable<androidx.core.text.PrecomputedTextCompat> {
    ctor PrecomputedTextCompat.PrecomputedTextFutureTask.PrecomputedTextCallback(androidx.core.text.PrecomputedTextCompat.Params, CharSequence);
    field private androidx.core.text.PrecomputedTextCompat.Params! mParams;
    field private CharSequence! mText;
  }

  public final class TextDirectionHeuristicsCompat {
    ctor private TextDirectionHeuristicsCompat();
    method static int isRtlText(int);
    method static int isRtlTextOrFormat(int);
    field private static final int STATE_FALSE = 1; // 0x1
    field private static final int STATE_TRUE = 0; // 0x0
    field private static final int STATE_UNKNOWN = 2; // 0x2
  }

  private static class TextDirectionHeuristicsCompat.AnyStrong implements androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm {
    ctor private TextDirectionHeuristicsCompat.AnyStrong(boolean);
    method public int checkRtl(CharSequence!, int, int);
    field static final androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong! INSTANCE_RTL;
    field private final boolean mLookForRtl;
  }

  private static class TextDirectionHeuristicsCompat.FirstStrong implements androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm {
    ctor private TextDirectionHeuristicsCompat.FirstStrong();
    method public int checkRtl(CharSequence!, int, int);
    field static final androidx.core.text.TextDirectionHeuristicsCompat.FirstStrong! INSTANCE;
  }

  private static interface TextDirectionHeuristicsCompat.TextDirectionAlgorithm {
    method public int checkRtl(CharSequence!, int, int);
  }

  private abstract static class TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl implements androidx.core.text.TextDirectionHeuristicCompat {
    ctor TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl(androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm!);
    method protected abstract boolean defaultIsRtl();
    method private boolean doCheck(CharSequence!, int, int);
    field private final androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm! mAlgorithm;
  }

  private static class TextDirectionHeuristicsCompat.TextDirectionHeuristicInternal extends androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl {
    ctor TextDirectionHeuristicsCompat.TextDirectionHeuristicInternal(androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm!, boolean);
    method protected boolean defaultIsRtl();
    field private final boolean mDefaultIsRtl;
  }

  private static class TextDirectionHeuristicsCompat.TextDirectionHeuristicLocale extends androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl {
    ctor TextDirectionHeuristicsCompat.TextDirectionHeuristicLocale();
    method protected boolean defaultIsRtl();
    field static final androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicLocale! INSTANCE;
  }

  public final class TextUtilsCompat {
    ctor private TextUtilsCompat();
    method private static int getLayoutDirectionFromFirstChar(java.util.Locale);
    field private static final String ARAB_SCRIPT_SUBTAG = "Arab";
    field private static final String HEBR_SCRIPT_SUBTAG = "Hebr";
    field private static final java.util.Locale! ROOT;
  }

}

package androidx.core.text.util {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) class FindAddress {
    ctor private FindAddress();
    method private static int attemptMatch(String!, java.util.regex.MatchResult!);
    method private static boolean checkHouseNumber(String!);
    method static String! findAddress(String!);
    method @VisibleForTesting public static boolean isValidLocationName(String!);
    method private static boolean isValidZipCode(String!, java.util.regex.MatchResult!);
    method @VisibleForTesting public static boolean isValidZipCode(String!, String!);
    method @VisibleForTesting public static boolean isValidZipCode(String!);
    method @VisibleForTesting public static java.util.regex.MatchResult! matchHouseNumber(String!, int);
    method @VisibleForTesting public static java.util.regex.MatchResult! matchState(String!, int);
    field private static final String HOUSE_COMPONENT = "(?:one|\\d+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)";
    field private static final String HOUSE_END = "(?=[,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029]|$)";
    field private static final String HOUSE_POST_DELIM = ",\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029";
    field private static final String HOUSE_PRE_DELIM = ":,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029";
    field private static final int MAX_ADDRESS_LINES = 5; // 0x5
    field private static final int MAX_ADDRESS_WORDS = 14; // 0xe
    field private static final int MAX_LOCATION_NAME_DISTANCE = 5; // 0x5
    field private static final int MIN_ADDRESS_WORDS = 4; // 0x4
    field private static final String NL = "\n\u000b\u000c\r\u0085\u2028\u2029";
    field private static final String SP = "\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000";
    field private static final String WORD_DELIM = ",*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029";
    field private static final String WORD_END = "(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029]|$)";
    field private static final String WS = "\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\u000c\r\u0085\u2028\u2029";
    field private static final int kMaxAddressNameWordLength = 25; // 0x19
    field private static final java.util.regex.Pattern! sHouseNumberRe;
    field private static final java.util.regex.Pattern! sLocationNameRe;
    field private static final java.util.regex.Pattern! sStateRe;
    field private static final androidx.core.text.util.FindAddress.ZipRange[]! sStateZipCodeRanges;
    field private static final java.util.regex.Pattern! sSuffixedNumberRe;
    field private static final java.util.regex.Pattern! sWordRe;
    field private static final java.util.regex.Pattern! sZipCodeRe;
  }

  private static class FindAddress.ZipRange {
    ctor FindAddress.ZipRange(int, int, int, int);
    method boolean matches(String!);
    field int mException1;
    field int mException2;
    field int mHigh;
    field int mLow;
  }

  public final class LinkifyCompat {
    ctor private LinkifyCompat();
    method private static void addLinkMovementMethod(android.widget.TextView);
    method private static void applyLink(String!, int, int, android.text.Spannable!);
    method private static String! findAddress(String!);
    method private static void gatherLinks(java.util.ArrayList<androidx.core.text.util.LinkifyCompat.LinkSpec>!, android.text.Spannable!, java.util.regex.Pattern!, String[]!, android.text.util.Linkify.MatchFilter!, android.text.util.Linkify.TransformFilter!);
    method private static void gatherMapLinks(java.util.ArrayList<androidx.core.text.util.LinkifyCompat.LinkSpec>!, android.text.Spannable!);
    method private static String! makeUrl(String, String[], java.util.regex.Matcher!, android.text.util.Linkify.TransformFilter?);
    method private static void pruneOverlaps(java.util.ArrayList<androidx.core.text.util.LinkifyCompat.LinkSpec>!, android.text.Spannable!);
    method private static boolean shouldAddLinksFallbackToFramework();
    field private static final java.util.Comparator<androidx.core.text.util.LinkifyCompat.LinkSpec>! COMPARATOR;
    field private static final String[]! EMPTY_STRING;
  }

  private static class LinkifyCompat.LinkSpec {
    ctor LinkifyCompat.LinkSpec();
    field int end;
    field android.text.style.URLSpan! frameworkAddedSpan;
    field int start;
    field String! url;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef(flag=true, value={android.text.util.Linkify.WEB_URLS, android.text.util.Linkify.EMAIL_ADDRESSES, android.text.util.Linkify.PHONE_NUMBERS, android.text.util.Linkify.MAP_ADDRESSES, android.text.util.Linkify.ALL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface LinkifyCompat.LinkifyMask {
  }

}

package androidx.core.util {

  public class AtomicFile {
    method private static boolean sync(java.io.FileOutputStream);
    field private final java.io.File! mBackupName;
    field private final java.io.File! mBaseName;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class DebugUtils {
    ctor private DebugUtils();
    method public static void buildShortClassTag(Object!, StringBuilder!);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class LogWriter extends java.io.Writer {
    ctor public LogWriter(String!);
    method private void flushBuilder();
    field private StringBuilder! mBuilder;
    field private final String! mTag;
  }

  public class ObjectsCompat {
    ctor private ObjectsCompat();
  }

  public final class PatternsCompat {
    ctor private PatternsCompat();
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final java.util.regex.Pattern! AUTOLINK_EMAIL_ADDRESS;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final java.util.regex.Pattern! AUTOLINK_WEB_URL;
    field private static final String EMAIL_ADDRESS_DOMAIN = "(?=.{1,255}(?:\\s|$|^))([a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    field private static final String EMAIL_ADDRESS_LOCAL_PART = "[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'\\.]{0,62}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'])?";
    field private static final String EMAIL_CHAR = "a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'";
    field private static final String HOST_NAME = "([a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    field static final String IANA_TOP_LEVEL_DOMAINS = "(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))";
    field private static final String IRI_LABEL = "[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}";
    field private static final String LABEL_CHAR = "a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    field private static final String PATH_AND_QUERY = "[/\\?](?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]];/\\?:@&=#~\\-\\.\\+!\\*\'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*";
    field private static final String PORT_NUMBER = "\\:\\d{1,5}";
    field private static final String PROTOCOL = "(?i:http|https|rtsp)://";
    field private static final String PUNYCODE_TLD = "xn\\-\\-[\\w\\-]{0,58}\\w";
    field private static final String! RELAXED_DOMAIN_NAME;
    field private static final java.util.regex.Pattern! STRICT_DOMAIN_NAME;
    field private static final String STRICT_HOST_NAME = "(?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(?:(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))|xn\\-\\-[\\w\\-]{0,58}\\w))";
    field private static final String STRICT_TLD = "(?:(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))|xn\\-\\-[\\w\\-]{0,58}\\w)";
    field private static final String TLD = "(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    field private static final String TLD_CHAR = "a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    field private static final String UCS_CHAR = "[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\ud800\udc00-\ud83f\udffd\ud840\udc00-\ud87f\udffd\ud880\udc00-\ud8bf\udffd\ud8c0\udc00-\ud8ff\udffd\ud900\udc00-\ud93f\udffd\ud940\udc00-\ud97f\udffd\ud980\udc00-\ud9bf\udffd\ud9c0\udc00-\ud9ff\udffd\uda00\udc00-\uda3f\udffd\uda40\udc00-\uda7f\udffd\uda80\udc00-\udabf\udffd\udac0\udc00-\udaff\udffd\udb00\udc00-\udb3f\udffd\udb44\udc00-\udb7f\udffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    field private static final String USER_INFO = "(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@";
    field private static final String! WEB_URL_WITHOUT_PROTOCOL;
    field private static final String! WEB_URL_WITH_PROTOCOL;
    field private static final String WORD_BOUNDARY = "(?:\\b|$|^)";
  }

  public final class Pools {
    ctor private Pools();
  }

  public static class Pools.SimplePool<T> implements androidx.core.util.Pools.Pool<T> {
    method private boolean isInPool(T);
    field private final Object[]! mPool;
    field private int mPoolSize;
  }

  public static class Pools.SynchronizedPool<T> extends androidx.core.util.Pools.SimplePool<T> {
    field private final Object! mLock;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class Preconditions {
    ctor private Preconditions();
    method public static void checkArgument(boolean);
    method public static void checkArgument(boolean, Object);
    method public static int checkArgumentInRange(int, int, int, String);
    method @IntRange(from=0) public static int checkArgumentNonnegative(int, String?);
    method @IntRange(from=0) public static int checkArgumentNonnegative(int);
    method public static <T> T checkNotNull(T?);
    method public static <T> T checkNotNull(T?, Object);
    method public static void checkState(boolean, String?);
    method public static void checkState(boolean);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class TimeUtils {
    ctor private TimeUtils();
    method private static int accumField(int, int, boolean, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void formatDuration(long, StringBuilder!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void formatDuration(long, java.io.PrintWriter!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void formatDuration(long, java.io.PrintWriter!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static void formatDuration(long, long, java.io.PrintWriter!);
    method private static int formatDurationLocked(long, int);
    method private static int printField(char[]!, int, char, int, boolean, int);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final int HUNDRED_DAY_FIELD_LEN = 19; // 0x13
    field private static final int SECONDS_PER_DAY = 86400; // 0x15180
    field private static final int SECONDS_PER_HOUR = 3600; // 0xe10
    field private static final int SECONDS_PER_MINUTE = 60; // 0x3c
    field private static char[]! sFormatStr;
    field private static final Object! sFormatSync;
  }

}

package androidx.core.view {

  public class AccessibilityDelegateCompat {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public AccessibilityDelegateCompat(android.view.View.AccessibilityDelegate!);
    method android.view.View.AccessibilityDelegate! getBridge();
    method private boolean isSpanStillValid(android.text.style.ClickableSpan!, android.view.View!);
    method private boolean performClickableSpanAction(int, android.view.View!);
    field private static final android.view.View.AccessibilityDelegate! DEFAULT_DELEGATE;
    field private final android.view.View.AccessibilityDelegate! mBridge;
    field private final android.view.View.AccessibilityDelegate! mOriginalDelegate;
  }

  static final class AccessibilityDelegateCompat.AccessibilityDelegateAdapter extends android.view.View.AccessibilityDelegate {
    ctor AccessibilityDelegateCompat.AccessibilityDelegateAdapter(androidx.core.view.AccessibilityDelegateCompat!);
    field final androidx.core.view.AccessibilityDelegateCompat! mCompat;
  }

  public abstract class ActionProvider {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void reset();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void setSubUiVisibilityListener(androidx.core.view.ActionProvider.SubUiVisibilityListener!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void subUiVisibilityChanged(boolean);
    field private static final String TAG = "ActionProvider(support)";
    field private final android.content.Context! mContext;
    field private androidx.core.view.ActionProvider.SubUiVisibilityListener! mSubUiVisibilityListener;
    field private androidx.core.view.ActionProvider.VisibilityListener! mVisibilityListener;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static interface ActionProvider.SubUiVisibilityListener {
    method public void onSubUiVisibilityChanged(boolean);
  }

  public final class DisplayCutoutCompat {
    ctor private DisplayCutoutCompat(Object!);
    method static androidx.core.view.DisplayCutoutCompat! wrap(Object!);
    field private final Object! mDisplayCutout;
  }

  public final class DragAndDropPermissionsCompat {
    ctor private DragAndDropPermissionsCompat(Object!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.core.view.DragAndDropPermissionsCompat? request(android.app.Activity!, android.view.DragEvent!);
    field private Object! mDragAndDropPermissions;
  }

  public class DragStartHelper {
    field private boolean mDragging;
    field private int mLastTouchX;
    field private int mLastTouchY;
    field private final androidx.core.view.DragStartHelper.OnDragStartListener! mListener;
    field private final android.view.View.OnLongClickListener! mLongClickListener;
    field private final android.view.View.OnTouchListener! mTouchListener;
    field private final android.view.View! mView;
  }

  public final class GestureDetectorCompat {
    field private final androidx.core.view.GestureDetectorCompat.GestureDetectorCompatImpl! mImpl;
  }

  static interface GestureDetectorCompat.GestureDetectorCompatImpl {
    method public boolean isLongpressEnabled();
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setIsLongpressEnabled(boolean);
    method public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener!);
  }

  static class GestureDetectorCompat.GestureDetectorCompatImplBase implements androidx.core.view.GestureDetectorCompat.GestureDetectorCompatImpl {
    ctor GestureDetectorCompat.GestureDetectorCompatImplBase(android.content.Context!, android.view.GestureDetector.OnGestureListener!, android.os.Handler!);
    method private void cancel();
    method private void cancelTaps();
    method void dispatchLongPress();
    method private void init(android.content.Context!);
    method private boolean isConsideredDoubleTap(android.view.MotionEvent!, android.view.MotionEvent!, android.view.MotionEvent!);
    method public boolean isLongpressEnabled();
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setIsLongpressEnabled(boolean);
    method public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener!);
    field private static final int DOUBLE_TAP_TIMEOUT;
    field private static final int LONGPRESS_TIMEOUT;
    field private static final int LONG_PRESS = 2; // 0x2
    field private static final int SHOW_PRESS = 1; // 0x1
    field private static final int TAP = 3; // 0x3
    field private static final int TAP_TIMEOUT;
    field private boolean mAlwaysInBiggerTapRegion;
    field private boolean mAlwaysInTapRegion;
    field android.view.MotionEvent! mCurrentDownEvent;
    field boolean mDeferConfirmSingleTap;
    field android.view.GestureDetector.OnDoubleTapListener! mDoubleTapListener;
    field private int mDoubleTapSlopSquare;
    field private float mDownFocusX;
    field private float mDownFocusY;
    field private final android.os.Handler! mHandler;
    field private boolean mInLongPress;
    field private boolean mIsDoubleTapping;
    field private boolean mIsLongpressEnabled;
    field private float mLastFocusX;
    field private float mLastFocusY;
    field final android.view.GestureDetector.OnGestureListener! mListener;
    field private int mMaximumFlingVelocity;
    field private int mMinimumFlingVelocity;
    field private android.view.MotionEvent! mPreviousUpEvent;
    field boolean mStillDown;
    field private int mTouchSlopSquare;
    field private android.view.VelocityTracker! mVelocityTracker;
  }

  private class GestureDetectorCompat.GestureDetectorCompatImplBase.GestureHandler extends android.os.Handler {
    ctor GestureDetectorCompat.GestureDetectorCompatImplBase.GestureHandler();
    ctor GestureDetectorCompat.GestureDetectorCompatImplBase.GestureHandler(android.os.Handler!);
  }

  static class GestureDetectorCompat.GestureDetectorCompatImplJellybeanMr2 implements androidx.core.view.GestureDetectorCompat.GestureDetectorCompatImpl {
    ctor GestureDetectorCompat.GestureDetectorCompatImplJellybeanMr2(android.content.Context!, android.view.GestureDetector.OnGestureListener!, android.os.Handler!);
    method public boolean isLongpressEnabled();
    method public boolean onTouchEvent(android.view.MotionEvent!);
    method public void setIsLongpressEnabled(boolean);
    method public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener!);
    field private final android.view.GestureDetector! mDetector;
  }

  public final class GravityCompat {
    ctor private GravityCompat();
  }

  public final class InputDeviceCompat {
    ctor private InputDeviceCompat();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class KeyEventDispatcher {
    ctor private KeyEventDispatcher();
    method private static boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar!, android.view.KeyEvent!);
    method private static boolean activitySuperDispatchKeyEventPre28(android.app.Activity!, android.view.KeyEvent!);
    method private static boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog!, android.view.KeyEvent!);
    method public static boolean dispatchBeforeHierarchy(android.view.View, android.view.KeyEvent);
    method public static boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher.Component, android.view.View?, android.view.Window.Callback?, android.view.KeyEvent);
    method private static android.content.DialogInterface.OnKeyListener! getDialogKeyListenerPre28(android.app.Dialog!);
    field private static boolean sActionBarFieldsFetched;
    field private static java.lang.reflect.Method! sActionBarOnMenuKeyMethod;
    field private static boolean sDialogFieldsFetched;
    field private static java.lang.reflect.Field! sDialogKeyListenerField;
  }

  public static interface KeyEventDispatcher.Component {
    method public boolean superDispatchKeyEvent(android.view.KeyEvent!);
  }

  public final class LayoutInflaterCompat {
    ctor private LayoutInflaterCompat();
    method private static void forceSetFactory2(android.view.LayoutInflater!, android.view.LayoutInflater.Factory2!);
    field private static final String TAG = "LayoutInflaterCompatHC";
    field private static boolean sCheckedField;
    field private static java.lang.reflect.Field! sLayoutInflaterFactory2Field;
  }

  static class LayoutInflaterCompat.Factory2Wrapper implements android.view.LayoutInflater.Factory2 {
    ctor LayoutInflaterCompat.Factory2Wrapper(androidx.core.view.LayoutInflaterFactory!);
    field final androidx.core.view.LayoutInflaterFactory! mDelegateFactory;
  }

  public final class MarginLayoutParamsCompat {
    ctor private MarginLayoutParamsCompat();
  }

  public final class MenuCompat {
    ctor private MenuCompat();
  }

  public final class MenuItemCompat {
    ctor private MenuItemCompat();
    field private static final String TAG = "MenuItemCompat";
  }

  public final class MotionEventCompat {
    ctor private MotionEventCompat();
  }

  public class NestedScrollingChildHelper {
    method private boolean dispatchNestedScrollInternal(int, int, int, int, int[]?, int, int[]?);
    method private android.view.ViewParent! getNestedScrollingParentForType(int);
    method private int[]! getTempNestedScrollConsumed();
    method private void setNestedScrollingParentForType(int, android.view.ViewParent!);
    field private boolean mIsNestedScrollingEnabled;
    field private android.view.ViewParent! mNestedScrollingParentNonTouch;
    field private android.view.ViewParent! mNestedScrollingParentTouch;
    field private int[]! mTempNestedScrollConsumed;
    field private final android.view.View! mView;
  }

  public class NestedScrollingParentHelper {
    field private int mNestedScrollAxesNonTouch;
    field private int mNestedScrollAxesTouch;
  }

  public final class OneShotPreDrawListener implements android.view.View.OnAttachStateChangeListener android.view.ViewTreeObserver.OnPreDrawListener {
    ctor private OneShotPreDrawListener(android.view.View!, Runnable!);
    field private final Runnable! mRunnable;
    field private final android.view.View! mView;
    field private android.view.ViewTreeObserver! mViewTreeObserver;
  }

  public final class PointerIconCompat {
    ctor private PointerIconCompat(Object!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public Object! getPointerIcon();
    field private Object! mPointerIcon;
  }

  public final class ScaleGestureDetectorCompat {
    ctor private ScaleGestureDetectorCompat();
  }

  @Deprecated public final class VelocityTrackerCompat {
    ctor private VelocityTrackerCompat();
  }

  public class ViewCompat {
    method private static androidx.core.view.ViewCompat.AccessibilityViewProperty<java.lang.Boolean>! accessibilityHeadingProperty();
    method private static void bindTempDetach();
    method private static void compatOffsetLeftAndRight(android.view.View!, int);
    method private static void compatOffsetTopAndBottom(android.view.View!, int);
    method @UiThread static boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View!, android.view.KeyEvent!);
    method @UiThread static boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View!, android.view.KeyEvent!);
    method private static android.view.View.AccessibilityDelegate? getAccessibilityDelegateInternal(android.view.View);
    method private static android.graphics.Rect! getEmptyTempRect();
    method static androidx.core.view.AccessibilityDelegateCompat! getOrCreateAccessibilityDelegateCompat(android.view.View);
    method static void notifyViewAccessibilityStateChangedIfNeeded(android.view.View!, int);
    method private static androidx.core.view.ViewCompat.AccessibilityViewProperty<java.lang.CharSequence>! paneTitleProperty();
    method private static androidx.core.view.ViewCompat.AccessibilityViewProperty<java.lang.Boolean>! screenReaderFocusableProperty();
    method private static void tickleInvalidationFlag(android.view.View!);
    field private static final String TAG = "ViewCompat";
    field private static boolean sAccessibilityDelegateCheckFailed;
    field private static java.lang.reflect.Field! sAccessibilityDelegateField;
    field private static androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager! sAccessibilityPaneVisibilityManager;
    field private static java.lang.reflect.Method! sChildrenDrawingOrderMethod;
    field private static java.lang.reflect.Method! sDispatchFinishTemporaryDetach;
    field private static java.lang.reflect.Method! sDispatchStartTemporaryDetach;
    field private static java.lang.reflect.Field! sMinHeightField;
    field private static boolean sMinHeightFieldFetched;
    field private static java.lang.reflect.Field! sMinWidthField;
    field private static boolean sMinWidthFieldFetched;
    field private static final java.util.concurrent.atomic.AtomicInteger! sNextGeneratedId;
    field private static boolean sTempDetachBound;
    field private static ThreadLocal<android.graphics.Rect>! sThreadLocalRect;
    field private static java.util.WeakHashMap<android.view.View,java.lang.String>! sTransitionNameMap;
    field private static java.util.WeakHashMap<android.view.View,androidx.core.view.ViewPropertyAnimatorCompat>! sViewPropertyAnimatorMap;
  }

  @IntDef({androidx.core.view.ViewCompat.ACCESSIBILITY_LIVE_REGION_NONE, androidx.core.view.ViewCompat.ACCESSIBILITY_LIVE_REGION_POLITE, androidx.core.view.ViewCompat.ACCESSIBILITY_LIVE_REGION_ASSERTIVE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.AccessibilityLiveRegion {
  }

  static class ViewCompat.AccessibilityPaneVisibilityManager implements android.view.View.OnAttachStateChangeListener android.view.ViewTreeObserver.OnGlobalLayoutListener {
    ctor ViewCompat.AccessibilityPaneVisibilityManager();
    method void addAccessibilityPane(android.view.View!);
    method private void checkPaneVisibility(android.view.View!, boolean);
    method private void registerForLayoutCallback(android.view.View!);
    method void removeAccessibilityPane(android.view.View!);
    method private void unregisterForLayoutCallback(android.view.View!);
    field private java.util.WeakHashMap<android.view.View,java.lang.Boolean>! mPanesToVisible;
  }

  abstract static class ViewCompat.AccessibilityViewProperty<T> {
    ctor ViewCompat.AccessibilityViewProperty(int, Class<T>!, int);
    ctor ViewCompat.AccessibilityViewProperty(int, Class<T>!, int, int);
    method boolean booleanNullToFalseEquals(Boolean!, Boolean!);
    method private boolean extrasAvailable();
    method private boolean frameworkAvailable();
    method abstract T! frameworkGet(android.view.View!);
    method abstract void frameworkSet(android.view.View!, T!);
    method T! get(android.view.View!);
    method void set(android.view.View!, T!);
    method boolean shouldUpdate(T!, T!);
    field private final int mContentChangeType;
    field private final int mFrameworkMinimumSdk;
    field private final int mTagKey;
    field private final Class<T>! mType;
  }

  @IntDef({android.view.View.IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES, android.view.View.IMPORTANT_FOR_AUTOFILL_NO, android.view.View.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, android.view.View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.AutofillImportance {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_BACKWARD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface ViewCompat.FocusDirection {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface ViewCompat.FocusRealDirection {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_BACKWARD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface ViewCompat.FocusRelativeDirection {
  }

  @IntDef({androidx.core.view.ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_AUTO, androidx.core.view.ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_YES, androidx.core.view.ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_NO, androidx.core.view.ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.ImportantForAccessibility {
  }

  @IntDef({android.view.View.LAYER_TYPE_NONE, android.view.View.LAYER_TYPE_SOFTWARE, android.view.View.LAYER_TYPE_HARDWARE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.LayerType {
  }

  @IntDef({androidx.core.view.ViewCompat.LAYOUT_DIRECTION_LTR, androidx.core.view.ViewCompat.LAYOUT_DIRECTION_RTL, androidx.core.view.ViewCompat.LAYOUT_DIRECTION_INHERIT, androidx.core.view.ViewCompat.LAYOUT_DIRECTION_LOCALE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.LayoutDirectionMode {
  }

  @IntDef({androidx.core.view.ViewCompat.TYPE_TOUCH, androidx.core.view.ViewCompat.TYPE_NON_TOUCH}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface ViewCompat.NestedScrollType {
  }

  @RequiresApi(28) private static class ViewCompat.OnUnhandledKeyEventListenerWrapper implements android.view.View.OnUnhandledKeyEventListener {
    ctor ViewCompat.OnUnhandledKeyEventListenerWrapper(androidx.core.view.ViewCompat.OnUnhandledKeyEventListenerCompat!);
    field private androidx.core.view.ViewCompat.OnUnhandledKeyEventListenerCompat! mCompatListener;
  }

  @IntDef({androidx.core.view.ViewCompat.OVER_SCROLL_ALWAYS, androidx.core.view.ViewCompat.OVER_SCROLL_IF_CONTENT_SCROLLS, androidx.core.view.ViewCompat.OVER_SCROLL_NEVER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.OverScroll {
  }

  @IntDef({androidx.core.view.ViewCompat.LAYOUT_DIRECTION_LTR, androidx.core.view.ViewCompat.LAYOUT_DIRECTION_RTL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) private static @interface ViewCompat.ResolvedLayoutDirectionMode {
  }

  @IntDef(value={androidx.core.view.ViewCompat.SCROLL_AXIS_NONE, androidx.core.view.ViewCompat.SCROLL_AXIS_HORIZONTAL, androidx.core.view.ViewCompat.SCROLL_AXIS_VERTICAL}, flag=true) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static @interface ViewCompat.ScrollAxis {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @IntDef(flag=true, value={androidx.core.view.ViewCompat.SCROLL_INDICATOR_TOP, androidx.core.view.ViewCompat.SCROLL_INDICATOR_BOTTOM, androidx.core.view.ViewCompat.SCROLL_INDICATOR_LEFT, androidx.core.view.ViewCompat.SCROLL_INDICATOR_RIGHT, androidx.core.view.ViewCompat.SCROLL_INDICATOR_START, androidx.core.view.ViewCompat.SCROLL_INDICATOR_END}) public static @interface ViewCompat.ScrollIndicators {
  }

  static class ViewCompat.UnhandledKeyEventManager {
    ctor ViewCompat.UnhandledKeyEventManager();
    method static androidx.core.view.ViewCompat.UnhandledKeyEventManager! at(android.view.View!);
    method boolean dispatch(android.view.View!, android.view.KeyEvent!);
    method private android.view.View? dispatchInOrder(android.view.View!, android.view.KeyEvent!);
    method private android.util.SparseArray<java.lang.ref.WeakReference<android.view.View>>! getCapturedKeys();
    method private boolean onUnhandledKeyEvent(android.view.View, android.view.KeyEvent);
    method boolean preDispatch(android.view.KeyEvent!);
    method private void recalcViewsWithUnhandled();
    method static void registerListeningView(android.view.View!);
    method static void unregisterListeningView(android.view.View!);
    field private android.util.SparseArray<java.lang.ref.WeakReference<android.view.View>>! mCapturedKeys;
    field private java.lang.ref.WeakReference<android.view.KeyEvent>! mLastDispatchedPreViewKeyEvent;
    field private java.util.WeakHashMap<android.view.View,java.lang.Boolean>? mViewsContainingListeners;
    field private static final java.util.ArrayList<java.lang.ref.WeakReference<android.view.View>>! sViewsWithListeners;
  }

  public final class ViewConfigurationCompat {
    ctor private ViewConfigurationCompat();
    method private static float getLegacyScrollFactor(android.view.ViewConfiguration!, android.content.Context!);
    field private static final String TAG = "ViewConfigCompat";
    field private static java.lang.reflect.Method! sGetScaledScrollFactorMethod;
  }

  public final class ViewGroupCompat {
    ctor private ViewGroupCompat();
  }

  public final class ViewParentCompat {
    ctor private ViewParentCompat();
    method private static int[]! getTempNestedScrollConsumed();
    field private static final String TAG = "ViewParentCompat";
    field private static int[]! sTempNestedScrollConsumed;
  }

  public final class ViewPropertyAnimatorCompat {
    ctor ViewPropertyAnimatorCompat(android.view.View!);
    method private void setListenerInternal(android.view.View!, androidx.core.view.ViewPropertyAnimatorListener!);
    field static final int LISTENER_TAG_ID = 2113929216; // 0x7e000000
    field Runnable! mEndAction;
    field int mOldLayerType;
    field Runnable! mStartAction;
    field private java.lang.ref.WeakReference<android.view.View>! mView;
  }

  static class ViewPropertyAnimatorCompat.ViewPropertyAnimatorListenerApi14 implements androidx.core.view.ViewPropertyAnimatorListener {
    ctor ViewPropertyAnimatorCompat.ViewPropertyAnimatorListenerApi14(androidx.core.view.ViewPropertyAnimatorCompat!);
    field boolean mAnimEndCalled;
    field androidx.core.view.ViewPropertyAnimatorCompat! mVpa;
  }

  public final class WindowCompat {
    ctor private WindowCompat();
  }

  public class WindowInsetsCompat {
    ctor private WindowInsetsCompat(Object!);
    method static Object! unwrap(androidx.core.view.WindowInsetsCompat!);
    method static androidx.core.view.WindowInsetsCompat! wrap(Object!);
    field private final Object! mInsets;
  }

}

package androidx.core.view.accessibility {

  public final class AccessibilityClickableSpanCompat extends android.text.style.ClickableSpan {
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public AccessibilityClickableSpanCompat(int, androidx.core.view.accessibility.AccessibilityNodeInfoCompat!, int);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String SPAN_ID = "ACCESSIBILITY_CLICKABLE_SPAN_ID";
    field private final int mClickableSpanActionId;
    field private final androidx.core.view.accessibility.AccessibilityNodeInfoCompat! mNodeInfoCompat;
    field private final int mOriginalClickableSpanId;
  }

  public final class AccessibilityEventCompat {
    ctor private AccessibilityEventCompat();
  }

  public final class AccessibilityManagerCompat {
    ctor private AccessibilityManagerCompat();
  }

  private static class AccessibilityManagerCompat.AccessibilityStateChangeListenerWrapper implements android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener {
    ctor AccessibilityManagerCompat.AccessibilityStateChangeListenerWrapper(androidx.core.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListener);
    field androidx.core.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListener! mListener;
  }

  @RequiresApi(19) private static class AccessibilityManagerCompat.TouchExplorationStateChangeListenerWrapper implements android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener {
    ctor AccessibilityManagerCompat.TouchExplorationStateChangeListenerWrapper(androidx.core.view.accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeListener);
    field final androidx.core.view.accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeListener! mListener;
  }

  public class AccessibilityNodeInfoCompat {
    ctor private AccessibilityNodeInfoCompat(android.view.accessibility.AccessibilityNodeInfo!);
    method private void addSpanLocationToExtras(android.text.style.ClickableSpan!, android.text.Spanned!, int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addSpansToExtras(CharSequence!, android.view.View!);
    method private void clearExtrasSpans();
    method private java.util.List<java.lang.CharSequence>! extrasCharSequenceList(String!);
    method private java.util.List<java.lang.Integer>! extrasIntList(String!);
    method private static String! getActionSymbolicName(int);
    method private boolean getBooleanProperty(int);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.text.style.ClickableSpan[]! getClickableSpans(CharSequence!);
    method private android.util.SparseArray<java.lang.ref.WeakReference<android.text.style.ClickableSpan>>! getOrCreateSpansFromViewTags(android.view.View!);
    method private android.util.SparseArray<java.lang.ref.WeakReference<android.text.style.ClickableSpan>>! getSpansFromViewTags(android.view.View!);
    method private boolean hasSpans();
    method private int idForClickableSpan(android.text.style.ClickableSpan!, android.util.SparseArray<java.lang.ref.WeakReference<android.text.style.ClickableSpan>>!);
    method private void removeCollectedSpans(android.view.View!);
    method private void setBooleanProperty(int, boolean);
    method static androidx.core.view.accessibility.AccessibilityNodeInfoCompat! wrapNonNullInstance(Object!);
    field private static final int BOOLEAN_PROPERTY_IS_HEADING = 2; // 0x2
    field private static final int BOOLEAN_PROPERTY_IS_SHOWING_HINT = 4; // 0x4
    field private static final String BOOLEAN_PROPERTY_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.BOOLEAN_PROPERTY_KEY";
    field private static final int BOOLEAN_PROPERTY_SCREEN_READER_FOCUSABLE = 1; // 0x1
    field private static final String HINT_TEXT_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.HINT_TEXT_KEY";
    field private static final String PANE_TITLE_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.PANE_TITLE_KEY";
    field private static final String ROLE_DESCRIPTION_KEY = "AccessibilityNodeInfo.roleDescription";
    field private static final String SPANS_ACTION_ID_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_ACTION_ID_KEY";
    field private static final String SPANS_END_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_END_KEY";
    field private static final String SPANS_FLAGS_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_FLAGS_KEY";
    field private static final String SPANS_ID_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_ID_KEY";
    field private static final String SPANS_START_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_START_KEY";
    field private static final String TOOLTIP_TEXT_KEY = "androidx.view.accessibility.AccessibilityNodeInfoCompat.TOOLTIP_TEXT_KEY";
    field private final android.view.accessibility.AccessibilityNodeInfo! mInfo;
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public int mParentVirtualDescendantId;
    field private static int sClickableSpanId;
  }

  public static class AccessibilityNodeInfoCompat.AccessibilityActionCompat {
    ctor AccessibilityNodeInfoCompat.AccessibilityActionCompat(Object!);
    field final Object! mAction;
  }

  public static class AccessibilityNodeInfoCompat.CollectionInfoCompat {
    ctor AccessibilityNodeInfoCompat.CollectionInfoCompat(Object!);
    field final Object! mInfo;
  }

  public static class AccessibilityNodeInfoCompat.CollectionItemInfoCompat {
    ctor AccessibilityNodeInfoCompat.CollectionItemInfoCompat(Object!);
    field final Object! mInfo;
  }

  public static class AccessibilityNodeInfoCompat.RangeInfoCompat {
    ctor AccessibilityNodeInfoCompat.RangeInfoCompat(Object!);
    field final Object! mInfo;
  }

  public class AccessibilityNodeProviderCompat {
    field private final Object! mProvider;
  }

  @RequiresApi(16) static class AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16 extends android.view.accessibility.AccessibilityNodeProvider {
    ctor AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16(androidx.core.view.accessibility.AccessibilityNodeProviderCompat!);
    field final androidx.core.view.accessibility.AccessibilityNodeProviderCompat! mCompat;
  }

  @RequiresApi(19) static class AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi19 extends androidx.core.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16 {
    ctor AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi19(androidx.core.view.accessibility.AccessibilityNodeProviderCompat!);
  }

  public class AccessibilityRecordCompat {
    field private final android.view.accessibility.AccessibilityRecord! mRecord;
  }

  public class AccessibilityWindowInfoCompat {
    ctor private AccessibilityWindowInfoCompat(Object!);
    method private static String! typeToString(int);
    method static androidx.core.view.accessibility.AccessibilityWindowInfoCompat! wrapNonNullInstance(Object!);
    field private static final int UNDEFINED = -1; // 0xffffffff
    field private Object! mInfo;
  }

}

package androidx.core.view.animation {

  class PathInterpolatorApi14 implements android.view.animation.Interpolator {
    ctor PathInterpolatorApi14(android.graphics.Path!);
    ctor PathInterpolatorApi14(float, float);
    ctor PathInterpolatorApi14(float, float, float, float);
    method private static android.graphics.Path! createCubic(float, float, float, float);
    method private static android.graphics.Path! createQuad(float, float);
    field private static final float PRECISION = 0.002f;
    field private final float[]! mX;
    field private final float[]! mY;
  }

  public final class PathInterpolatorCompat {
    ctor private PathInterpolatorCompat();
  }

}

package androidx.core.view.inputmethod {

  public final class EditorInfoCompat {
    field private static final String CONTENT_MIME_TYPES_KEY = "androidx.core.view.inputmethod.EditorInfoCompat.CONTENT_MIME_TYPES";
    field private static final String[]! EMPTY_STRING_ARRAY;
  }

  public final class InputConnectionCompat {
    method static boolean handlePerformPrivateCommand(String?, android.os.Bundle, androidx.core.view.inputmethod.InputConnectionCompat.OnCommitContentListener);
    field private static final String COMMIT_CONTENT_ACTION = "androidx.core.view.inputmethod.InputConnectionCompat.COMMIT_CONTENT";
    field private static final String COMMIT_CONTENT_CONTENT_URI_KEY = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_URI";
    field private static final String COMMIT_CONTENT_DESCRIPTION_KEY = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_DESCRIPTION";
    field private static final String COMMIT_CONTENT_FLAGS_KEY = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_FLAGS";
    field private static final String COMMIT_CONTENT_LINK_URI_KEY = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_LINK_URI";
    field private static final String COMMIT_CONTENT_OPTS_KEY = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_OPTS";
    field private static final String COMMIT_CONTENT_RESULT_RECEIVER = "androidx.core.view.inputmethod.InputConnectionCompat.CONTENT_RESULT_RECEIVER";
  }

  public final class InputContentInfoCompat {
    ctor private InputContentInfoCompat(androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatImpl);
    field private final androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatImpl! mImpl;
  }

  @RequiresApi(25) private static final class InputContentInfoCompat.InputContentInfoCompatApi25Impl implements androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatImpl {
    ctor InputContentInfoCompat.InputContentInfoCompatApi25Impl(Object);
    ctor InputContentInfoCompat.InputContentInfoCompatApi25Impl(android.net.Uri, android.content.ClipDescription, android.net.Uri?);
    method public android.net.Uri getContentUri();
    method public android.content.ClipDescription getDescription();
    method public Object? getInputContentInfo();
    method public android.net.Uri? getLinkUri();
    method public void releasePermission();
    method public void requestPermission();
    field final android.view.inputmethod.InputContentInfo mObject;
  }

  private static final class InputContentInfoCompat.InputContentInfoCompatBaseImpl implements androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatImpl {
    ctor InputContentInfoCompat.InputContentInfoCompatBaseImpl(android.net.Uri, android.content.ClipDescription, android.net.Uri?);
    method public android.net.Uri getContentUri();
    method public android.content.ClipDescription getDescription();
    method public Object? getInputContentInfo();
    method public android.net.Uri? getLinkUri();
    method public void releasePermission();
    method public void requestPermission();
    field private final android.net.Uri mContentUri;
    field private final android.content.ClipDescription mDescription;
    field private final android.net.Uri? mLinkUri;
  }

  private static interface InputContentInfoCompat.InputContentInfoCompatImpl {
    method public android.net.Uri getContentUri();
    method public android.content.ClipDescription getDescription();
    method public Object? getInputContentInfo();
    method public android.net.Uri? getLinkUri();
    method public void releasePermission();
    method public void requestPermission();
  }

}

package androidx.core.widget {

  public abstract class AutoScrollHelper implements android.view.View.OnTouchListener {
    method void cancelTargetTouch();
    method private float computeTargetVelocity(int, float, float, float);
    method static int constrain(int, int, int);
    method static float constrain(float, float, float);
    method private float constrainEdgeValue(float, float);
    method private float getEdgeValue(float, float, float, float);
    method private void requestStop();
    method boolean shouldAnimate();
    method private void startAnimating();
    field private static final int DEFAULT_ACTIVATION_DELAY;
    field private static final int DEFAULT_EDGE_TYPE = 1; // 0x1
    field private static final float DEFAULT_MAXIMUM_EDGE = 3.4028235E38f;
    field private static final int DEFAULT_MAXIMUM_VELOCITY_DIPS = 1575; // 0x627
    field private static final int DEFAULT_MINIMUM_VELOCITY_DIPS = 315; // 0x13b
    field private static final int DEFAULT_RAMP_DOWN_DURATION = 500; // 0x1f4
    field private static final int DEFAULT_RAMP_UP_DURATION = 500; // 0x1f4
    field private static final float DEFAULT_RELATIVE_EDGE = 0.2f;
    field private static final float DEFAULT_RELATIVE_VELOCITY = 1.0f;
    field private static final int HORIZONTAL = 0; // 0x0
    field private static final int VERTICAL = 1; // 0x1
    field private int mActivationDelay;
    field private boolean mAlreadyDelayed;
    field boolean mAnimating;
    field private final android.view.animation.Interpolator! mEdgeInterpolator;
    field private int mEdgeType;
    field private boolean mEnabled;
    field private boolean mExclusive;
    field private float[]! mMaximumEdges;
    field private float[]! mMaximumVelocity;
    field private float[]! mMinimumVelocity;
    field boolean mNeedsCancel;
    field boolean mNeedsReset;
    field private float[]! mRelativeEdges;
    field private float[]! mRelativeVelocity;
    field private Runnable! mRunnable;
    field final androidx.core.widget.AutoScrollHelper.ClampedScroller! mScroller;
    field final android.view.View! mTarget;
  }

  private static class AutoScrollHelper.ClampedScroller {
    ctor AutoScrollHelper.ClampedScroller();
    method public void computeScrollDelta();
    method public int getDeltaX();
    method public int getDeltaY();
    method public int getHorizontalDirection();
    method private float getValueAt(long);
    method public int getVerticalDirection();
    method private float interpolateValue(float);
    method public boolean isFinished();
    method public void requestStop();
    method public void setRampDownDuration(int);
    method public void setRampUpDuration(int);
    method public void setTargetVelocity(float, float);
    method public void start();
    field private long mDeltaTime;
    field private int mDeltaX;
    field private int mDeltaY;
    field private int mEffectiveRampDown;
    field private int mRampDownDuration;
    field private int mRampUpDuration;
    field private long mStartTime;
    field private long mStopTime;
    field private float mStopValue;
    field private float mTargetVelocityX;
    field private float mTargetVelocityY;
  }

  private class AutoScrollHelper.ScrollAnimationRunnable implements java.lang.Runnable {
    ctor AutoScrollHelper.ScrollAnimationRunnable();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface AutoSizeableTextView {
    method public int getAutoSizeMaxTextSize();
    method public int getAutoSizeMinTextSize();
    method public int getAutoSizeStepGranularity();
    method public int[]! getAutoSizeTextAvailableSizes();
    method public int getAutoSizeTextType();
    method public void setAutoSizeTextTypeUniformWithConfiguration(int, int, int, int) throws java.lang.IllegalArgumentException;
    method public void setAutoSizeTextTypeUniformWithPresetSizes(int[], int) throws java.lang.IllegalArgumentException;
    method public void setAutoSizeTextTypeWithDefaults(int);
    field @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final boolean PLATFORM_SUPPORTS_AUTOSIZE;
  }

  public final class CompoundButtonCompat {
    ctor private CompoundButtonCompat();
    field private static final String TAG = "CompoundButtonCompat";
    field private static java.lang.reflect.Field! sButtonDrawableField;
    field private static boolean sButtonDrawableFieldFetched;
  }

  public class ContentLoadingProgressBar extends android.widget.ProgressBar {
    method private void removeCallbacks();
    field private static final int MIN_DELAY = 500; // 0x1f4
    field private static final int MIN_SHOW_TIME = 500; // 0x1f4
    field private final Runnable! mDelayedHide;
    field private final Runnable! mDelayedShow;
    field boolean mDismissed;
    field boolean mPostedHide;
    field boolean mPostedShow;
    field long mStartTime;
  }

  public final class EdgeEffectCompat {
    field private android.widget.EdgeEffect! mEdgeEffect;
  }

  public class ImageViewCompat {
    ctor private ImageViewCompat();
  }

  public final class ListPopupWindowCompat {
    ctor private ListPopupWindowCompat();
  }

  public class ListViewAutoScrollHelper extends androidx.core.widget.AutoScrollHelper {
    field private final android.widget.ListView! mTarget;
  }

  public final class ListViewCompat {
    ctor private ListViewCompat();
  }

  public class NestedScrollView extends android.widget.FrameLayout implements androidx.core.view.NestedScrollingChild3 androidx.core.view.NestedScrollingParent3 androidx.core.view.ScrollingView {
    method private void abortAnimatedScroll();
    method private boolean canScroll();
    method private static int clamp(int, int, int);
    method private void doScrollY(int);
    method private void endDrag();
    method private void ensureGlows();
    method private android.view.View! findFocusableViewInBounds(boolean, int, int);
    method int getScrollRange();
    method private float getVerticalScrollFactorCompat();
    method private boolean inChild(int, int);
    method private void initOrResetVelocityTracker();
    method private void initScrollView();
    method private void initVelocityTrackerIfNotExists();
    method private boolean isOffScreen(android.view.View!);
    method private static boolean isViewDescendantOf(android.view.View!, android.view.View!);
    method private boolean isWithinDeltaOfScreen(android.view.View!, int, int);
    method private void onNestedScrollInternal(int, int, int[]?);
    method private void onSecondaryPointerUp(android.view.MotionEvent!);
    method boolean overScrollByCompat(int, int, int, int, int, int, int, int, boolean);
    method private void recycleVelocityTracker();
    method private void runAnimatedScroll(boolean);
    method private boolean scrollAndFocus(int, int, int);
    method private void scrollToChild(android.view.View!);
    method private boolean scrollToChildRect(android.graphics.Rect!, boolean);
    field private static final androidx.core.widget.NestedScrollView.AccessibilityDelegate! ACCESSIBILITY_DELEGATE;
    field static final int ANIMATED_SCROLL_GAP = 250; // 0xfa
    field private static final int INVALID_POINTER = -1; // 0xffffffff
    field static final float MAX_SCROLL_FACTOR = 0.5f;
    field private static final int[]! SCROLLVIEW_STYLEABLE;
    field private static final String TAG = "NestedScrollView";
    field private int mActivePointerId;
    field private final androidx.core.view.NestedScrollingChildHelper! mChildHelper;
    field private android.view.View! mChildToScrollTo;
    field private android.widget.EdgeEffect! mEdgeGlowBottom;
    field private android.widget.EdgeEffect! mEdgeGlowTop;
    field private boolean mFillViewport;
    field private boolean mIsBeingDragged;
    field private boolean mIsLaidOut;
    field private boolean mIsLayoutDirty;
    field private int mLastMotionY;
    field private long mLastScroll;
    field private int mLastScrollerY;
    field private int mMaximumVelocity;
    field private int mMinimumVelocity;
    field private int mNestedYOffset;
    field private androidx.core.widget.NestedScrollView.OnScrollChangeListener! mOnScrollChangeListener;
    field private final androidx.core.view.NestedScrollingParentHelper! mParentHelper;
    field private androidx.core.widget.NestedScrollView.SavedState! mSavedState;
    field private final int[]! mScrollConsumed;
    field private final int[]! mScrollOffset;
    field private android.widget.OverScroller! mScroller;
    field private boolean mSmoothScrollingEnabled;
    field private final android.graphics.Rect! mTempRect;
    field private int mTouchSlop;
    field private android.view.VelocityTracker! mVelocityTracker;
    field private float mVerticalScrollFactor;
  }

  static class NestedScrollView.AccessibilityDelegate extends androidx.core.view.AccessibilityDelegateCompat {
    ctor NestedScrollView.AccessibilityDelegate();
  }

  static class NestedScrollView.SavedState extends android.view.View.BaseSavedState {
    ctor NestedScrollView.SavedState(android.os.Parcelable!);
    ctor NestedScrollView.SavedState(android.os.Parcel!);
    field public static final android.os.Parcelable.Creator<androidx.core.widget.NestedScrollView.SavedState>! CREATOR;
    field public int scrollPosition;
  }

  public final class PopupMenuCompat {
    ctor private PopupMenuCompat();
  }

  public final class PopupWindowCompat {
    ctor private PopupWindowCompat();
    field private static final String TAG = "PopupWindowCompatApi21";
    field private static java.lang.reflect.Method! sGetWindowLayoutTypeMethod;
    field private static boolean sGetWindowLayoutTypeMethodAttempted;
    field private static java.lang.reflect.Field! sOverlapAnchorField;
    field private static boolean sOverlapAnchorFieldAttempted;
    field private static java.lang.reflect.Method! sSetWindowLayoutTypeMethod;
    field private static boolean sSetWindowLayoutTypeMethodAttempted;
  }

  @Deprecated public final class ScrollerCompat {
    ctor ScrollerCompat(android.content.Context!, android.view.animation.Interpolator!);
    field android.widget.OverScroller! mScroller;
  }

  public final class TextViewCompat {
    ctor private TextViewCompat();
    method @RequiresApi(18) private static int getTextDirection(android.text.TextDirectionHeuristic);
    method @RequiresApi(18) private static android.text.TextDirectionHeuristic! getTextDirectionHeuristic(android.widget.TextView);
    method private static java.lang.reflect.Field! retrieveField(String!);
    method private static int retrieveIntFromField(java.lang.reflect.Field!, android.widget.TextView!);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static android.view.ActionMode.Callback wrapCustomSelectionActionModeCallback(android.widget.TextView, android.view.ActionMode.Callback);
    field private static final int LINES = 1; // 0x1
    field private static final String LOG_TAG = "TextViewCompat";
    field private static java.lang.reflect.Field! sMaxModeField;
    field private static boolean sMaxModeFieldFetched;
    field private static java.lang.reflect.Field! sMaximumField;
    field private static boolean sMaximumFieldFetched;
    field private static java.lang.reflect.Field! sMinModeField;
    field private static boolean sMinModeFieldFetched;
    field private static java.lang.reflect.Field! sMinimumField;
    field private static boolean sMinimumFieldFetched;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @IntDef({androidx.core.widget.TextViewCompat.AUTO_SIZE_TEXT_TYPE_NONE, androidx.core.widget.TextViewCompat.AUTO_SIZE_TEXT_TYPE_UNIFORM}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface TextViewCompat.AutoSizeTextType {
  }

  @RequiresApi(26) private static class TextViewCompat.OreoCallback implements android.view.ActionMode.Callback {
    ctor TextViewCompat.OreoCallback(android.view.ActionMode.Callback!, android.widget.TextView!);
    method private android.content.Intent! createProcessTextIntent();
    method private android.content.Intent! createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo!, android.widget.TextView!);
    method private java.util.List<android.content.pm.ResolveInfo>! getSupportedActivities(android.content.Context!, android.content.pm.PackageManager!);
    method private boolean isEditable(android.widget.TextView!);
    method private boolean isSupportedActivity(android.content.pm.ResolveInfo!, android.content.Context!);
    method private void recomputeProcessTextMenuItems(android.view.Menu!);
    field private static final int MENU_ITEM_ORDER_PROCESS_TEXT_INTENT_ACTIONS_START = 100; // 0x64
    field private final android.view.ActionMode.Callback! mCallback;
    field private boolean mCanUseMenuBuilderReferences;
    field private boolean mInitializedMenuBuilderReferences;
    field private Class! mMenuBuilderClass;
    field private java.lang.reflect.Method! mMenuBuilderRemoveItemAtMethod;
    field private final android.widget.TextView! mTextView;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface TintableImageSourceView {
    method public android.content.res.ColorStateList? getSupportImageTintList();
    method public android.graphics.PorterDuff.Mode? getSupportImageTintMode();
    method public void setSupportImageTintList(android.content.res.ColorStateList?);
    method public void setSupportImageTintMode(android.graphics.PorterDuff.Mode?);
  }

}

