{
  "comments": [
    {
      "key": {
        "uuid": "4684a0d7_ced0183c",
        "filename": "room/compiler/src/main/kotlin/androidx/room/processor/QueryUtils.kt",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2018-10-05T00:21:59Z",
      "side": 1,
      "message": "we should use the AST, not regex.\nalso, this seems to work based on assumption that we prefix all rather than trying to be more clever.\ne.g. no reason to prefix as long as there is a element in the response with that name.\nthis might break regular embedded queries though i\u0027m not sure.\n\nWhat i thought the algorithm would be:\n\nfind all expected field names as their column names.\ncheck the query result to find what they meant with that. (e.g. if field User.name comes as \"user_name\", check for a user_name field, if not exists, check for user aliased table that has name column etc). and then select the data for it.\n\nif we ever find a field that does not have a matching column name nor a matching guessed name, we should error out, or just not do it (depending on how we create the API).\n\nyou are doing more or less the same, except the prefix name is total guesswork instead of checking whether that prefix exists in source table names.\n\nalso does not seem like it will handle select foo.* from foo where n LIKE \u0027a%\u0027.\ngoing w/ AST will avoid these mistakes as well iterate through or selection types and try to swap each 1 by one.",
      "range": {
        "startLine": 54,
        "startChar": 14,
        "endLine": 72,
        "endChar": 51
      },
      "revId": "9bf248872c336b6f06a0f11da10e5c498b3d3ebf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaca5d20_99104cf2",
        "filename": "room/compiler/src/main/kotlin/androidx/room/processor/QueryUtils.kt",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1051900
      },
      "writtenOn": "2018-10-05T06:42:45Z",
      "side": 1,
      "message": "Hmm, this implementation is what I thought you meant in your comments to the doc (except for the regex). The implementation you describe here is closer to what I originally had in mind. Maybe we\u0027re mostly on the same page, just expressing things differently. I\u0027ll revise the implementation with explicit flag, but it\u0027ll take a while as I\u0027m traveling next week.",
      "parentUuid": "4684a0d7_ced0183c",
      "range": {
        "startLine": 54,
        "startChar": 14,
        "endLine": 72,
        "endChar": 51
      },
      "revId": "9bf248872c336b6f06a0f11da10e5c498b3d3ebf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8a9ab45_410c4ea5",
        "filename": "room/compiler/src/main/kotlin/androidx/room/processor/QueryUtils.kt",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1258207
      },
      "writtenOn": "2018-10-08T20:54:57Z",
      "side": 1,
      "message": "I agree we should use a parser to understand SQLite\u0027s AST more precisely instead of regex.\n\nroom-compiler already has a parser generated from the SQLite.g4 file using ANTLR. To traverse the tree you can use a ParseTreeWalker (example: https://paste.googleplex.com/6642858937286656). We actually already have this in the room codebase (QueryVisitor). So override more methods in it to better understand the developed written result columns, specifically you can override \u0027visitResult_column\u0027. The parse rules also contains indices pointing to where in the input stream is the term found which will help on the replacing efforts.\n\nMeanwhile I\u0027m thinking, and Yigit has mentioned this before we should develop a query re-writing mechanism with a more fluent API that Room can use since there are a few other situation where we want to re-write a query, for example Paging has a use case that wants Room to re-write the WHERE clause of a user query.",
      "parentUuid": "eaca5d20_99104cf2",
      "range": {
        "startLine": 54,
        "startChar": 14,
        "endLine": 72,
        "endChar": 51
      },
      "revId": "9bf248872c336b6f06a0f11da10e5c498b3d3ebf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}