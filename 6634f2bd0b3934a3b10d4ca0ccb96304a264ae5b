{
  "comments": [
    {
      "key": {
        "uuid": "39993bb4_c4fb3af5",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:07:14Z",
      "side": 1,
      "message": "This comma followed by semicolon strikes me as weird.  Can\u0027t you just remove the comma and replace it with a semicolon?",
      "range": {
        "startLine": 54,
        "startChar": 19,
        "endLine": 55,
        "endChar": 9
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005a38f0_1d8b099f",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "In general I\u0027m a big fan of ending the last item of an array or enum with a comma, even though it\u0027s not necessary. When you ever add a new entry, this makes for a much cleaner diff because you don\u0027t have to change a line, only add one.\n\nIn this case, however, I don\u0027t see how we\u0027re ever going to add a scroll direction, so I\u0027m happy to remove the final comma.",
      "parentUuid": "39993bb4_c4fb3af5",
      "range": {
        "startLine": 54,
        "startChar": 19,
        "endLine": 55,
        "endChar": 9
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1eda2f1_ee4f5c2c",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-29T01:17:23Z",
      "side": 1,
      "message": "Ah cool, I like the idea of improving diff cleanliness.  Thanks for sharing your perspective.  It was not a big deal.  I\u0027m actually surprised it is not something lint has an opinion of. :)",
      "parentUuid": "005a38f0_1d8b099f",
      "range": {
        "startLine": 54,
        "startChar": 19,
        "endLine": 55,
        "endChar": 9
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ee49b82_282a9354",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:07:14Z",
      "side": 1,
      "message": "Minor point, but instead of nested loops and then filtering out certain combinations, I think it would be clearer to the reader if you simply made 2 loops that required no filtering.\n\nif (!config.mWrap) {\n  for (int extraLegacySpace : new int[] {0, 200}) {\n    result.add(new Object[]{config, extraLegacySpace, -1});\n  }\n  for (int extraLayoutSpace : new int[] {100, 200}) {\n    result.add(new Object[]{config, -1, extraLayoutSpace});\n  }\n  result.add(new Object[]{config, -1, -1});\n}\n\nYour call, just thought that might be more direct.",
      "range": {
        "startLine": 89,
        "startChar": 41,
        "endLine": 89,
        "endChar": 91
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "217d8599_40680054",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "You\u0027re right. I just took the pattern of nested loops for granted :)",
      "parentUuid": "9ee49b82_282a9354",
      "range": {
        "startLine": 89,
        "startChar": 41,
        "endLine": 89,
        "endChar": 91
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9204d61c_f5936dc4",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:07:14Z",
      "side": 1,
      "message": "Minor nit: instead of having an special case in this method, does it make sense to extract out the special case out of the method completely.  Seems like you would just change the first scrollToPositionAndVerify call in test() to:\n\nmLayoutManager.recordNextExtraLayoutSpace();\nwaitForFirstLayout();\n// alignment of TOWARDS_END is actually irrelevant.\nverify(getExpectedExtraSpace(false), getAvailableSpace(TOWARDS_END))",
      "range": {
        "startLine": 131,
        "startChar": 12,
        "endLine": 131,
        "endChar": 75
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a960e632_0d4049fc",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "Good call. I remember it crossed my mind, not sure why I didn\u0027t pursue it.\n\nRegarding the alignment: at the beginning, the alignment is actually TOWARDS_START. I should probably add documentation as to what \"alignment\" means. Like, what is aligned to what.",
      "parentUuid": "9204d61c_f5936dc4",
      "range": {
        "startLine": 131,
        "startChar": 12,
        "endLine": 131,
        "endChar": 75
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2de8d409_7ddc30fe",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 224,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:07:14Z",
      "side": 1,
      "message": "So, is it possible that this test would pass if you intended to display an extra 100px and an extra 200px was actually displayed?\n\nGiven that you are defining the height of children, seems like you could test for the exact expected mObservedStart (that would be ideal) or that the top child falls within a range that is limited on one end by what you said, and on the other by what you said minus the item height.",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 224,
        "endChar": 94
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b2f4ef_3b0728d1",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 224,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "That sounds like a better test, indeed. Will change.",
      "parentUuid": "2de8d409_7ddc30fe",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 224,
        "endChar": 94
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6e68562_04e1fa22",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:07:14Z",
      "side": 1,
      "message": "This seems to prove that each child is in the correct order, but it doesn\u0027t seem to prove that the children are contiguously laid out (as in there are no gaps in between them).  Can you make this \"mBounds[i - 1][1] \u003d\u003d mBounds[i][0] + 1\"?  That seems like it would test true contiguousness.  \n\nAlso, not sure you need to actually test for this here.  The fact that the children are laid out contiguously strikes me as something some other test should be responsible for?",
      "range": {
        "startLine": 331,
        "startChar": 32,
        "endLine": 331,
        "endChar": 66
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75a93207_07be84b1",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "It\u0027s the other way around: \"check if the end of the previous item is further then the start of the next item\". When `mBounds[i - 1][1] \u003d\u003d mBounds[i][0]`, then they are touching each other, and when `mBounds[i - 1][1] \u003e mBounds[i][0]`, they are overlapping, and when `mBounds[i - 1][1] \u003c mBounds[i][0]`, there is a gap. Overlap is OK, touching is OK, a gap is not OK.\n\nThis is the only place where we test in the presence of extra layout space. I think it is valuable to check that layout happens as expected in the extra space as well (i.e., without gaps). For example, that might catch a bug where a view in the extra space accidentally gets recycled after all.",
      "parentUuid": "f6e68562_04e1fa22",
      "range": {
        "startLine": 331,
        "startChar": 32,
        "endLine": 331,
        "endChar": 66
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de341def_eee0c312",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-29T01:17:23Z",
      "side": 1,
      "message": "Ah, right.  The end of one should be equal to the start of the next.  But... I don\u0027t think that overlap is something that LinearLayoutManager allows for, and overlap would be bug.  I think you just want \u0027\u003d\u003d\u0027.  And fine to keep.  :)",
      "parentUuid": "75a93207_07be84b1",
      "range": {
        "startLine": 331,
        "startChar": 32,
        "endLine": 331,
        "endChar": 66
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d4ab641_ee233f38",
        "filename": "recyclerview/recyclerview/src/androidTest/java/androidx/recyclerview/widget/LinearLayoutManagerExtraLayoutSpaceTest.java",
        "patchSetId": 5
      },
      "lineNbr": 331,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-29T19:20:24Z",
      "side": 1,
      "message": "OK, sounds good. Done",
      "parentUuid": "de341def_eee0c312",
      "range": {
        "startLine": 331,
        "startChar": 32,
        "endLine": 331,
        "endChar": 66
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05b6158c_424e9ea4",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 460,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-27T21:09:27Z",
      "side": 1,
      "message": "how about RTL?\n\ndo we want this to be start/end instead?\nleft right might be confusing for RTL.\n\nIf we don\u0027t handle RTL here and developer wants to have more space towards the end of the list all the time, they\u0027ll need to think about RTL.\n\n\ni need to take a longer look at this, as far as i can see, START just means left-top and END just means right-bottom as LLM works in absolute coordinates but still wanted to double check with you.\n\nWe should at least extend the documentation to mention that RTL is also ignored sp values might be absolute.",
      "range": {
        "startLine": 459,
        "startChar": 22,
        "endLine": 460,
        "endChar": 94
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47becf3a_6472434a",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 460,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "getLayoutDirection() covers RTL. Might be unclear to developers though, so I\u0027ll add a note to it.",
      "parentUuid": "05b6158c_424e9ea4",
      "range": {
        "startLine": 459,
        "startChar": 22,
        "endLine": 460,
        "endChar": 94
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4122783_006f3bc2",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 460,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-29T01:34:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "47becf3a_6472434a",
      "range": {
        "startLine": 459,
        "startChar": 22,
        "endLine": 460,
        "endChar": 94
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc08775a_0df40b51",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-27T21:09:27Z",
      "side": 1,
      "message": "what happens if developer puts negative values there, by mistake?\nwe should probably set them back to 0 if they are negative (we could alternatively crash but i don\u0027t see the value of crashing for something we can fix? ).\n\nWe should also add that behavior to the docs of calculateExtra",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a30283e9_f564f8bc",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "LinearLayoutManager will probably layout only part or none of the viewport if negative values are supplied. Similar to the fact that we don\u0027t disallow negative margins, I think we shouldn\u0027t disallow negative extra space either.",
      "parentUuid": "dc08775a_0df40b51",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579d1761_671b4c4c",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-29T01:17:23Z",
      "side": 1,
      "message": "Actually, I\u0027m pretty sure that negative margins is not something that is universally allowed.  I think most of the time setting negative margins enters into \"undefined territory\".  It is my understand that where it works correctly, third party devs just got lucky, and we since have tried not to break it.\n\nI think Yigit may be right here that it should be something guarded against.",
      "parentUuid": "a30283e9_f564f8bc",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d069d39_d2e39521",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-29T01:34:48Z",
      "side": 1,
      "message": "yea, Adam had a nice saying about this. If negative margins are your solution, there is a bigger problem :).\nSo we should just not allow to be on the consistent side of things. Also, negative margins expand the area vs negative extra will collapse it, which might be very unexpected.",
      "parentUuid": "579d1761_671b4c4c",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e0a3a9b_11181ad4",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-29T19:20:24Z",
      "side": 1,
      "message": "Yes, I totally agree that using negative margins (or extra space) is a code smell by itself. I think I still slightly prefer allowing it, but either way it fine with me. Happy to add the guards! :)",
      "parentUuid": "1d069d39_d2e39521",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fc03025_9c10d705",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 631,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-27T21:09:27Z",
      "side": 1,
      "message": "see comments below but seems like it is better to separate extra-start extra-end (instead of extra vs noRecycle).\nthey are constant during the layout so we should be able to just read it form layout state when we need them ?",
      "range": {
        "startLine": 631,
        "startChar": 21,
        "endLine": 631,
        "endChar": 36
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e83b349_d9e500f2",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 631,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:31:44Z",
      "side": 1,
      "message": "See my comment below.",
      "parentUuid": "3fc03025_9c10d705",
      "range": {
        "startLine": 631,
        "startChar": 21,
        "endLine": 631,
        "endChar": 36
      },
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a457e7bd_c04597a1",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 631,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3e83b349_d9e500f2",
      "range": {
        "startLine": 631,
        "startChar": 21,
        "endLine": 631,
        "endChar": 36
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15be1914_ad275a6f",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-27T21:09:27Z",
      "side": 1,
      "message": "why don\u0027t we just name these start and end ?\nthats basically what extra fill space does anyways, unless i\u0027m missing something.\n\nthen we wouldn\u0027t need to pass these values around to the recycle methods either.",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47320062_57bf771f",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-27T21:31:44Z",
      "side": 1,
      "message": "During onLayoutChildren, mExtraFillSpace is used for both start and end direction (it is set to start and then end values for laying out in one direction and then the other) and mNoRecycleSpace isn\u0027t used at all.\n\nDuring scrolling (and other related scrolling like tasks) mExtraFillSpace is only used to fill in in the appropriate direction, and then mNoRecycleSpace is used to prevent recycling in the opposite direction.  \n\nChanging the names to start and end would actually be incorrect given the usage of the fields.",
      "parentUuid": "15be1914_ad275a6f",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a23e427b_aec35b69",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-28T16:09:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "47320062_57bf771f",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0241bbd0_b7784b56",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-29T01:34:48Z",
      "side": 1,
      "message": "i think we should fix that too if we can ? make LLM pick the right value based on the direction ? would that be a big change?",
      "parentUuid": "a23e427b_aec35b69",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bced46fb_2a97d81c",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1347655
      },
      "writtenOn": "2019-03-29T19:20:24Z",
      "side": 1,
      "message": "Can be addressed in a future CL, if it has priority. For now, let\u0027s stick to the decisions we made in https://android-review.googlesource.com/c/platform/frameworks/support/+/931259/1/recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java#2270 and",
      "parentUuid": "0241bbd0_b7784b56",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9333c676_32b09d19",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-03-29T20:17:34Z",
      "side": 1,
      "message": "sgtlm.",
      "parentUuid": "bced46fb_2a97d81c",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0ccbc6_89140b62",
        "filename": "recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java",
        "patchSetId": 5
      },
      "lineNbr": 2254,
      "author": {
        "id": 1344416
      },
      "writtenOn": "2019-03-29T20:39:54Z",
      "side": 1,
      "message": "\"sgtlm: Sounds good to layout manager\", and me too.  :)",
      "parentUuid": "9333c676_32b09d19",
      "revId": "6634f2bd0b3934a3b10d4ca0ccb96304a264ae5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}