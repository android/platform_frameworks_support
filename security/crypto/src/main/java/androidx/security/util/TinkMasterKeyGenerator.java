/*
 * Copyright 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package androidx.security.util;

import androidx.annotation.NonNull;
import androidx.annotation.RestrictTo;
import androidx.security.EncryptionConfig;
import androidx.security.crypto.AeadMasterKeyGenerator;

import com.google.crypto.tink.Aead;

import java.io.IOException;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;

/**
 * Utility class for tink operations
 * @hide
 */
@RestrictTo(RestrictTo.Scope.LIBRARY)
public class TinkMasterKeyGenerator {

    private static final int IV_SIZE_IN_BYTES = 12;
    private static final int TAG_SIZE_IN_BYTES = 16;
    public static final Charset UTF_8 = Charset.forName("UTF-8");

    /**
     * Listener for encrypting symmetric data
     */
    public interface MasterKeyListener {
        /**
         * @param clearText
         */
        void masterKeyUnlocked(@NonNull byte[] clearText);
    }

    /**
     * Interface to provide an asynchronous decrypt operation, coming soon!
     * @hide
     */
    @RestrictTo(RestrictTo.Scope.LIBRARY)
    public interface AsyncAead extends Aead {

    }

    /**
     * Gets or creates a master key for use in Tink
     *
     * @param encryptionConfig the configuration
     * @return The master key
     * @throws GeneralSecurityException
     */
    public static AsyncAead getOrCreateMasterKey(final EncryptionConfig encryptionConfig)
            throws GeneralSecurityException {
        AeadMasterKeyGenerator aeadMasterKeyGenerator = AeadMasterKeyGenerator
                .getInstance(encryptionConfig);
        if (!aeadMasterKeyGenerator.keyExists(EncryptionConfig.MASTER_KEY)) {
            aeadMasterKeyGenerator.generateKey(EncryptionConfig.MASTER_KEY);
        }
        KeyStore keyStore = KeyStore.getInstance(encryptionConfig.getAndroidKeyStore());
        try {
            keyStore.load(null);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        final SecretKey key = (SecretKey) keyStore.getKey(EncryptionConfig.MASTER_KEY, null);
        final byte[] aad = EncryptionConfig.MASTER_KEY.getBytes(UTF_8);
        AsyncAead masterKey = new AsyncAead() {
            @Override
            public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)
                    throws GeneralSecurityException {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final List<byte[]> returnValue = new ArrayList<>();
                // Check that ciphertext is not longer than the max. size of a Java array.
                if (plaintext.length > Integer.MAX_VALUE - IV_SIZE_IN_BYTES - TAG_SIZE_IN_BYTES) {
                    throw new GeneralSecurityException("plaintext too long");
                }
                final byte[] ciphertext = new byte[IV_SIZE_IN_BYTES
                        + plaintext.length + TAG_SIZE_IN_BYTES];
                final Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
                cipher.init(Cipher.ENCRYPT_MODE, key);
                cipher.updateAAD(aad);
                int unusedWritten = cipher.doFinal(plaintext, 0,
                        plaintext.length, ciphertext,
                        IV_SIZE_IN_BYTES);
                // Copy the IV that is randomly generated by Android Keystore.
                System.arraycopy(cipher.getIV(), 0,
                        ciphertext, 0, IV_SIZE_IN_BYTES);
                return ciphertext;
            }

            @Override
            public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)
                    throws GeneralSecurityException {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final List<byte[]> returnValue = new ArrayList<>();
                if (ciphertext.length < IV_SIZE_IN_BYTES + TAG_SIZE_IN_BYTES) {
                    throw new GeneralSecurityException("ciphertext too short");
                }
                GCMParameterSpec params =
                        new GCMParameterSpec(8 * TAG_SIZE_IN_BYTES, ciphertext, 0,
                                IV_SIZE_IN_BYTES);
                final Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
                cipher.init(Cipher.DECRYPT_MODE, key, params);
                cipher.updateAAD(aad);
                return cipher.doFinal(ciphertext, IV_SIZE_IN_BYTES,
                        ciphertext.length - IV_SIZE_IN_BYTES);
            }
        };
        return masterKey;
    }

}
