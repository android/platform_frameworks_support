// Signature format: 3.0
package androidx.security {

  public class EncryptionConfig {
    method public static androidx.security.EncryptionConfig getAES256GCMConfig();
    method public String getAndroidCAStore();
    method public String getAndroidKeyStore();
    method public String getKeystoreType();
    method public String getSymmetricBlockModes();
    method public String getSymmetricCipherTransformation();
    method public int getSymmetricGcmTagLength();
    method public String getSymmetricKeyAlgorithm();
    method public int getSymmetricKeyPurposes();
    method public int getSymmetricKeySize();
    method public String getSymmetricPaddings();
    method public boolean getSymmetricSensitiveDataProtectionEnabled();
    method public void setAndroidCAStore(String);
    method public void setAndroidKeyStore(String);
    method public void setKeystoreType(String);
    method public void setSymmetricBlockModes(String);
    method public void setSymmetricCipherTransformation(String);
    method public void setSymmetricGcmTagLength(int);
    method public void setSymmetricKeyAlgorithm(String);
    method public void setSymmetricKeyPurposes(int);
    method public void setSymmetricKeySize(int);
    method public void setSymmetricPaddings(String);
    method public void setSymmetricSensitiveDataProtection(boolean);
    field public static final String ANDROID_CA_STORE = "AndroidCAStore";
    field public static final String ANDROID_KEYSTORE = "AndroidKeyStore";
    field public static final String ENCRYPTED_FILE_KEYSET = "streaming_aead_keys";
    field public static final String MASTER_KEY = "master_key";
    field public static final String SHARED_PREF_KEY_KEYSET = "daead_keys";
    field public static final String SHARED_PREF_VALUE_KEYSET = "aead_keys";
  }

  public static class EncryptionConfig.Builder {
    ctor public EncryptionConfig.Builder();
    method public androidx.security.EncryptionConfig build();
    method public androidx.security.EncryptionConfig.Builder forKeyStoreType(String);
    method public androidx.security.EncryptionConfig.Builder setSymmetricBlockModes(String);
    method public androidx.security.EncryptionConfig.Builder setSymmetricCipherTransformation(String);
    method public androidx.security.EncryptionConfig.Builder setSymmetricGcmTagLength(int);
    method public androidx.security.EncryptionConfig.Builder setSymmetricKeyAlgorithm(String);
    method public androidx.security.EncryptionConfig.Builder setSymmetricKeyPurposes(int);
    method public androidx.security.EncryptionConfig.Builder setSymmetricKeySize(int);
    method public androidx.security.EncryptionConfig.Builder setSymmetricPaddings(String);
    method public androidx.security.EncryptionConfig.Builder setSymmetricSensitiveDataProtection(boolean);
  }

}

package androidx.security.context {

  public class EncryptedContextCompat {
    ctor public EncryptedContextCompat(android.content.Context);
    ctor public EncryptedContextCompat(android.content.Context, androidx.security.EncryptionConfig);
    method public android.content.SharedPreferences getSharedPreferences(String, int);
    method public java.io.FileInputStream openEncryptedFileInput(String) throws java.security.GeneralSecurityException, java.io.IOException;
    method public java.io.FileOutputStream openEncryptedFileOutput(String, int) throws java.security.GeneralSecurityException, java.io.IOException;
    method public void rotateKeys() throws java.security.GeneralSecurityException, java.io.IOException;
  }

}

package androidx.security.net {

  public class RevocableURL {
    ctor public RevocableURL(String) throws java.net.MalformedURLException;
    ctor public RevocableURL(String, String) throws java.net.MalformedURLException;
    ctor public RevocableURL(String, String, androidx.security.net.RevocableURLConfig) throws java.net.MalformedURLException;
    method public String getClientCertAlias();
    method public String getHostname();
    method public int getPort();
    method public boolean isValid(javax.net.ssl.HttpsURLConnection);
    method public java.net.URLConnection openConnection() throws java.io.IOException;
    method public java.net.URLConnection openUserTrustedCertConnection(java.util.Map<java.lang.String,java.io.InputStream>) throws java.io.IOException;
  }

  public class RevocableURLConfig {
    method public String getCertPath();
    method public String getCertPathValidator();
    method public String[] getClientCertAlgorithms();
    method public static androidx.security.net.RevocableURLConfig getDefault();
    method public static androidx.security.net.RevocableURLConfig getEnterpriseConfig();
    method public String[] getStrongSSLCiphers();
    method public androidx.security.net.TrustAnchorOptions getTrustAnchorOptions();
    method public boolean getUseStrongSSLCiphers();
    method public boolean getUseStrongSSLCiphersEnabled();
    method public void setCertPath(String);
    method public void setCertPathValidator(String);
    method public void setClientCertAlgorithms(String[]);
    method public void setStrongSSLCiphers(String[]);
    method public void setTrustAnchorOptions(androidx.security.net.TrustAnchorOptions);
    method public void setUseStrongSSLCiphers(boolean);
    field public static final String ANDROID_CA_STORE = "AndroidCAStore";
    field public static final String KEYSTORE_TYPE = "PKCS12";
    field public static final String SSL_TLS = "TLS";
  }

  public static class RevocableURLConfig.Builder {
    ctor public RevocableURLConfig.Builder();
    method public androidx.security.net.RevocableURLConfig build();
    method public androidx.security.net.RevocableURLConfig.Builder setCertPath(String);
    method public androidx.security.net.RevocableURLConfig.Builder setCertPathValidator(String);
    method public androidx.security.net.RevocableURLConfig.Builder setClientCertAlgorithms(String[]);
    method public androidx.security.net.RevocableURLConfig.Builder setStrongSSLCiphers(String[]);
    method public androidx.security.net.RevocableURLConfig.Builder setTrustAnchorOptions(androidx.security.net.TrustAnchorOptions);
    method public androidx.security.net.RevocableURLConfig.Builder setUseStrongSSLCiphers(boolean);
  }

  public class RevocableX509KeyManager implements android.security.KeyChainAliasCallback javax.net.ssl.X509KeyManager {
    ctor public RevocableX509KeyManager(String, androidx.security.net.RevocableURLConfig);
    method public void alias(String);
    method public String chooseClientAlias(String[], java.security.Principal[], java.net.Socket);
    method public final String chooseServerAlias(String, java.security.Principal[], java.net.Socket);
    method public java.security.cert.X509Certificate[] getCertificateChain(String);
    method public final String[] getClientAliases(String, java.security.Principal[]);
    method public static androidx.security.net.RevocableX509KeyManager getInstance(String, androidx.security.net.RevocableURLConfig);
    method public java.security.PrivateKey getPrivateKey(String);
    method public final String[] getServerAliases(String, java.security.Principal[]);
    method public static androidx.security.net.RevocableX509KeyManager installCertManually(androidx.security.net.RevocableX509KeyManager.CertType, byte[], String, androidx.security.net.RevocableURLConfig);
    method public void setCertChain(java.security.cert.X509Certificate[]);
    method public static void setContext(android.app.Activity);
    method public void setPrivateKey(java.security.PrivateKey);
  }

  public enum RevocableX509KeyManager.CertType {
    method public static androidx.security.net.RevocableX509KeyManager.CertType fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.net.RevocableX509KeyManager.CertType NOT_SUPPORTED;
    enum_constant public static final androidx.security.net.RevocableX509KeyManager.CertType PKCS12;
    enum_constant public static final androidx.security.net.RevocableX509KeyManager.CertType X509;
  }

  public final class TldConstants {
    field public static final java.util.List<java.lang.String> VALID_TLDS;
  }

  public enum TrustAnchorOptions {
    method public static androidx.security.net.TrustAnchorOptions fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.net.TrustAnchorOptions LIMITED_SYSTEM;
    enum_constant public static final androidx.security.net.TrustAnchorOptions SYSTEM_ONLY;
    enum_constant public static final androidx.security.net.TrustAnchorOptions USER_ONLY;
    enum_constant public static final androidx.security.net.TrustAnchorOptions USER_SYSTEM;
  }

}

