// Signature format: 3.0
package androidx.security {

  public class SecureConfig {
    method public String getAndroidCAStore();
    method public String getAndroidKeyStore();
    method public String getAsymmetricBlockModes();
    method public String getAsymmetricCipherTransformation();
    method public String getAsymmetricKeyPairAlgorithm();
    method public int getAsymmetricKeyPurposes();
    method public int getAsymmetricKeySize();
    method public String getAsymmetricPaddings();
    method public int getAsymmetricRequireUserValiditySeconds();
    method public androidx.security.biometric.BiometricKeyAuthCallback getBiometricKeyAuthCallback();
    method public String getCertPath();
    method public String getCertPathValidator();
    method public String[] getClientCertAlgorithms();
    method public static androidx.security.SecureConfig getDefault();
    method public static androidx.security.SecureConfig getDefault(androidx.security.biometric.BiometricKeyAuthCallback);
    method public String getKeystoreType();
    method public static androidx.security.SecureConfig getStrongConfig();
    method public static androidx.security.SecureConfig getStrongConfig(androidx.security.biometric.BiometricKeyAuthCallback);
    method public String[] getStrongSSLCiphers();
    method public String getSymmetricBlockModes();
    method public String getSymmetricCipherTransformation();
    method public int getSymmetricGcmTagLength();
    method public String getSymmetricKeyAlgorithm();
    method public int getSymmetricKeyPurposes();
    method public int getSymmetricKeySize();
    method public String getSymmetricPaddings();
    method public int getSymmetricRequireUserValiditySeconds();
    method public androidx.security.config.TrustAnchorOptions getTrustAnchorOptions();
    method public boolean isAsymmetricRequireUserAuthEnabled();
    method public boolean isAsymmetricSensitiveDataProtectionEnabled();
    method public boolean isSymmetricRequireUserAuthEnabled();
    method public boolean isSymmetricSensitiveDataProtectionEnabled();
    method public boolean isUseStrongSSLCiphers();
    method public boolean isUseStrongSSLCiphersEnabled();
    method public void setAndroidCAStore(String);
    method public void setAndroidKeyStore(String);
    method public void setAsymmetricBlockModes(String);
    method public void setAsymmetricCipherTransformation(String);
    method public void setAsymmetricKeyPairAlgorithm(String);
    method public void setAsymmetricKeyPurposes(int);
    method public void setAsymmetricKeySize(int);
    method public void setAsymmetricPaddings(String!);
    method public void setAsymmetricRequireUserAuth(boolean);
    method public void setAsymmetricRequireUserValiditySeconds(int);
    method public void setAsymmetricSensitiveDataProtection(boolean);
    method public void setBiometricKeyAuthCallback(androidx.security.biometric.BiometricKeyAuthCallback);
    method public void setCertPath(String);
    method public void setCertPathValidator(String);
    method public void setClientCertAlgorithms(String[]);
    method public void setKeystoreType(String);
    method public void setStrongSSLCiphers(String[]);
    method public void setSymmetricBlockModes(String);
    method public void setSymmetricCipherTransformation(String);
    method public void setSymmetricGcmTagLength(int);
    method public void setSymmetricKeyAlgorithm(String);
    method public void setSymmetricKeyPurposes(int);
    method public void setSymmetricKeySize(int);
    method public void setSymmetricPaddings(String);
    method public void setSymmetricRequireUserAuth(boolean);
    method public void setSymmetricRequireUserValiditySeconds(int);
    method public void setSymmetricSensitiveDataProtection(boolean);
    method public void setTrustAnchorOptions(androidx.security.config.TrustAnchorOptions);
    method public void setUseStrongSSLCiphers(boolean);
    field public static final int AES_IV_SIZE_BYTES = 16; // 0x10
    field public static final String ANDROID_CA_STORE = "AndroidCAStore";
    field public static final String ANDROID_KEYSTORE = "AndroidKeyStore";
    field public static final String SSL_TLS = "TLS";
  }

  public static class SecureConfig.Builder {
    ctor public SecureConfig.Builder();
    method public androidx.security.SecureConfig build();
    method public androidx.security.SecureConfig.Builder forKeyStoreType(String);
    method public androidx.security.SecureConfig.Builder setAsymmetricBlockModes(String);
    method public androidx.security.SecureConfig.Builder setAsymmetricCipherTransformation(String);
    method public androidx.security.SecureConfig.Builder setAsymmetricKeyPairAlgorithm(String);
    method public androidx.security.SecureConfig.Builder setAsymmetricKeyPurposes(int);
    method public androidx.security.SecureConfig.Builder setAsymmetricKeySize(int);
    method public androidx.security.SecureConfig.Builder setAsymmetricPaddings(String);
    method public androidx.security.SecureConfig.Builder setAsymmetricRequireUserAuth(boolean);
    method public androidx.security.SecureConfig.Builder setAsymmetricRequireUserValiditySeconds(int);
    method public androidx.security.SecureConfig.Builder setAsymmetricSensitiveDataProtection(boolean);
    method public androidx.security.SecureConfig.Builder setBiometricKeyAuthCallback(androidx.security.biometric.BiometricKeyAuthCallback);
    method public androidx.security.SecureConfig.Builder setCertPath(String);
    method public androidx.security.SecureConfig.Builder setCertPathValidator(String);
    method public androidx.security.SecureConfig.Builder setClientCertAlgorithms(String[]);
    method public androidx.security.SecureConfig.Builder setStrongSSLCiphers(String[]);
    method public androidx.security.SecureConfig.Builder setSymmetricBlockModes(String);
    method public androidx.security.SecureConfig.Builder setSymmetricCipherTransformation(String);
    method public androidx.security.SecureConfig.Builder setSymmetricGcmTagLength(int);
    method public androidx.security.SecureConfig.Builder setSymmetricKeyAlgorithm(String);
    method public androidx.security.SecureConfig.Builder setSymmetricKeyPurposes(int);
    method public androidx.security.SecureConfig.Builder setSymmetricKeySize(int);
    method public androidx.security.SecureConfig.Builder setSymmetricPaddings(String);
    method public androidx.security.SecureConfig.Builder setSymmetricRequireUserAuth(boolean);
    method public androidx.security.SecureConfig.Builder setSymmetricRequireUserValiditySeconds(int);
    method public androidx.security.SecureConfig.Builder setSymmetricSensitiveDataProtection(boolean);
    method public androidx.security.SecureConfig.Builder setTrustAnchorOptions(androidx.security.config.TrustAnchorOptions);
    method public androidx.security.SecureConfig.Builder setUseStrongSSLCiphers(boolean);
  }

}

package androidx.security.biometric {

  public class BiometricKeyAuth extends androidx.biometric.BiometricPrompt.AuthenticationCallback {
    ctor public BiometricKeyAuth(androidx.fragment.app.FragmentActivity, androidx.security.biometric.BiometricKeyAuthCallback);
    method public void authenticateKey(javax.crypto.Cipher, androidx.biometric.BiometricPrompt.PromptInfo, androidx.security.crypto.SecureCipher.SecureAuthListener!);
    method public void authenticateKey(javax.crypto.Cipher!, androidx.security.crypto.SecureCipher.SecureAuthListener!);
  }

  public abstract class BiometricKeyAuthCallback {
    ctor public BiometricKeyAuthCallback();
    method public abstract void authenticateKey(javax.crypto.Cipher, androidx.security.crypto.SecureCipher.SecureAuthListener);
    method public abstract void onAuthenticationError(int, CharSequence);
    method public abstract void onAuthenticationFailed();
    method public abstract void onAuthenticationSucceeded();
    method public abstract void onMessage(String);
  }

  public enum BiometricKeyAuthCallback.BiometricStatus {
    method public static androidx.security.biometric.BiometricKeyAuthCallback.BiometricStatus fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.biometric.BiometricKeyAuthCallback.BiometricStatus ERROR;
    enum_constant public static final androidx.security.biometric.BiometricKeyAuthCallback.BiometricStatus FAILED;
    enum_constant public static final androidx.security.biometric.BiometricKeyAuthCallback.BiometricStatus SUCCESS;
  }

}

package androidx.security.config {

  public final class TldConstants {
    field public static final java.util.List<java.lang.String> VALID_TLDS;
  }

  public enum TrustAnchorOptions {
    method public static androidx.security.config.TrustAnchorOptions fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.config.TrustAnchorOptions LIMITED_SYSTEM;
    enum_constant public static final androidx.security.config.TrustAnchorOptions SYSTEM_ONLY;
    enum_constant public static final androidx.security.config.TrustAnchorOptions USER_ONLY;
    enum_constant public static final androidx.security.config.TrustAnchorOptions USER_SYSTEM;
  }

}

package androidx.security.context {

  public class SecureContextCompat {
    ctor public SecureContextCompat(android.content.Context!);
    ctor public SecureContextCompat(android.content.Context, androidx.security.SecureConfig);
    method public boolean deviceLocked();
    method public void openEncryptedFileInput(String, java.util.concurrent.Executor, androidx.security.context.SecureContextCompat.EncryptedFileInputStreamListener) throws java.io.IOException;
    method public java.io.FileOutputStream! openEncryptedFileOutput(String, int) throws java.io.IOException;
    method public java.io.FileOutputStream! openEncryptedFileOutput(String, int, String) throws java.io.IOException;
  }

  public static interface SecureContextCompat.EncryptedFileInputStreamListener {
    method public void onEncryptedFileInput(java.io.FileInputStream!);
  }

}

package androidx.security.crypto {

  public class EphemeralSecretKey implements java.security.spec.KeySpec javax.crypto.SecretKey {
    ctor public EphemeralSecretKey(byte[]!);
    ctor public EphemeralSecretKey(byte[]!, String);
    ctor public EphemeralSecretKey(byte[]!, androidx.security.SecureConfig);
    ctor public EphemeralSecretKey(byte[]!, String, androidx.security.SecureConfig);
    ctor public EphemeralSecretKey(byte[]!, int, int, String);
    method public void destroy();
    method public void destroyCipherKey(javax.crypto.Cipher, int);
    method public String getAlgorithm();
    method public byte[]! getEncoded();
    method public String getFormat();
  }

  public class SecureCipher {
    ctor public SecureCipher(androidx.security.SecureConfig);
    method public void decryptEncodedData(byte[]!, androidx.security.crypto.SecureCipher.SecureDecryptionListener);
    method public byte[]! decryptEphemeralData(androidx.security.crypto.EphemeralSecretKey, byte[]!, byte[]!);
    method public void decryptSensitiveData(String, byte[]!, byte[]!, androidx.security.crypto.SecureCipher.SecureDecryptionListener!);
    method public void decryptSensitiveDataAsymmetric(String, byte[]!, androidx.security.crypto.SecureCipher.SecureDecryptionListener);
    method public byte[]! encodeAsymmetricData(byte[]!, byte[]!);
    method public byte[]! encodeEphemeralData(byte[]!, byte[]!, byte[]!, byte[]!);
    method public byte[]! encodeSymmetricData(byte[]!, byte[]!, byte[]!);
    method public android.util.Pair<byte[],byte[]> encryptEphemeralData(androidx.security.crypto.EphemeralSecretKey, byte[]!);
    method public void encryptSensitiveData(String, byte[]!, androidx.security.crypto.SecureCipher.SecureSymmetricEncryptionListener);
    method public void encryptSensitiveDataAsymmetric(String, byte[]!, androidx.security.crypto.SecureCipher.SecureAsymmetricEncryptionListener);
    method public static androidx.security.crypto.SecureCipher getDefault();
    method public static androidx.security.crypto.SecureCipher getDefault(androidx.security.biometric.BiometricKeyAuthCallback);
    method public static androidx.security.crypto.SecureCipher getInstance(androidx.security.SecureConfig);
  }

  public static interface SecureCipher.SecureAsymmetricEncryptionListener {
    method public void encryptionComplete(byte[]!);
  }

  public static interface SecureCipher.SecureAuthListener {
    method public void authComplete(androidx.security.biometric.BiometricKeyAuthCallback.BiometricStatus!);
  }

  public static interface SecureCipher.SecureDecryptionListener {
    method public void decryptionComplete(byte[]!);
  }

  public enum SecureCipher.SecureFileEncodingType {
    method public static androidx.security.crypto.SecureCipher.SecureFileEncodingType! fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.crypto.SecureCipher.SecureFileEncodingType ASYMMETRIC;
    enum_constant public static final androidx.security.crypto.SecureCipher.SecureFileEncodingType EPHEMERAL;
    enum_constant public static final androidx.security.crypto.SecureCipher.SecureFileEncodingType NOT_ENCRYPTED;
    enum_constant public static final androidx.security.crypto.SecureCipher.SecureFileEncodingType SYMMETRIC;
  }

  public static interface SecureCipher.SecureSymmetricEncryptionListener {
    method public void encryptionComplete(byte[]!, byte[]!);
  }

  public class SecureKeyGenerator {
    method public boolean generateAsymmetricKeyPair(String);
    method public androidx.security.crypto.EphemeralSecretKey generateEphemeralDataKey();
    method public boolean generateKey(String);
    method public static androidx.security.crypto.SecureKeyGenerator getDefault();
    method public static androidx.security.crypto.SecureKeyGenerator getInstance(androidx.security.SecureConfig);
  }

  public class SecureKeyStore {
    method public boolean checkKeyInsideSecureHardware(String);
    method public boolean checkKeyInsideSecureHardwareAsymmetric(String);
    method public static androidx.security.crypto.SecureKeyStore getDefault();
    method public static androidx.security.crypto.SecureKeyStore getInstance(androidx.security.SecureConfig);
    method public boolean keyExists(String);
  }

}

package androidx.security.net {

  public class SecureKeyManager implements android.security.KeyChainAliasCallback javax.net.ssl.X509KeyManager {
    ctor public SecureKeyManager(String, androidx.security.SecureConfig);
    method public void alias(String);
    method public String chooseClientAlias(String[], java.security.Principal[], java.net.Socket);
    method public final String chooseServerAlias(String, java.security.Principal[], java.net.Socket);
    method public java.security.cert.X509Certificate[] getCertificateChain(String);
    method public final String[] getClientAliases(String, java.security.Principal[]);
    method public static androidx.security.net.SecureKeyManager getDefault(String);
    method public static androidx.security.net.SecureKeyManager getDefault(String, androidx.security.SecureConfig);
    method public java.security.PrivateKey getPrivateKey(String);
    method public final String[] getServerAliases(String, java.security.Principal[]);
    method public static androidx.security.net.SecureKeyManager installCertManually(androidx.security.net.SecureKeyManager.CertType, byte[]!, String, androidx.security.SecureConfig);
    method public void setCertChain(java.security.cert.X509Certificate[]);
    method public static void setContext(android.app.Activity!);
    method public void setPrivateKey(java.security.PrivateKey);
  }

  public enum SecureKeyManager.CertType {
    method public static androidx.security.net.SecureKeyManager.CertType fromId(int);
    method public int getType();
    enum_constant public static final androidx.security.net.SecureKeyManager.CertType NOT_SUPPORTED;
    enum_constant public static final androidx.security.net.SecureKeyManager.CertType PKCS12;
    enum_constant public static final androidx.security.net.SecureKeyManager.CertType X509;
  }

  public class URLCompat {
    ctor public URLCompat(String, String) throws java.net.MalformedURLException;
    ctor public URLCompat(String, String, androidx.security.SecureConfig) throws java.net.MalformedURLException;
    method public String getClientCertAlias();
    method public String getHostname();
    method public boolean isValid(String, javax.net.ssl.SSLSocket);
    method public boolean isValid(javax.net.ssl.HttpsURLConnection);
    method public java.net.URLConnection openConnection() throws java.io.IOException;
    method public java.net.URLConnection openUserTrustedCertConnection(java.util.Map<java.lang.String,java.io.InputStream>!) throws java.io.IOException;
  }

}

