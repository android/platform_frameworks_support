// Signature format: 3.0
package androidx.security.content {

  public class EncryptedSharedPreferencesCompat implements android.content.SharedPreferences android.content.SharedPreferences.Editor {
    method public void apply();
    method public android.content.SharedPreferences.Editor! clear();
    method public boolean commit();
    method public boolean contains(String!);
    method public android.content.SharedPreferences.Editor! edit();
    method public java.util.Map<java.lang.String,?>! getAll();
    method public boolean getBoolean(String!, boolean);
    method public static android.content.SharedPreferences getEncryptedSharedPreferences(String, int, androidx.security.crypto.EncryptedSharedPreferencesKeysets) throws java.security.GeneralSecurityException, java.io.IOException;
    method public float getFloat(String!, float);
    method public int getInt(String!, int);
    method public long getLong(String!, long);
    method public String? getString(String!, String?);
    method public java.util.Set<java.lang.String>? getStringSet(String!, java.util.Set<java.lang.String>?);
    method public android.content.SharedPreferences.Editor! putBoolean(String!, boolean);
    method public android.content.SharedPreferences.Editor! putFloat(String!, float);
    method public android.content.SharedPreferences.Editor! putInt(String!, int);
    method public android.content.SharedPreferences.Editor! putLong(String!, long);
    method public android.content.SharedPreferences.Editor! putString(String!, String?);
    method public android.content.SharedPreferences.Editor! putStringSet(String!, java.util.Set<java.lang.String>?);
    method public void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener!);
    method public android.content.SharedPreferences.Editor! remove(String!);
    method public void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences.OnSharedPreferenceChangeListener!);
  }

}

package androidx.security.crypto {

  public class EncryptedFile {
    method public java.io.FileInputStream getFileInputStream();
    method public java.io.FileOutputStream getFileOutputStream();
    method public static java.io.FileInputStream openEncryptedFileInput(String, androidx.security.crypto.EncryptedFileKeyset) throws java.security.GeneralSecurityException, java.io.IOException;
    method public static java.io.FileOutputStream openEncryptedFileOutput(String, int, androidx.security.crypto.EncryptedFileKeyset) throws java.security.GeneralSecurityException, java.io.IOException;
  }

  public class EncryptedFileKeyset {
    ctor public EncryptedFileKeyset();
    method public android.content.Context getContext();
    method public static androidx.security.crypto.EncryptedFileKeyset getDefault(android.content.Context, androidx.security.crypto.MasterKey, androidx.security.crypto.EncryptedFileKeyset.FileEncryptionScheme);
    method public androidx.security.crypto.EncryptedFileKeyset.FileEncryptionScheme getFileEncryptionScheme();
    method public String getFileKeysetAlias();
    method public String getFileName();
    method public androidx.security.crypto.MasterKey getMasterKey();
    method public void rotateKeys() throws java.security.GeneralSecurityException, java.io.IOException;
    field public static final String FILE_NAME = "_encrypted_file_keyset_";
    field public static final String KEYSET_ALIAS = "_file_keyset_";
  }

  public static class EncryptedFileKeyset.Builder {
    ctor public EncryptedFileKeyset.Builder();
    method public androidx.security.crypto.EncryptedFileKeyset build();
    method public androidx.security.crypto.EncryptedFileKeyset.Builder setContext(android.content.Context);
    method public androidx.security.crypto.EncryptedFileKeyset.Builder setFileEncryptionScheme(androidx.security.crypto.EncryptedFileKeyset.FileEncryptionScheme);
    method public androidx.security.crypto.EncryptedFileKeyset.Builder setFileKeysetAlias(String);
    method public androidx.security.crypto.EncryptedFileKeyset.Builder setKeyFileName(String);
    method public androidx.security.crypto.EncryptedFileKeyset.Builder setMasterKey(androidx.security.crypto.MasterKey);
  }

  public enum EncryptedFileKeyset.FileEncryptionScheme {
    enum_constant public static final androidx.security.crypto.EncryptedFileKeyset.FileEncryptionScheme AES256_GCM_HKDF_4KB;
  }

  public class EncryptedSharedPreferencesKeysets {
    ctor public EncryptedSharedPreferencesKeysets();
    method public android.content.Context getContext();
    method public static androidx.security.crypto.EncryptedSharedPreferencesKeysets getDefault(android.content.Context, androidx.security.crypto.MasterKey, androidx.security.crypto.EncryptedSharedPreferencesKeysets.KeyEncryptionScheme, androidx.security.crypto.EncryptedSharedPreferencesKeysets.ValueEncryptionScheme);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.KeyEncryptionScheme getKeyEncryptionScheme();
    method public String getKeyFileName();
    method public String getKeyKeysetAlias();
    method public androidx.security.crypto.MasterKey getMasterKey();
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.ValueEncryptionScheme getValueEncryptionScheme();
    method public String getValueFileName();
    method public String getValueKeysetAlias();
    method public void rotateKeys() throws java.security.GeneralSecurityException, java.io.IOException;
    field public static final String KEY_FILE_NAME = "_encrypted_shared_prefs_key_keyset_";
    field public static final String KEY_KEYSET_ALIAS = "_key_keyset_";
    field public static final String VALUE_FILE_NAME = "_encrypted_shared_prefs_value_keyset_";
    field public static final String VALUE_KEYSET_ALIAS = "_value_keyset_";
  }

  public static class EncryptedSharedPreferencesKeysets.Builder {
    ctor public EncryptedSharedPreferencesKeysets.Builder();
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets build();
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setContext(android.content.Context);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setKeyEncryptionScheme(androidx.security.crypto.EncryptedSharedPreferencesKeysets.KeyEncryptionScheme);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setKeyFileName(String);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setKeyKeysetAlias(String);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setMasterKey(androidx.security.crypto.MasterKey);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setValueEncryptionScheme(androidx.security.crypto.EncryptedSharedPreferencesKeysets.ValueEncryptionScheme);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setValueFileName(String);
    method public androidx.security.crypto.EncryptedSharedPreferencesKeysets.Builder setValueKeysetAlias(String);
  }

  public enum EncryptedSharedPreferencesKeysets.KeyEncryptionScheme {
    enum_constant public static final androidx.security.crypto.EncryptedSharedPreferencesKeysets.KeyEncryptionScheme AES256_SIV;
  }

  public enum EncryptedSharedPreferencesKeysets.ValueEncryptionScheme {
    enum_constant public static final androidx.security.crypto.EncryptedSharedPreferencesKeysets.ValueEncryptionScheme AES256_GCM;
  }

  public class MasterKey {
    ctor public MasterKey();
    method public static void ensureExistence(androidx.security.crypto.MasterKey) throws java.security.GeneralSecurityException, java.io.IOException;
    method public boolean getDeviceUnlockedRequired();
    method public androidx.security.crypto.MasterKey.MasterKeyEncryptionScheme getEncryptionScheme();
    method public String getKeyAlias();
    method public static androidx.security.crypto.MasterKey getOrCreate(androidx.security.crypto.MasterKey.MasterKeyEncryptionScheme);
    method public int getUserAuthRequiredSeconds();
    field public static final String ANDROID_KEYSTORE = "AndroidKeyStore";
    field public static final String MASTER_KEY_ALIAS = "_master_key_";
  }

  public static class MasterKey.Builder {
    ctor public MasterKey.Builder();
    method public androidx.security.crypto.MasterKey build();
    method public androidx.security.crypto.MasterKey.Builder setKeyAlias(String);
    method public androidx.security.crypto.MasterKey.Builder setMasterKeyEncryptionScheme(androidx.security.crypto.MasterKey.MasterKeyEncryptionScheme);
    method public androidx.security.crypto.MasterKey.Builder setUserAuthRequiredSeconds(int);
    method public androidx.security.crypto.MasterKey.Builder setUserAuthRequiredSeconds(boolean);
  }

  public enum MasterKey.MasterKeyEncryptionScheme {
    enum_constant public static final androidx.security.crypto.MasterKey.MasterKeyEncryptionScheme AES256_GCM;
  }

}

package androidx.security.net {

  public class ValidatedURL {
    ctor public ValidatedURL(String) throws java.net.MalformedURLException;
    ctor public ValidatedURL(String, String[]) throws java.net.MalformedURLException;
    method public void ensureValid(javax.net.ssl.HttpsURLConnection) throws java.security.GeneralSecurityException, javax.net.ssl.SSLException;
    method public String getHostname();
    method public int getPort();
    method public java.net.URLConnection openConnection() throws java.security.GeneralSecurityException, java.io.IOException;
    field public static final String[]! STRONG_SSL_CIPHERS;
  }

}

