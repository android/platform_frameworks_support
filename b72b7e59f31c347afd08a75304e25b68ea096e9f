{
  "comments": [
    {
      "key": {
        "uuid": "9c3a9706_5e0282a8",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-05-31T14:57:56Z",
      "side": 1,
      "message": "the api is getting much better, one thing to notice is I\u0027m not sure we need expectations as an API.\nin this statement, you are repeating that you expect 0 and that it does not exist, which is the same information. I would write\n\nfind { isCheckable() \u0026\u0026 isChecked \u003d\u003d false }\n    .assertDoesNotExist()\n\nand expect the same result, with less APIs to figure out.",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27012d6d_e85b9c52",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T15:05:31Z",
      "side": 1,
      "message": "+1 assertDoesNotExist should work with basic find()\n\nThe expectation as an API is used when you want to instruct the framework to test multiple elements.So:\nfind() \u003c- expects strictly one\nfind(expectExactly(2)) \u003c- expects exactly 2 elements. This is replacement for findAll.\n\nHope this clarifies this a bit.",
      "parentUuid": "9c3a9706_5e0282a8",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9b1c1e2_df23ca03",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-05-31T16:59:12Z",
      "side": 1,
      "message": "I wouldn\u0027t oppose that proposal, but my most intuitive assumption was something like\n\nfind() // finds as many as there are\n    .assertNumElements(2) // replace this name with something more appropriate but you get the idea\n\nas you sometimes may want to find all elements without asserting how many there are\n\nfind { isCheckable() }\n    .doClick()\n    .assertChecked()",
      "parentUuid": "27012d6d_e85b9c52",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d05262_f3538b31",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T17:05:10Z",
      "side": 1,
      "message": "Sure I see your point and that was my initial intuition too. But there is a big danger in working with multiple elements without the developer knowing it. That\u0027s why frameworks like Espresso only work with one element and throw error on multiple ones. \n\nWhen you write:\nfindByText(\"myButton\").doClick()\n\nYou most likely don\u0027t want to click on more than one button. So multiple items are explicit opt-in currently.",
      "parentUuid": "e9b1c1e2_df23ca03",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40b473a1_9c55db7b",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-05-31T18:12:13Z",
      "side": 1,
      "message": "OK I can see that",
      "parentUuid": "73d05262_f3538b31",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40fba588_9a02bf98",
        "filename": "ui/material/src/androidTest/java/androidx/ui/material/CheckboxUiTest.kt",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Solved the assertDoesNotExist problem.\n\nThe expectations API is still in place though (name still up in the air). I\u0027m open to any alternatives.",
      "parentUuid": "40b473a1_9c55db7b",
      "range": {
        "startLine": 247,
        "startChar": 8,
        "endLine": 248,
        "endChar": 33
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7786c208_2ad8eb8d",
        "filename": "ui/test/api/1.0.0-alpha01.txt",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-05-31T14:57:56Z",
      "side": 1,
      "message": "this will quickly run into \"why don\u0027t we have an assertNotSelected\"? can we modify the ones that are a boolean value to be assertChecked(NodeQuery, value)?",
      "range": {
        "startLine": 15,
        "startChar": 52,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cbf59da_1e4f661f",
        "filename": "ui/test/api/1.0.0-alpha01.txt",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T15:05:31Z",
      "side": 1,
      "message": "We should have assertNotSelected :) It was just our laziness or it was not needed. But we expect to provide convenient wrapper for each boolean. Basically Truth style here.",
      "parentUuid": "7786c208_2ad8eb8d",
      "range": {
        "startLine": 15,
        "startChar": 52,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25284dba_f43dc8b5",
        "filename": "ui/test/api/1.0.0-alpha01.txt",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-05-31T16:59:12Z",
      "side": 1,
      "message": "The current state is inconsistent, as assertSelected right now takes a boolean",
      "parentUuid": "9cbf59da_1e4f661f",
      "range": {
        "startLine": 15,
        "startChar": 52,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7602902_8d4dc7f9",
        "filename": "ui/test/api/1.0.0-alpha01.txt",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Done. The assertions API now has assertNotSelected() and assertSelected().",
      "parentUuid": "25284dba_f43dc8b5",
      "range": {
        "startLine": 15,
        "startChar": 52,
        "endLine": 15,
        "endChar": 68
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3151c72_88af9d0e",
        "filename": "ui/test/src/main/java/androidx/ui/test/Assertions.kt",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "Why is this noThrow?",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5d7d10e_2eb00e6b",
        "filename": "ui/test/src/main/java/androidx/ui/test/Assertions.kt",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Because it just invokes a function, it doesn\u0027t do any assertions itself, the function should throw if there is any problem. Currently this is only used for golden semantics. Would you like to refactor this?",
      "parentUuid": "a3151c72_88af9d0e",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86de43d2_7c117825",
        "filename": "ui/test/src/main/java/androidx/ui/test/Expectations.kt",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "I would give it a name that makes it clear that this is related to amount of items. Expectation can be a bit too generic. Also try to provide some documentation.",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36988d2_50d4dd9e",
        "filename": "ui/test/src/main/java/androidx/ui/test/Expectations.kt",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "I honestly have no idea how to rename it (though I gave it a shot). Feel free to suggest a different name.",
      "parentUuid": "86de43d2_7c117825",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6876f844_a8893c71",
        "filename": "ui/test/src/main/java/androidx/ui/test/Expectations.kt",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "Documentation",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62a5a1ac_e1c89d1d",
        "filename": "ui/test/src/main/java/androidx/ui/test/Expectations.kt",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6876f844_a8893c71",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53b6b22a_3b83ef9b",
        "filename": "ui/test/src/main/java/androidx/ui/test/Finders.kt",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "Please document what is the expected amount of items and point devs to the overload if they need to find multiple.",
      "range": {
        "startLine": 48,
        "startChar": 3,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79af8d79_2e924d4f",
        "filename": "ui/test/src/main/java/androidx/ui/test/Finders.kt",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53b6b22a_3b83ef9b",
      "range": {
        "startLine": 48,
        "startChar": 3,
        "endLine": 48,
        "endChar": 53
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee868ccb_54646d09",
        "filename": "ui/test/src/main/java/androidx/ui/test/NodeQuery.kt",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "Any reasons why is this being renamed to NodeQuey?",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a84d062d_bfba6038",
        "filename": "ui/test/src/main/java/androidx/ui/test/NodeQuery.kt",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Changed it to multiple and to single so dropped the semantic part of the name. Now that we have only one class again I renamed this back to SemanticsTreeInteraction.",
      "parentUuid": "ee868ccb_54646d09",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 15
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a39f487_d36d720f",
        "filename": "ui/test/src/main/java/androidx/ui/test/NodeQuery.kt",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1238792
      },
      "writtenOn": "2019-05-31T14:52:46Z",
      "side": 1,
      "message": "I would recommend doing the following to make the count assertion as much implicit as we can. Since the asserts should not longer care about count.\n\nfind() \u003c- runs the assert on expected count by default\nfindIgnoreExpectedCount() / findNone() \u003c- will be used only by does not exists.",
      "range": {
        "startLine": 55,
        "startChar": 17,
        "endLine": 55,
        "endChar": 40
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "558e908e_6a6aca75",
        "filename": "ui/test/src/main/java/androidx/ui/test/NodeQuery.kt",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1360983
      },
      "writtenOn": "2019-06-05T13:36:35Z",
      "side": 1,
      "message": "Renamed findAndCheckExpectation to find.\n\nThere is no need to add another find method though, the purpose of having both findAndCheckExpectation and findAllMatching was to make use of the expectations object. So right now we\u0027re just using findAllMatching for assertDoesNotExist. It is a little inconsistent though adding another methods that\u0027s basically findAllMatching + assert strikes me a little as overkill. \n\nwdyt?",
      "parentUuid": "4a39f487_d36d720f",
      "range": {
        "startLine": 55,
        "startChar": 17,
        "endLine": 55,
        "endChar": 40
      },
      "revId": "b72b7e59f31c347afd08a75304e25b68ea096e9f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}