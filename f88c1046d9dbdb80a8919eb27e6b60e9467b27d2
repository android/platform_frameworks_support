{
  "comments": [
    {
      "key": {
        "uuid": "4d3b7012_8f29140b",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-25T17:28:24Z",
      "side": 1,
      "message": "note: this can\u0027t be destructured inline, as I run into some strange r8 bug:\n\nError: Field name \u0027$name for destructuring parameter 1\u0027 cannot be represented in dex format.",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2de0c15_c8e0f98e",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-06-26T10:38:08Z",
      "side": 1,
      "message": "nit: add a TODO above it with this comment",
      "parentUuid": "4d3b7012_8f29140b",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001dcc88_09726512",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Probably worth to file a bug against r8..",
      "parentUuid": "d2de0c15_c8e0f98e",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd94f97_c441ded3",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Don\u0027t feel blocked on this one, speaking from my experience as an Android developer with declarative frameworks in my apps before\n\nI know we discussed this several times, but it\u0027s still not buying this api shape...\n\nI think about use-case when you want to add Tabs to ActionBar so it will be one solid part with some potential interactions between them. By having this private, users will basically will type \n```\nColumn {\n   AppBar(...)\n   TabLayout() {} // here\u0027s empty content\n}\n```\n\nwhy users should care in this case about content and why there\u0027s a layout required?\n\nI also think that it\u0027s nice to have a possibility to design and implement your own tabRow and then use it in different TabLayouts across your app/apps and in your appBars, when you don\u0027t need content\n\nwhat do you think if TabLayout will accept TabRow as a slot? remember from one of our discussions, where we discussed how good it will be to have TabLayout being responsible for orchestration between TabRow and TabLayout, and TabRow itself will be responsible for it\u0027s own stuff, like tabs, indicators, etc",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 22
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63cf8b79_43b0a050",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "in Drawer Andrey mentioned good concern that maxWidth actually can be Infinite.. Consider this use case (I chose to just throw as it\u0027s unclear now what to do)",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 36
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09e6fc2f_ea2d7305",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "nit: move this outside of Stack or at least on top before all children",
      "range": {
        "startLine": 119,
        "startChar": 15,
        "endLine": 121,
        "endChar": 17
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4bb42a2_662b27c0",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Is there any reason why you put positioned{} here and not around the whole Transitions? I\u0027d prefer off components inside Stack to be in this lambdas, as it\u0027s unclear to me what will happen if you leave them outside",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 90
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12605f8_0b9f683a",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "What do you think if we will animate relative position instead of absolute? E.g when you\u0027ge going from tabindex 2 to tabindex 3, you\u0027ll animate [2..3] and later multiply in to all dp sizes you want.\n\nThe reason I suggest this is because it will be much more flexible. Imagine if the indicator width will be 2.dp instead of the whole tab? indicatorWith * index logic will not work in this case. One of ways to fix it is to pass TabWidth (for now it\u0027s constant and same for all tabs, right?), but this also seems to scale poorly. In case of relative transition, you will have full control around sizes\n\nI also like the idea for TransitionDefinition to care only about tabcount. WDYT?",
      "range": {
        "startLine": 138,
        "startChar": 60,
        "endLine": 138,
        "endChar": 78
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1b672f_52e9b8e7",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "lowercase probably, as it\u0027s not a composable",
      "range": {
        "startLine": 138,
        "startChar": 12,
        "endLine": 138,
        "endChar": 44
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae71b44_2d033a3c",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "I believe we have divider for Dividers, although it\u0027s just a coloredrect itself, it\u0027s more semantically correct I think :)",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 4
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "326a3403_36689630",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Do we plan to provide generic Tab to users, so they won\u0027t have to create their own semantics/ripples/clicks? For example I just want to place my own image implementation (MyAsyncFancyImage) as an image in the tab. Do I have to write Clickables, Ripples and everything again? \n\nSame question is when I want my Tabs to have MyI18nText() in the tab instead of our Text, or just some other composable",
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0609fa8c_a2f510aa",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "nit: you can avoid lambda creation here bu passing onSelected itself, like BaseTab(onSelected \u003d onSelected)",
      "range": {
        "startLine": 238,
        "startChar": 25,
        "endLine": 238,
        "endChar": 41
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9875d703_c43243b1",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Interesting usage of memo here? Is there a way you can guarantee that this function won\u0027t be called out of composition scope? I\u0027d prefer for now to have all effects be explicitly inside of compositions. It\u0027s also useful to see what it memorized against when you see the composition definition",
      "range": {
        "startLine": 291,
        "startChar": 52,
        "endLine": 291,
        "endChar": 65
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6b2fa22_91851f26",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "What do you think about the idea to have all the magic constants be private vals?",
      "range": {
        "startLine": 294,
        "startChar": 52,
        "endLine": 294,
        "endChar": 57
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}