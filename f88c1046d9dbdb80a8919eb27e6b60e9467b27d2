{
  "comments": [
    {
      "key": {
        "uuid": "4d3b7012_8f29140b",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-25T17:28:24Z",
      "side": 1,
      "message": "note: this can\u0027t be destructured inline, as I run into some strange r8 bug:\n\nError: Field name \u0027$name for destructuring parameter 1\u0027 cannot be represented in dex format.",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2de0c15_c8e0f98e",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1060389
      },
      "writtenOn": "2019-06-26T10:38:08Z",
      "side": 1,
      "message": "nit: add a TODO above it with this comment",
      "parentUuid": "4d3b7012_8f29140b",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001dcc88_09726512",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Probably worth to file a bug against r8..",
      "parentUuid": "d2de0c15_c8e0f98e",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "461f315c_d0a0c42d",
        "filename": "ui/material/integration-tests/material-demos/src/main/java/androidx/ui/material/demos/TabActivity.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "001dcc88_09726512",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5974a683_a582c866",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T13:32:37Z",
      "side": 1,
      "message": "I actually came into realization now that this is just really column of TabRow and \"something else\". By having this api we make assumption that these is enough for viewpager to work. We don\u0027t have ViewPager yet and I don\u0027t want it to affect our api, to be honest... If we will have such component as Tabs+ViewPager that is affected by the API and params of ViewPager, it shouldn\u0027t be in the Tab section, as it\u0027s not only tabs anymore..",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eea622d3_3651ca4c",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Removed this for now, it\u0027s hard to visualize the bigger picture at the moment :)",
      "parentUuid": "5974a683_a582c866",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd94f97_c441ded3",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Don\u0027t feel blocked on this one, speaking from my experience as an Android developer with declarative frameworks in my apps before\n\nI know we discussed this several times, but it\u0027s still not buying this api shape...\n\nI think about use-case when you want to add Tabs to ActionBar so it will be one solid part with some potential interactions between them. By having this private, users will basically will type \n```\nColumn {\n   AppBar(...)\n   TabLayout() {} // here\u0027s empty content\n}\n```\n\nwhy users should care in this case about content and why there\u0027s a layout required?\n\nI also think that it\u0027s nice to have a possibility to design and implement your own tabRow and then use it in different TabLayouts across your app/apps and in your appBars, when you don\u0027t need content\n\nwhat do you think if TabLayout will accept TabRow as a slot? remember from one of our discussions, where we discussed how good it will be to have TabLayout being responsible for orchestration between TabRow and TabLayout, and TabRow itself will be responsible for it\u0027s own stuff, like tabs, indicators, etc",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 22
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6365cc1f_ef63495e",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-06-26T13:24:38Z",
      "side": 1,
      "message": "I strongly agree with Matvei here. I don\u0027t see any reason why TabRow should be private here. Also I don\u0027t think it makes sense for TabLayout to have a slots for Tabs instead of the one slot for TabRow. You are basically just skipping one layer of responsibility here. \nI also think I shouldn\u0027t be restricted to use TabLayout with viewPager inside. What if I don\u0027t have viewPager? What if I have something custom instead? What if I have some custom scrolling logic so my tabs will be collapsed when I scroll the content? What if I need to combine TabRow and AppBar into some common component to apply this scrolling for both of them, or just reuse them together in some way between the screens? What if I need some slightly different tabs indicator, should I rewrite all the TabLayout then?\nIt the purpose of the TabLayout is to just coordinate TabRow and the content maybe we are going into a wrong direction? Maybe we need a controller instead. Developers can write Column even without us and it would be even simpler for them to read as they are familiar with basics already\nColumn(\n   val tabController \u003d +memo { TabController\u003cItemClass\u003e(items, selectedItem) }\n   TabRow(tabController) { item -\u003e\n      Tab(\n        icon \u003d { SimpleImage(item.image) },\n        text \u003d { Text(item.title) }\n      )\n   }\n   ViewPager(tabController.toViewPagerController) { item -\u003e \n      // content\n   }\n}\nfor example ViewPager then could change the progress of the switching between the tabs accordingly to it\u0027s scroll position and this will be applied to the tabs as well. or some similar idea. If you will hide ViewPager inside TabLayout developer will not be able to customize it. What if they would want to provide some custom PageTransformer for it? Let\u0027s also not forget that we don\u0027t have ViewPager yet, and we don\u0027t know how it will work in the end. So we should have a flexible solution which would work with any ViewPager implementation. We should be able to connect our tabController with callbacks from ViewPager.\nI really think TabRow should be a separated item and can be used independently.",
      "parentUuid": "8fd94f97_c441ded3",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 22
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f15be54_a6a0e81c",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Thanks for the input.\n\nFor now I removed TabLayout, and exposed TabRow publicly - when we have some more high level component and a better idea of overall structure, as well as integration with AppBar / ViewPager components, I will revisit this and we can discuss a higher level API.",
      "parentUuid": "6365cc1f_ef63495e",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 22
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63cf8b79_43b0a050",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "in Drawer Andrey mentioned good concern that maxWidth actually can be Infinite.. Consider this use case (I chose to just throw as it\u0027s unclear now what to do)",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 36
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c13a3ad_a1215168",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63cf8b79_43b0a050",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 36
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e6fc2f_ea2d7305",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "nit: move this outside of Stack or at least on top before all children",
      "range": {
        "startLine": 119,
        "startChar": 15,
        "endLine": 121,
        "endChar": 17
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c57220fc_15d1a14e",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09e6fc2f_ea2d7305",
      "range": {
        "startLine": 119,
        "startChar": 15,
        "endLine": 121,
        "endChar": 17
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4bb42a2_662b27c0",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Is there any reason why you put positioned{} here and not around the whole Transitions? I\u0027d prefer off components inside Stack to be in this lambdas, as it\u0027s unclear to me what will happen if you leave them outside",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 90
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0103ca41_987957b7",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "We need the transition state to work out where to position the indicator, shuffled the transition around anyway so it makes more sense now.",
      "parentUuid": "c4bb42a2_662b27c0",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 90
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12605f8_0b9f683a",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "What do you think if we will animate relative position instead of absolute? E.g when you\u0027ge going from tabindex 2 to tabindex 3, you\u0027ll animate [2..3] and later multiply in to all dp sizes you want.\n\nThe reason I suggest this is because it will be much more flexible. Imagine if the indicator width will be 2.dp instead of the whole tab? indicatorWith * index logic will not work in this case. One of ways to fix it is to pass TabWidth (for now it\u0027s constant and same for all tabs, right?), but this also seems to scale poorly. In case of relative transition, you will have full control around sizes\n\nI also like the idea for TransitionDefinition to care only about tabcount. WDYT?",
      "range": {
        "startLine": 138,
        "startChar": 60,
        "endLine": 138,
        "endChar": 78
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1b672f_52e9b8e7",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "lowercase probably, as it\u0027s not a composable",
      "range": {
        "startLine": 138,
        "startChar": 12,
        "endLine": 138,
        "endChar": 44
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40966444_45195637",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Discussed offline, absolute position is nice as it gives the indicator a fixed container to draw in, it doesn\u0027t matter if the indicator fills up the full width, or just 1 pixel, it can be drawn relative to the container.\n\nAlso, I think it makes more sense to do any rounding and interpolation inside transition, rather then the component itself - it shouldn\u0027t care about this multiplication.",
      "parentUuid": "a12605f8_0b9f683a",
      "range": {
        "startLine": 138,
        "startChar": 60,
        "endLine": 138,
        "endChar": 78
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "109fa303_d2622ac1",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Extracted into composable function",
      "parentUuid": "6b1b672f_52e9b8e7",
      "range": {
        "startLine": 138,
        "startChar": 12,
        "endLine": 138,
        "endChar": 44
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ae71b44_2d033a3c",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "I believe we have divider for Dividers, although it\u0027s just a coloredrect itself, it\u0027s more semantically correct I think :)",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 4
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49bfb574_a7a14b98",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ae71b44_2d033a3c",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 166,
        "endChar": 4
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "326a3403_36689630",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Do we plan to provide generic Tab to users, so they won\u0027t have to create their own semantics/ripples/clicks? For example I just want to place my own image implementation (MyAsyncFancyImage) as an image in the tab. Do I have to write Clickables, Ripples and everything again? \n\nSame question is when I want my Tabs to have MyI18nText() in the tab instead of our Text, or just some other composable",
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "925efeec_6e980883",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1361834
      },
      "writtenOn": "2019-06-26T13:24:38Z",
      "side": 1,
      "message": "I also think it is very useful to provide a public BaseTab/RawTab with flexible content. Will  help to create whatever custom tabs with animations developers would want to put into a tab keeping semantics we want them to use.\nAlso you can use slots in your Tab to be aligned with our direction of using slots everywhere.\nTab(\n  selected \u003d selected, \n  onSelected \u003d onSelected, \n  icon \u003d { tintColor -\u003e SimpleImage(icon, tintColor) },\n  text \u003d { Text(text) } // maybe also color as a param or specify it with CurrentTextStyleProvider\n)",
      "parentUuid": "326a3403_36689630",
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d50fac0f_f6df5da2",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Yes, we should provide a base Tab in the future; for now I want to focus on the main types of tabs, and making sure we get the simple use case right.",
      "parentUuid": "925efeec_6e980883",
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0609fa8c_a2f510aa",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "nit: you can avoid lambda creation here bu passing onSelected itself, like BaseTab(onSelected \u003d onSelected)",
      "range": {
        "startLine": 238,
        "startChar": 25,
        "endLine": 238,
        "endChar": 41
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ac8f7ce_1dd83733",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0609fa8c_a2f510aa",
      "range": {
        "startLine": 238,
        "startChar": 25,
        "endLine": 238,
        "endChar": 41
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9875d703_c43243b1",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "Interesting usage of memo here? Is there a way you can guarantee that this function won\u0027t be called out of composition scope? I\u0027d prefer for now to have all effects be explicitly inside of compositions. It\u0027s also useful to see what it memorized against when you see the composition definition",
      "range": {
        "startLine": 291,
        "startChar": 52,
        "endLine": 291,
        "endChar": 65
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3f698f6_599a45a3",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 291,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Extracted to a custom Transition function",
      "parentUuid": "9875d703_c43243b1",
      "range": {
        "startLine": 291,
        "startChar": 52,
        "endLine": 291,
        "endChar": 65
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6b2fa22_91851f26",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1416041
      },
      "writtenOn": "2019-06-26T11:21:25Z",
      "side": 1,
      "message": "What do you think about the idea to have all the magic constants be private vals?",
      "range": {
        "startLine": 294,
        "startChar": 52,
        "endLine": 294,
        "endChar": 57
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "427a87d9_757f9f55",
        "filename": "ui/material/src/main/java/androidx/ui/material/Tab.kt",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1343300
      },
      "writtenOn": "2019-06-27T17:36:09Z",
      "side": 1,
      "message": "Yup, my bad. Thanks.",
      "parentUuid": "c6b2fa22_91851f26",
      "range": {
        "startLine": 294,
        "startChar": 52,
        "endLine": 294,
        "endChar": 57
      },
      "revId": "f88c1046d9dbdb80a8919eb27e6b60e9467b27d2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}