{
  "comments": [
    {
      "key": {
        "uuid": "c2cdce67_6c7b4dfe",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1060206
      },
      "writtenOn": "2019-01-30T23:39:18Z",
      "side": 1,
      "message": "It seems like you can\u0027t enforce this contract (or aren\u0027t doing so).  What can you do to prevent someone from shooting themselves in the foot here?",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 129,
        "endChar": 24
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d10738_9b66a655",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1411450
      },
      "writtenOn": "2019-01-31T11:06:54Z",
      "side": 1,
      "message": "That\u0027s true, though I\u0027m not sure what can be done here.\n\nWe use the Executor (and require it to execute serially) to push everything onto a single thread to avoid needing to synchronize everywhere (suggested by sergeyv@). This method is for apps which have their own requirements about executors who don\u0027t want the library to create one.\n\nCan you recommend an alternative to this method?",
      "parentUuid": "c2cdce67_6c7b4dfe",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 129,
        "endChar": 24
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8416f8b_c4ba6a5a",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1060206
      },
      "writtenOn": "2019-01-31T19:59:23Z",
      "side": 1,
      "message": "Sergey may be able to shed more light here, but I wonder if this shouldn\u0027t just be a SingleThreadedExecutor or something if the contract is so tight?",
      "parentUuid": "a6d10738_9b66a655",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 129,
        "endChar": 24
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b0b8ed9_4d2903a4",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1411450
      },
      "writtenOn": "2019-02-01T16:10:53Z",
      "side": 1,
      "message": "I contacted Sergey and he doesn\u0027t think there is a way to enforce that",
      "parentUuid": "e8416f8b_c4ba6a5a",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 129,
        "endChar": 24
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24836890_39cbd142",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1060206
      },
      "writtenOn": "2019-01-30T23:39:18Z",
      "side": 1,
      "message": "So I see a few issues here.  First, am I correct in understanding that this is a static because you are pairing it with a static singleton (sSingleton)?  If so, the problem is that because you can call KeyedAppStatesReporter.setExecutor(...) at any point, you can change the executor and orphan the old one(s) - you\u0027re not actually stopping that work from running, nor cleaning it up meaningfully.\n\nMoreover, if something happens to be hanging on to a reference to that Executor, it will stay in memory and will not clean up as you expect.\n\nFinally, depending on which thread you set this executor on, you could run into a race condition where the set method below (which does NOT synchronize) could end up using the \"old\" executor.  You\u0027d still run into threading issues.\n\nBecause you already have a singleton, wouldn\u0027t it make much more sense to make this a non-static method/member of that class?",
      "range": {
        "startLine": 136,
        "startChar": 23,
        "endLine": 136,
        "endChar": 34
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29b47f0c_7f76f75f",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1411450
      },
      "writtenOn": "2019-01-31T11:06:54Z",
      "side": 1,
      "message": "setExecutor will throw an exception if the singleton has already been created (see line 139), so this class can\u0027t have used the executor for anything before it is changed.\n\nI think this will ensure an old executor isn\u0027t orphaned, and avoids a race condition in set.\n\nA similar thing is done in https://cs.corp.google.com/aosp-androidx/work/workmanager/src/main/java/androidx/work/WorkManager.java?l\u003d168\n\nIs this correct?",
      "parentUuid": "24836890_39cbd142",
      "range": {
        "startLine": 136,
        "startChar": 23,
        "endLine": 136,
        "endChar": 34
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83a78ab7_920353c2",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1060206
      },
      "writtenOn": "2019-01-31T19:58:15Z",
      "side": 1,
      "message": "WorkManager is doing something slightly different because there\u0027s only one static singleton involved.  In fact, at one point we had two different singletons and we ran into a lot of issues coordinating the two.\n\nI missed your sSingleton!\u003dnull check.  Still, wouldn\u0027t it make more sense to avoid the potential issues here and have a configuration/initialization step like WorkManager is doing?  Having two static methods that rely on ordering will be confusing to the user.\n\nI think there may still be a race condition here if you call setExecutor and getInstance from different threads because of the fact that you\u0027re locking in setExecutor but not in getInstance.  I could see getInstance creating an executor before assigning sSingleton and setExecutor running in that timeframe.  That\u0027s why I think having the executor be an actual (non-static) member of your class would be better.",
      "parentUuid": "29b47f0c_7f76f75f",
      "range": {
        "startLine": 136,
        "startChar": 23,
        "endLine": 136,
        "endChar": 34
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1fe657c_5e98ff75",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1411450
      },
      "writtenOn": "2019-02-01T16:10:53Z",
      "side": 1,
      "message": "I\u0027m not sure what\u0027s different between the WorkManager initialize method and this setExecutor method? As far as I can see both must be called before the `getInstance` method and will throw an exception if called after? What should be changed about this class to make it work like WorkManager?\n\nI can see the race condition in getInstance - I\u0027ve fixed that by moving the sExecutor check inside the synchronized block.\n\nRe: making the setExecutor method non-static - wouldn\u0027t that then create the problems mentioned in your original comment (race condition if set is not synchronized, risk of orphaning the old executor, etc.)",
      "parentUuid": "83a78ab7_920353c2",
      "range": {
        "startLine": 136,
        "startChar": 23,
        "endLine": 136,
        "endChar": 34
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75f103d8_3321eba8",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1044446
      },
      "writtenOn": "2019-01-30T20:28:59Z",
      "side": 1,
      "message": "remove or wrap with debug check",
      "range": {
        "startLine": 216,
        "startChar": 20,
        "endLine": 216,
        "endChar": 64
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c023d88b_3da53cb6",
        "filename": "enterprise/feedback/src/main/java/androidx/enterprise/feedback/KeyedAppStatesReporter.java",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1411450
      },
      "writtenOn": "2019-01-31T11:06:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75f103d8_3321eba8",
      "range": {
        "startLine": 216,
        "startChar": 20,
        "endLine": 216,
        "endChar": 64
      },
      "revId": "a5700543dc2c25a3985ae90e543cbefee124a2f1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}