{
  "comments": [
    {
      "key": {
        "uuid": "cd5f43c6_de7b482d",
        "filename": "lifecycle/livedata/eap/src/main/java/androidx/lifecycle/CoroutineLiveData.kt",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-28T19:26:57Z",
      "side": 1,
      "message": "sergey: consider https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence-scope/index.html",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 23
      },
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a1fe6f7_6c7783e1",
        "filename": "lifecycle/livedata/eap/src/main/java/androidx/lifecycle/CoroutineLiveData.kt",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1376662
      },
      "writtenOn": "2019-02-28T21:34:14Z",
      "side": 1,
      "message": "This is really nice. Not requiring a Scope to call this function makes it quite easy to use.\n\nA common use case for this will be to transform data in the Repository layer, where injecting viewModelScope creates boilerplate.",
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05da749f_e741c617",
        "filename": "lifecycle/livedata/eap/src/main/java/androidx/lifecycle/CoroutineLiveData.kt",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-28T19:26:57Z",
      "side": 1,
      "message": "we can remove this one.",
      "range": {
        "startLine": 80,
        "startChar": 11,
        "endLine": 81,
        "endChar": 9
      },
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32acfdc8_95a285b8",
        "filename": "lifecycle/livedata/eap/src/main/java/androidx/lifecycle/CoroutineLiveData.kt",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1060337
      },
      "writtenOn": "2019-02-28T19:26:57Z",
      "side": 1,
      "message": "sergey: we can play unsafe and immediately remove w/o thread jump since we are the only ones using this MLD and add always happens before remove.",
      "range": {
        "startLine": 84,
        "startChar": 2,
        "endLine": 88,
        "endChar": 5
      },
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd4bbceb_8f1811fb",
        "filename": "lifecycle/livedata/eap/src/test/java/androidx/lifecycle/CoroutineLiveDataSwitchMapTest.kt",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1376662
      },
      "writtenOn": "2019-02-28T21:34:14Z",
      "side": 1,
      "message": "Passing the default context via the suspend function mechanism and possibly allowing an optional parameter might be a simpler API.\n\nCompare:\n\n```\nsuspend fun suspendContext() {\n    src.switchMap { yield(0) }  // use existing context implicitly\n\n    withContext(Dispatchers.Default) {\n        src.switchMap { yield(1) }  // use existing context modified by withContext\n    }\n\n    src.switchMap(Dispatchers.Default) { yield(2) } // pass an explicit context\n}\n```\n\n```\nsuspend fun parameterContext() {\n    src.switchMap(coroutineContext) { yield(0) }\n    \n    withContext(Dispatchers.Default) {\n        src.switchMap(coroutineContext) { yield(1) }\n    }\n\n    src.switchMap(Dispatchers.Default) { yield(3) }\n}\n```",
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e4a3b15_4d057dd9",
        "filename": "lifecycle/livedata/eap/src/test/java/androidx/lifecycle/LiveData.kt",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1376662
      },
      "writtenOn": "2019-02-28T21:34:14Z",
      "side": 1,
      "message": "This API surprises me compared to exposing an iterator similar to:\n\nhttps://github.com/Kotlin/kotlin-coroutines-examples/blob/master/examples/suspendingSequence/suspendingSequence.kt#L14\n\nCompare;\n\n```\nfor(value in liveData.asyncIterator) {\n}\n\nliveData.asyncIterator.map { something}\n// etc\n```\n\n(with cleanup handled by CoroutineScope cancellation)\n\n\n// vs nextValueAsync()\n```\nfor(value in liveData.nextValueAsync()) {\n}\n```\n\nIs this for testing or production usage?",
      "revId": "1ac2159690e38d434cf8e65e13862c96a73b8756",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}