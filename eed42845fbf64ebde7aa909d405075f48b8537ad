{
  "comments": [
    {
      "key": {
        "uuid": "152b1f39_8ea071d4",
        "filename": "lifecycle/runtime/eap/lint/build.gradle",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "FYI you can instead use a service registry; that\u0027s refactoring-safe etc.\n\nhttps://groups.google.com/d/msg/lint-dev/eCxw9PdTpVI/UA6of9VXAAAJ",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51debb15_4ed99987",
        "filename": "lifecycle/runtime/eap/lint/build.gradle",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "152b1f39_8ea071d4",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca795b54_6c4ff8e3",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleRuntimeIssueRegistry.kt",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "If you want to support multiple versions of lint also override minApi",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "807b1c8e_63af897c",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleRuntimeIssueRegistry.kt",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "That sounds good. Is there a way to validate that I didn\u0027t call anything new? or the best way is to compile against actually old version and in tests I can depend on newer once?",
      "parentUuid": "ca795b54_6c4ff8e3",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8baf3cd9_ec055834",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleRuntimeIssueRegistry.kt",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-21T13:35:12Z",
      "side": 1,
      "message": "Yes. Or alternatively, you can just place this lint check within lint itself such that it\u0027s bundled. We have a LOT of lint check that are library specific like this, such as checks for RecyclerView. It\u0027s nice that the architecture allows lint checks to be bundled with the individual libraries, but it does mean you have to worry about supporting multiple lint versions which is not the case if you bundle it.",
      "parentUuid": "807b1c8e_63af897c",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74b8dbb9_67865f49",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "no need to call super.",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1838b66_c2efe57a",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 52,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74b8dbb9_67865f49",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf7417e3_bc653c38",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "Maybe flip the order of these checks since I presume the second is much faster",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75520556_6895bf11",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf7417e3_bc653c38",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add75de1_918bc0e4",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "You can use raw strings here along with \\ at the end to indicate a line continuation. Lint will automatically handle this as well as trim the start. Take a look at builtin lint checks for examples, such as AlarmDetector.kt.",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9488d3_31dd64b0",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "add75de1_918bc0e4",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57955c4c_2f44f8ed",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "add , androidSpecific \u003d true",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebfa6e24_fe28e3ac",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57955c4c_2f44f8ed",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d99652a8_bf076bf5",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2019-03-19T13:35:12Z",
      "side": 1,
      "message": "I\u0027m not sure exactly what this state machine is doing but it looks like it might be trying to record state while visiting to figure out surrounding context -- that\u0027s sometimes tricky -- note that in the middle of a method, inside a try statement, you can declare a new class and override new methods with their own try statements etc. Doing these kinds of things often require pushing and popping things on/off a stack (And overriding the after* visit methods to know when to pop). I know, vague comment since I\u0027m not sure exactly what this is looking for (might be useful to add a comment here anyway).",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86a878bd_d5e0f65d",
        "filename": "lifecycle/runtime/eap/lint/src/main/java/androidx/lifecycle/lint/LifecycleWhenChecks.kt",
        "patchSetId": 9
      },
      "lineNbr": 83,
      "author": {
        "id": 1098853
      },
      "writtenOn": "2019-03-19T19:23:44Z",
      "side": 1,
      "message": "Yeah, currently I keep stack via recursion in \"visitTryExpression\": I save previous state, then call  \"accept\" on inner blocks than restore previous state and update it.  Though, maybe I\u0027ll change it later to actual stack + push / pop + afterVisit. \n\n\nBut yeah, I didn\u0027t take care of inlined classes / function declarations \u003d\u003e Updated that. Added comments.",
      "parentUuid": "d99652a8_bf076bf5",
      "revId": "eed42845fbf64ebde7aa909d405075f48b8537ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}