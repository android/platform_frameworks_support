/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.LibraryGroups
import androidx.build.LibraryVersions
import androidx.build.SupportLibraryExtension

import static androidx.build.dependencies.DependenciesKt.*

plugins {
    id("SupportAndroidLibraryPlugin")
}

android {
    buildTypes.all {
        consumerProguardFiles 'proguard-rules.pro'
    }
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/src/schemas".toString()]
            }
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/src/schemas".toString())
    }
}

dependencies {
<<<<<<< HEAD   (5a228e Merge "Merge empty history for sparse-5593360-L5240000032052)
    // @aar and { transitive = true } are needed as a workaround for
    // https://github.com/gradle/gradle/issues/3170
    api("android.arch.lifecycle:extensions:1.1.0@aar") { transitive = true }
=======
    // Using -PuseMaxDepVersions does not use the right version of the annotation processor
    // Remove this workaround after b/127495641 is fixed
    if (project.hasProperty('useMaxDepVersions')) {
        annotationProcessor(project(":room:room-compiler"))
        implementation(project(":room:room-runtime"))
        androidTestImplementation(project(":room:room-testing"))
    } else {
        annotationProcessor(ARCH_ROOM_COMPILER)
        implementation(ARCH_ROOM_RUNTIME)
        androidTestImplementation(ARCH_ROOM_TESTING)
    }
>>>>>>> BRANCH (2bab7f Merge "Merge cherrypicks of [972846] into sparse-5613706-L34)
    api(GUAVA_LISTENABLE_FUTURE)
<<<<<<< HEAD   (5a228e Merge "Merge empty history for sparse-5593360-L5240000032052)
    implementation("android.arch.persistence.room:runtime:1.1.1@aar") { transitive = true }
    annotationProcessor("android.arch.persistence.room:compiler:1.1.1")
    androidTestImplementation("android.arch.core:core-testing:1.1.0")
    androidTestImplementation("android.arch.persistence.room:testing:1.1.1")
    androidTestImplementation(TEST_EXT_JUNIT)
    androidTestImplementation(TEST_CORE)
    androidTestImplementation(TEST_RUNNER)
=======
    api(ARCH_LIFECYCLE_LIVEDATA)
    implementation(ANDROIDX_CORE)
    implementation(ARCH_LIFECYCLE_SERVICE)
    androidTestImplementation(KOTLIN_STDLIB)
    androidTestImplementation(ANDROIDX_TEST_EXT_JUNIT)
    androidTestImplementation(ANDROIDX_TEST_CORE)
    androidTestImplementation(WORK_ARCH_CORE_TESTING)
    androidTestImplementation(ANDROIDX_TEST_RUNNER)
>>>>>>> BRANCH (2bab7f Merge "Merge cherrypicks of [972846] into sparse-5613706-L34)
    androidTestImplementation(ESPRESSO_CORE)
    androidTestImplementation(MOCKITO_CORE, libs.exclude_bytebuddy) // DexMaker has its own MockMaker
    androidTestImplementation(DEXMAKER_MOCKITO, libs.exclude_bytebuddy) // DexMaker has its own MockMaker

    testImplementation(JUNIT)
}

supportLibrary {
    name = "Android WorkManager Runtime"
    publish = true
    mavenVersion = LibraryVersions.WORKMANAGER
    mavenGroup = LibraryGroups.WORKMANAGER
    inceptionYear = "2018"
    description = "Android WorkManager runtime library"
    url = SupportLibraryExtension.ARCHITECTURE_URL
    failOnUncheckedWarnings = false
    failOnDeprecationWarnings = false
}
