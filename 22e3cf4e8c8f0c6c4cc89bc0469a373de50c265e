{
  "comments": [
    {
      "key": {
        "uuid": "c9d5133d_20dce1fd",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "not using mockito, remove these, and others you aren\u0027t using (espresso, arch core testing)",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4e6575d_59e6c7d7",
        "filename": "paging/rxjava2/build.gradle",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:39:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9d5133d_20dce1fd",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31d54ace_e2bbbdc7",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "These should extend the ListenableItemKeyedDataSource - that way you can hook up cancellation",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba999e8e_3231a9a7",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:39:53Z",
      "side": 1,
      "message": "Isn\u0027t it better to piggyback off the existing ItemKeyedDataSource implementation so there isn\u0027t as much duplicated logic? How does extending off ListenableItemKeyedDataSource give us access to hook up cancellation - don\u0027t we still have access to the disposer here?\n\nI agree I should expose the disposers though through some api that\u0027s intuitive to adapter / pagedlists.",
      "parentUuid": "31d54ace_e2bbbdc7",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c6962f_b48e758c",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-25T15:07:11Z",
      "side": 1,
      "message": "I\u0027m talking about cancellation from the side of the paging library. If the paging library cancels a listenablefuture, a subclass of Listenable***DataSource can listen to that event (I think listen for a cancellation exception, double check that). That way if paging says this DataSource is no longer valid, it can cancel any outstanding loads, and if the Rx DataSource has operations that haven\u0027t finished, that cancellation would prevent extra work there.\n\nWe can\u0027t do this in the callback approach, because there\u0027s no way to listen for cancellation with a callback. (Theoretically we could add a \u0027addCancellationListener\u0027 or something similar to the callback class, but we don\u0027t want to do that because it\u0027s awkward to use)",
      "parentUuid": "ba999e8e_3231a9a7",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "155e0c1c_c6766fad",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-25T23:34:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37c6962f_b48e758c",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e9d06c2_9e666cbb",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "Just use the ones from the super class - we only expose the callback ones for legacy API support. (same for other response classes)",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f246e76d_a35afa30",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-25T23:34:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e9d06c2_9e666cbb",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b775fab_04f1373b",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "Is there a cost to wrapping these executors back as schedulers, especially since they probably were schedulers to begin with? At the very least it\u0027s unnecessary allocations.\n\nHow about when the RxPagedListBuilder creates an executor from a scheduler, it makes it of a specific \u0027SchedulerExecutor\u0027 class, which still holds the scheduler?\n\nThen you can check for that executor type in the constructor of these classes with instanceof SchedulerExecutor, and you can avoid Schedulers.from in most Rx usecases (with schedulers.from as a fallback)",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42257438_472ba7b9",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-26T03:18:59Z",
      "side": 1,
      "message": "What do you think about adding a getScheduler() method instead to the base class which caches the scheduler as a member at the same scope as the executor?",
      "parentUuid": "3b775fab_04f1373b",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0038b1c7_43d86255",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-26T14:48:42Z",
      "side": 1,
      "message": "The base class is in paging-common, so doesn\u0027t have access to the RxJava dependency (because it\u0027s large), so we can\u0027t.",
      "parentUuid": "42257438_472ba7b9",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35961588_7fe110cf",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "newly defined public methods need javadocs",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d69311d_1fb9ba8a",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:40:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35961588_7fe110cf",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fadd64b_f57258ea",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-25T15:07:11Z",
      "side": 1,
      "message": "not done for all classes",
      "parentUuid": "4d69311d_1fb9ba8a",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3e82dc0_70865441",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-25T23:34:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2fadd64b_f57258ea",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "853aea14_b273c90b",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "since you won\u0027t be using a distinct param from the super class, we\u0027ll need new method names here...\n\nloadAfterSingle?\nonLoadAfter?",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbf40f0c_770dee32",
        "filename": "paging/rxjava2/src/main/java/androidx/paging/RxItemKeyedDataSource.java",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-25T23:34:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "853aea14_b273c90b",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c15fbe5a_6e04d387",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "can just use init{} here, since you\u0027re not storing any per-test state (here and in other tests)\n\n\nor actually, just do:\n\n    val trivialDataSource \u003d ...",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63793fc1_2dcbbe4c",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:39:53Z",
      "side": 1,
      "message": "Done - re: using member intializers over init block. What about the initDataSource call? Does the init block run after or before members are initialized?",
      "parentUuid": "c15fbe5a_6e04d387",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d7dbc7b_8fd0cf82",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-25T15:07:11Z",
      "side": 1,
      "message": "After - it\u0027s equivalent to a constructor.",
      "parentUuid": "63793fc1_2dcbbe4c",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97c714f3_76be5560",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-26T03:17:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d7dbc7b_8fd0cf82",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d12c28fe_cc863e94",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "since paging uses ListenableFutures under the hood, it won\u0027t trigger a dispose directly on the datasource \n\nThis should test that calling dataSource.loadBefore(testParams).cancel() results in the underlying single getting cancelled",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d2056ab_3aa590dc",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:39:53Z",
      "side": 1,
      "message": "I think I understand that testing dispose here just tests the underlying laziness of rx and not the datasource itself, but I\u0027m not too sure what you mean by cancel since loadBefore returns a single here?",
      "parentUuid": "d12c28fe_cc863e94",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "914e3ef9_161e2d88",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-25T15:07:11Z",
      "side": 1,
      "message": "If you call loadBefore(ListenableItemKeyedDataSource.LoadParams()), you\u0027ll get a listenablefuture.\n\nCancel that, and verify that it disposes the subscription",
      "parentUuid": "5d2056ab_3aa590dc",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "392f6c47_23185b27",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-26T03:17:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "914e3ef9_161e2d88",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d635b2_85974ae2",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1010334
      },
      "writtenOn": "2019-03-22T16:51:18Z",
      "side": 1,
      "message": "avoid using \"expected \u003d\" unless it\u0027s a one line test in new code.\n\nAssert the error comes from .get with a try/catch, and assert the cause of the exception if appropriate.",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6366ccf8_fbee13f8",
        "filename": "paging/rxjava2/src/test/java/androidx/paging/RxItemKeyedDataSourceTest.kt",
        "patchSetId": 5
      },
      "lineNbr": 207,
      "author": {
        "id": 1458882
      },
      "writtenOn": "2019-03-23T06:39:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90d635b2_85974ae2",
      "revId": "22e3cf4e8c8f0c6c4cc89bc0469a373de50c265e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}