{
  "comments": [
    {
      "key": {
        "uuid": "4551ae1d_a731fd64",
        "filename": "car/cluster/src/main/java/androidx/car/cluster/navigation/util/VersionedEnum.java",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-04T21:43:51Z",
      "side": 1,
      "message": "As far as I can tell you aren\u0027t actually using any of the advanced feature of an Enum. If you switch to int constants and use @IntDefs instead, it will generate less classes and save you having to build this adapter.",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b295c514_769be8b0",
        "filename": "car/cluster/src/main/java/androidx/car/cluster/navigation/util/VersionedEnum.java",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1286929
      },
      "writtenOn": "2018-08-06T17:10:01Z",
      "side": 1,
      "message": "One of the features we would like to have is the ability for data producers to offer fallback values that consumers can use in case a new enum value is added.\nThe main example is Maneuver.Type, where a new value could be added (e.g.: TURN_LEFT_ON_TRAFFIC_LIGHT) and the producer can provide one or more alternatives (e.g.: TURN_LEFT). If the consumer doesn\u0027t yet know the new value, can use the alternative to provide a similar (although degraded) experience. \n\nWe are expecting to use this mechanism to handle the introduction of new enum values gracefully. \n\nI guess one option would be to use @IntDefs with RetentionPolicy.RUNTIME so we can validate whether the received int is in the set of known ints, using reflection. I\u0027m not sure about the performance degradation of doing this though.\n\nIn any case, we are expecting to exchange a list of values, not just one (the main value and its alternatives in priority order), and we would like to encapsulate this behavior in a common class. \n\nThoughts?",
      "parentUuid": "4551ae1d_a731fd64",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db833f17_010edc93",
        "filename": "car/cluster/src/main/java/androidx/car/cluster/navigation/util/VersionedEnum.java",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-06T17:16:41Z",
      "side": 1,
      "message": "These fallbacks you describe are not a behavior of enum but specific to your project/API, based on that I would recommend renaming this class to something more specific and updating the description to clarify.\n\nAs to whether these should be enums or ints, I\u0027ll leave that to Alan. An int array would save space over the string array though.",
      "parentUuid": "b295c514_769be8b0",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3bd77d_37f0be4b",
        "filename": "car/cluster/src/main/java/androidx/car/cluster/navigation/util/VersionedEnum.java",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1286929
      },
      "writtenOn": "2018-08-22T18:33:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db833f17_010edc93",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b798186_3f3212f4",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-04T21:43:51Z",
      "side": 1,
      "message": "Won\u0027t this break all libraries using 1.7?",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d8d58cf_720197e5",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1286929
      },
      "writtenOn": "2018-08-06T17:10:01Z",
      "side": 1,
      "message": "This only indicates what sources are supported. Existing libraries should work fine.\nWithout this change, libraries using Java8 can\u0027t use this annotation processor.",
      "parentUuid": "1b798186_3f3212f4",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749cbc93_20bc6d42",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-06T17:16:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7d8d58cf_720197e5",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f30dba77_80144235",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-04T21:43:51Z",
      "side": 1,
      "message": "Why did this need to change?",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c92218_b19b7f68",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1286929
      },
      "writtenOn": "2018-08-06T17:10:01Z",
      "side": 1,
      "message": "Before this change, the generated code wouldn\u0027t compile if the VersionedParcelable was a parametrized class (e.g.: VersionedEnum\u003cT\u003e). \nThe \"Parcelizer\" class generated by this code is not parametrized, but the generated \"read\" and \"write\" methods would try to return a parametrized result, causing a compilation error (e.g.: Unknown type parameter T). \nThis change make \"read\" and \"write\" return the base class (without type parameters), and it suppresses the unchecked cast warning.\nThoughts?",
      "parentUuid": "f30dba77_80144235",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b59db00c_74f4847d",
        "filename": "versionedparcelable/annotation/src/main/java/androidx/versionedparcelable/compiler/VersionedParcelProcessor.java",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1042886
      },
      "writtenOn": "2018-08-06T17:16:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "15c92218_b19b7f68",
      "revId": "67ef63e771ee76841ddd021ccb05b698ec134e64",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}